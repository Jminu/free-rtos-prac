
PORT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d4  080037d4  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080037d4  080037d4  0000506c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080037d4  080037d4  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d4  080037d4  000047d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037d8  080037d8  000047d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080037dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  2000006c  08003848  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d0  08003848  000051d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8d3  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002304  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00012c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b9  00000000  00000000  000137f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001918f  00000000  00000000  000140a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5ea  00000000  00000000  0002d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c565  00000000  00000000  00039822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5d87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003384  00000000  00000000  000c5dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000c9150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003734 	.word	0x08003734

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08003734 	.word	0x08003734

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000088 	.word	0x20000088
 800017c:	200000dc 	.word	0x200000dc

08000180 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	2b0a      	cmp	r3, #10
 800018c:	d106      	bne.n	800019c <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 800018e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000192:	2201      	movs	r2, #1
 8000194:	4907      	ldr	r1, [pc, #28]	@ (80001b4 <__io_putchar+0x34>)
 8000196:	4808      	ldr	r0, [pc, #32]	@ (80001b8 <__io_putchar+0x38>)
 8000198:	f001 fa38 	bl	800160c <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800019c:	1d39      	adds	r1, r7, #4
 800019e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001a2:	2201      	movs	r2, #1
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__io_putchar+0x38>)
 80001a6:	f001 fa31 	bl	800160c <HAL_UART_Transmit>
 return ch;
 80001aa:	687b      	ldr	r3, [r7, #4]
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	0800374c 	.word	0x0800374c
 80001b8:	200002dc 	.word	0x200002dc

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b5b0      	push	{r4, r5, r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 fa95 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c6:	f000 f823 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ca:	f000 f88d 	bl	80002e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ce:	f000 f861 	bl	8000294 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello world!\n");
 80001d2:	480c      	ldr	r0, [pc, #48]	@ (8000204 <main+0x48>)
 80001d4:	f002 ff20 	bl	8003018 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <main+0x4c>)
 80001da:	1d3c      	adds	r4, r7, #4
 80001dc:	461d      	mov	r5, r3
 80001de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fbfe 	bl	80019f0 <osThreadCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a05      	ldr	r2, [pc, #20]	@ (800020c <main+0x50>)
 80001f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart(); // 들어가보면 wrapping 되어있다. -> OS독립적으로 만들기위해서 이렇게 해놓음
 80001fa:	f001 fbf2 	bl	80019e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fe:	bf00      	nop
 8000200:	e7fd      	b.n	80001fe <main+0x42>
 8000202:	bf00      	nop
 8000204:	08003750 	.word	0x08003750
 8000208:	0800376c 	.word	0x0800376c
 800020c:	20000324 	.word	0x20000324

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	@ 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f002 ff02 	bl	8003028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000242:	2300      	movs	r3, #0
 8000244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000246:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800024a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fd7b 	bl	8000d4c <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800025c:	f000 f8d2 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f000 ffe8 	bl	8001250 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000286:	f000 f8bd 	bl	8000404 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	@ 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000298:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 800029a:	4a12      	ldr	r2, [pc, #72]	@ (80002e4 <MX_USART2_UART_Init+0x50>)
 800029c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800029e:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b8:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002ba:	220c      	movs	r2, #12
 80002bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ca:	4805      	ldr	r0, [pc, #20]	@ (80002e0 <MX_USART2_UART_Init+0x4c>)
 80002cc:	f001 f94e 	bl	800156c <HAL_UART_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002d6:	f000 f895 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	200002dc 	.word	0x200002dc
 80002e4:	40004400 	.word	0x40004400

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a2c      	ldr	r2, [pc, #176]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b2a      	ldr	r3, [pc, #168]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	4b27      	ldr	r3, [pc, #156]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a26      	ldr	r2, [pc, #152]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b24      	ldr	r3, [pc, #144]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b21      	ldr	r3, [pc, #132]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a20      	ldr	r2, [pc, #128]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b1e      	ldr	r3, [pc, #120]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000344:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1a      	ldr	r2, [pc, #104]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_GPIO_Init+0xcc>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	603b      	str	r3, [r7, #0]
 800035a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2120      	movs	r1, #32
 8000360:	4815      	ldr	r0, [pc, #84]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000362:	f000 fcb9 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800036a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800036c:	4b13      	ldr	r3, [pc, #76]	@ (80003bc <MX_GPIO_Init+0xd4>)
 800036e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	2300      	movs	r3, #0
 8000372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000374:	f107 0310 	add.w	r3, r7, #16
 8000378:	4619      	mov	r1, r3
 800037a:	4811      	ldr	r0, [pc, #68]	@ (80003c0 <MX_GPIO_Init+0xd8>)
 800037c:	f000 fb28 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000380:	2320      	movs	r3, #32
 8000382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000384:	2301      	movs	r3, #1
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038c:	2302      	movs	r3, #2
 800038e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	4808      	ldr	r0, [pc, #32]	@ (80003b8 <MX_GPIO_Init+0xd0>)
 8000398:	f000 fb1a 	bl	80009d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2105      	movs	r1, #5
 80003a0:	2028      	movs	r0, #40	@ 0x28
 80003a2:	f000 fade 	bl	8000962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a6:	2028      	movs	r0, #40	@ 0x28
 80003a8:	f000 faf7 	bl	800099a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ac:	bf00      	nop
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800
 80003bc:	10110000 	.word	0x10110000
 80003c0:	40011000 	.word	0x40011000

080003c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("[TASK] StartDefaultTask\n");
 80003cc:	480b      	ldr	r0, [pc, #44]	@ (80003fc <StartDefaultTask+0x38>)
 80003ce:	f002 fe23 	bl	8003018 <puts>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2120      	movs	r1, #32
 80003d6:	480a      	ldr	r0, [pc, #40]	@ (8000400 <StartDefaultTask+0x3c>)
 80003d8:	f000 fc7e 	bl	8000cd8 <HAL_GPIO_WritePin>
    osDelay(500);
 80003dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003e0:	f001 fb52 	bl	8001a88 <osDelay>
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2120      	movs	r1, #32
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <StartDefaultTask+0x3c>)
 80003ea:	f000 fc75 	bl	8000cd8 <HAL_GPIO_WritePin>
    osDelay(500);
 80003ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003f2:	f001 fb49 	bl	8001a88 <osDelay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80003f6:	bf00      	nop
 80003f8:	e7eb      	b.n	80003d2 <StartDefaultTask+0xe>
 80003fa:	bf00      	nop
 80003fc:	08003788 	.word	0x08003788
 8000400:	40010800 	.word	0x40010800

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <Error_Handler+0x8>

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000416:	4b18      	ldr	r3, [pc, #96]	@ (8000478 <HAL_MspInit+0x68>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a17      	ldr	r2, [pc, #92]	@ (8000478 <HAL_MspInit+0x68>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <HAL_MspInit+0x68>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <HAL_MspInit+0x68>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a11      	ldr	r2, [pc, #68]	@ (8000478 <HAL_MspInit+0x68>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <HAL_MspInit+0x68>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	210f      	movs	r1, #15
 800044a:	f06f 0001 	mvn.w	r0, #1
 800044e:	f000 fa88 	bl	8000962 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <HAL_MspInit+0x6c>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	@ (800047c <HAL_MspInit+0x6c>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a15      	ldr	r2, [pc, #84]	@ (80004f0 <HAL_UART_MspInit+0x70>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d123      	bne.n	80004e8 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004a0:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <HAL_UART_MspInit+0x74>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	4a13      	ldr	r2, [pc, #76]	@ (80004f4 <HAL_UART_MspInit+0x74>)
 80004a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004aa:	61d3      	str	r3, [r2, #28]
 80004ac:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <HAL_UART_MspInit+0x74>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <HAL_UART_MspInit+0x74>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a0d      	ldr	r2, [pc, #52]	@ (80004f4 <HAL_UART_MspInit+0x74>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <HAL_UART_MspInit+0x74>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004d0:	230c      	movs	r3, #12
 80004d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d4:	2302      	movs	r3, #2
 80004d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2302      	movs	r3, #2
 80004da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <HAL_UART_MspInit+0x78>)
 80004e4:	f000 fa74 	bl	80009d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40004400 	.word	0x40004400
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <NMI_Handler+0x4>

08000504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <HardFault_Handler+0x4>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <MemManage_Handler+0x4>

08000514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <BusFault_Handler+0x4>

0800051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <UsageFault_Handler+0x4>

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000534:	f000 f922 	bl	800077c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000538:	f002 f830 	bl	800259c <xTaskGetSchedulerState>
 800053c:	4603      	mov	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d001      	beq.n	8000546 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000542:	f002 fa21 	bl	8002988 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}

0800054a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800054e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000552:	f000 fbd9 	bl	8000d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}

0800055a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b086      	sub	sp, #24
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	e00a      	b.n	8000582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800056c:	f3af 8000 	nop.w
 8000570:	4601      	mov	r1, r0
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	1c5a      	adds	r2, r3, #1
 8000576:	60ba      	str	r2, [r7, #8]
 8000578:	b2ca      	uxtb	r2, r1
 800057a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbf0      	blt.n	800056c <_read+0x12>
  }

  return len;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	e009      	b.n	80005ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	60ba      	str	r2, [r7, #8]
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fde6 	bl	8000180 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697a      	ldr	r2, [r7, #20]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	429a      	cmp	r2, r3
 80005c0:	dbf1      	blt.n	80005a6 <_write+0x12>
  }
  return len;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <_close>:

int _close(int file)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005f2:	605a      	str	r2, [r3, #4]
  return 0;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <_isatty>:

int _isatty(int file)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000608:	2301      	movs	r3, #1
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	@ (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f002 fcec 	bl	8003038 <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	@ (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20005000 	.word	0x20005000
 800068c:	00000400 	.word	0x00000400
 8000690:	20000328 	.word	0x20000328
 8000694:	200011d0 	.word	0x200011d0

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff fff8 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006aa:	490c      	ldr	r1, [pc, #48]	@ (80006dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006ac:	4a0c      	ldr	r2, [pc, #48]	@ (80006e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c0:	4c09      	ldr	r4, [pc, #36]	@ (80006e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f002 fcb9 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fd73 	bl	80001bc <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80006e0:	080037dc 	.word	0x080037dc
  ldr r2, =_sbss
 80006e4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80006e8:	200011d0 	.word	0x200011d0

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f923 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fe80 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f93b 	bl	80009b6 <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000758:	f000 f903 	bl	8000962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	@ (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000008 	.word	0x20000008
 800079c:	2000032c 	.word	0x2000032c

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	@ (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	2000032c 	.word	0x2000032c

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	2b00      	cmp	r3, #0
 8000828:	db0b      	blt.n	8000842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 021f 	and.w	r2, r3, #31
 8000830:	4906      	ldr	r1, [pc, #24]	@ (800084c <__NVIC_EnableIRQ+0x34>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	2001      	movs	r0, #1
 800083a:	fa00 f202 	lsl.w	r2, r0, r2
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	@ (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	@ (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	@ 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	@ 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800092c:	f7ff ff90 	bl	8000850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff2d 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff42 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff90 	bl	80008a4 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5f 	bl	8000850 <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff35 	bl	8000818 <__NVIC_EnableIRQ>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffa2 	bl	8000908 <SysTick_Config>
 80009c4:	4603      	mov	r3, r0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b08b      	sub	sp, #44	@ 0x2c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e169      	b.n	8000cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e4:	2201      	movs	r2, #1
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	f040 8158 	bne.w	8000cb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	4a9a      	ldr	r2, [pc, #616]	@ (8000c70 <HAL_GPIO_Init+0x2a0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d05e      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a0c:	4a98      	ldr	r2, [pc, #608]	@ (8000c70 <HAL_GPIO_Init+0x2a0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d875      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a12:	4a98      	ldr	r2, [pc, #608]	@ (8000c74 <HAL_GPIO_Init+0x2a4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d058      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a18:	4a96      	ldr	r2, [pc, #600]	@ (8000c74 <HAL_GPIO_Init+0x2a4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d86f      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a1e:	4a96      	ldr	r2, [pc, #600]	@ (8000c78 <HAL_GPIO_Init+0x2a8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d052      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a24:	4a94      	ldr	r2, [pc, #592]	@ (8000c78 <HAL_GPIO_Init+0x2a8>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d869      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a2a:	4a94      	ldr	r2, [pc, #592]	@ (8000c7c <HAL_GPIO_Init+0x2ac>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d04c      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a30:	4a92      	ldr	r2, [pc, #584]	@ (8000c7c <HAL_GPIO_Init+0x2ac>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d863      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a36:	4a92      	ldr	r2, [pc, #584]	@ (8000c80 <HAL_GPIO_Init+0x2b0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d046      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a3c:	4a90      	ldr	r2, [pc, #576]	@ (8000c80 <HAL_GPIO_Init+0x2b0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d85d      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d82a      	bhi.n	8000a9c <HAL_GPIO_Init+0xcc>
 8000a46:	2b12      	cmp	r3, #18
 8000a48:	d859      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <HAL_GPIO_Init+0x80>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000aa5 	.word	0x08000aa5
 8000a58:	08000ab7 	.word	0x08000ab7
 8000a5c:	08000af9 	.word	0x08000af9
 8000a60:	08000aff 	.word	0x08000aff
 8000a64:	08000aff 	.word	0x08000aff
 8000a68:	08000aff 	.word	0x08000aff
 8000a6c:	08000aff 	.word	0x08000aff
 8000a70:	08000aff 	.word	0x08000aff
 8000a74:	08000aff 	.word	0x08000aff
 8000a78:	08000aff 	.word	0x08000aff
 8000a7c:	08000aff 	.word	0x08000aff
 8000a80:	08000aff 	.word	0x08000aff
 8000a84:	08000aff 	.word	0x08000aff
 8000a88:	08000aff 	.word	0x08000aff
 8000a8c:	08000aff 	.word	0x08000aff
 8000a90:	08000aff 	.word	0x08000aff
 8000a94:	08000aad 	.word	0x08000aad
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	4a79      	ldr	r2, [pc, #484]	@ (8000c84 <HAL_GPIO_Init+0x2b4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aa2:	e02c      	b.n	8000afe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e029      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e024      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	3308      	adds	r3, #8
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e01f      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	330c      	adds	r3, #12
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e01a      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e013      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d105      	bne.n	8000aec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	611a      	str	r2, [r3, #16]
          break;
 8000aea:	e009      	b.n	8000b00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aec:	2308      	movs	r3, #8
 8000aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	615a      	str	r2, [r3, #20]
          break;
 8000af6:	e003      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e000      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          break;
 8000afe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2bff      	cmp	r3, #255	@ 0xff
 8000b04:	d801      	bhi.n	8000b0a <HAL_GPIO_Init+0x13a>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	e001      	b.n	8000b0e <HAL_GPIO_Init+0x13e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	@ 0xff
 8000b14:	d802      	bhi.n	8000b1c <HAL_GPIO_Init+0x14c>
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0x152>
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	3b08      	subs	r3, #8
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	210f      	movs	r1, #15
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	401a      	ands	r2, r3
 8000b34:	6a39      	ldr	r1, [r7, #32]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 80b1 	beq.w	8000cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b50:	4b4d      	ldr	r3, [pc, #308]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a4c      	ldr	r2, [pc, #304]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b68:	4a48      	ldr	r2, [pc, #288]	@ (8000c8c <HAL_GPIO_Init+0x2bc>)
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	220f      	movs	r2, #15
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a40      	ldr	r2, [pc, #256]	@ (8000c90 <HAL_GPIO_Init+0x2c0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d013      	beq.n	8000bbc <HAL_GPIO_Init+0x1ec>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a3f      	ldr	r2, [pc, #252]	@ (8000c94 <HAL_GPIO_Init+0x2c4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d00d      	beq.n	8000bb8 <HAL_GPIO_Init+0x1e8>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c98 <HAL_GPIO_Init+0x2c8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d007      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8000c9c <HAL_GPIO_Init+0x2cc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d101      	bne.n	8000bb0 <HAL_GPIO_Init+0x1e0>
 8000bac:	2303      	movs	r3, #3
 8000bae:	e006      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	e004      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e002      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc0:	f002 0203 	and.w	r2, r2, #3
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	4093      	lsls	r3, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bce:	492f      	ldr	r1, [pc, #188]	@ (8000c8c <HAL_GPIO_Init+0x2bc>)
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	492c      	ldr	r1, [pc, #176]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4928      	ldr	r1, [pc, #160]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	4922      	ldr	r1, [pc, #136]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60cb      	str	r3, [r1, #12]
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	491e      	ldr	r1, [pc, #120]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4918      	ldr	r1, [pc, #96]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4914      	ldr	r1, [pc, #80]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d021      	beq.n	8000ca4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	490e      	ldr	r1, [pc, #56]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	600b      	str	r3, [r1, #0]
 8000c6c:	e021      	b.n	8000cb2 <HAL_GPIO_Init+0x2e2>
 8000c6e:	bf00      	nop
 8000c70:	10320000 	.word	0x10320000
 8000c74:	10310000 	.word	0x10310000
 8000c78:	10220000 	.word	0x10220000
 8000c7c:	10210000 	.word	0x10210000
 8000c80:	10120000 	.word	0x10120000
 8000c84:	10110000 	.word	0x10110000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	40010800 	.word	0x40010800
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40011400 	.word	0x40011400
 8000ca0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4909      	ldr	r1, [pc, #36]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f47f ae8e 	bne.w	80009e4 <HAL_GPIO_Init+0x14>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	372c      	adds	r7, #44	@ 0x2c
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40010400 	.word	0x40010400

08000cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce8:	787b      	ldrb	r3, [r7, #1]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf4:	e003      	b.n	8000cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	041a      	lsls	r2, r3, #16
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	611a      	str	r2, [r3, #16]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f806 	bl	8000d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40010400 	.word	0x40010400

08000d38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e272      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 8087 	beq.w	8000e7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d6c:	4b92      	ldr	r3, [pc, #584]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 030c 	and.w	r3, r3, #12
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d00c      	beq.n	8000d92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d78:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d112      	bne.n	8000daa <HAL_RCC_OscConfig+0x5e>
 8000d84:	4b8c      	ldr	r3, [pc, #560]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d90:	d10b      	bne.n	8000daa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d92:	4b89      	ldr	r3, [pc, #548]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d06c      	beq.n	8000e78 <HAL_RCC_OscConfig+0x12c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d168      	bne.n	8000e78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e24c      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000db2:	d106      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x76>
 8000db4:	4b80      	ldr	r3, [pc, #512]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a7f      	ldr	r2, [pc, #508]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e02e      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x98>
 8000dca:	4b7b      	ldr	r3, [pc, #492]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7a      	ldr	r2, [pc, #488]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	4b78      	ldr	r3, [pc, #480]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a77      	ldr	r2, [pc, #476]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e01d      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0xbc>
 8000dee:	4b72      	ldr	r3, [pc, #456]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a71      	ldr	r2, [pc, #452]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e00b      	b.n	8000e20 <HAL_RCC_OscConfig+0xd4>
 8000e08:	4b6b      	ldr	r3, [pc, #428]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a6a      	ldr	r2, [pc, #424]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b68      	ldr	r3, [pc, #416]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a67      	ldr	r2, [pc, #412]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d013      	beq.n	8000e50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fcba 	bl	80007a0 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fcb6 	bl	80007a0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	@ 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e200      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <HAL_RCC_OscConfig+0xe4>
 8000e4e:	e014      	b.n	8000e7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fca6 	bl	80007a0 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fca2 	bl	80007a0 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b64      	cmp	r3, #100	@ 0x64
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e1ec      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6a:	4b53      	ldr	r3, [pc, #332]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f0      	bne.n	8000e58 <HAL_RCC_OscConfig+0x10c>
 8000e76:	e000      	b.n	8000e7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d063      	beq.n	8000f4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e86:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e92:	4b49      	ldr	r3, [pc, #292]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d11c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x18c>
 8000e9e:	4b46      	ldr	r3, [pc, #280]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d116      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eaa:	4b43      	ldr	r3, [pc, #268]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x176>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d001      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e1c0      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4939      	ldr	r1, [pc, #228]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed6:	e03a      	b.n	8000f4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d020      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee0:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fc5b 	bl	80007a0 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eee:	f7ff fc57 	bl	80007a0 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e1a1      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4927      	ldr	r1, [pc, #156]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	600b      	str	r3, [r1, #0]
 8000f20:	e015      	b.n	8000f4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f22:	4b26      	ldr	r3, [pc, #152]	@ (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc3a 	bl	80007a0 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc36 	bl	80007a0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e180      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d03a      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d019      	beq.n	8000f96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff fc1a 	bl	80007a0 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc16 	bl	80007a0 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e160      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 face 	bl	8001530 <RCC_Delay>
 8000f94:	e01c      	b.n	8000fd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fc00 	bl	80007a0 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa2:	e00f      	b.n	8000fc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fbfc 	bl	80007a0 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d908      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e146      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	42420000 	.word	0x42420000
 8000fc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc4:	4b92      	ldr	r3, [pc, #584]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e9      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80a6 	beq.w	800112a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe2:	4b8b      	ldr	r3, [pc, #556]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10d      	bne.n	800100a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b88      	ldr	r3, [pc, #544]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a87      	ldr	r2, [pc, #540]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b85      	ldr	r3, [pc, #532]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	4b82      	ldr	r3, [pc, #520]	@ (8001214 <HAL_RCC_OscConfig+0x4c8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001016:	4b7f      	ldr	r3, [pc, #508]	@ (8001214 <HAL_RCC_OscConfig+0x4c8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a7e      	ldr	r2, [pc, #504]	@ (8001214 <HAL_RCC_OscConfig+0x4c8>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001022:	f7ff fbbd 	bl	80007a0 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102a:	f7ff fbb9 	bl	80007a0 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b64      	cmp	r3, #100	@ 0x64
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e103      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103c:	4b75      	ldr	r3, [pc, #468]	@ (8001214 <HAL_RCC_OscConfig+0x4c8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x312>
 8001050:	4b6f      	ldr	r3, [pc, #444]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a6e      	ldr	r2, [pc, #440]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	e02d      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x334>
 8001066:	4b6a      	ldr	r3, [pc, #424]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a69      	ldr	r2, [pc, #420]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	4b67      	ldr	r3, [pc, #412]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a66      	ldr	r2, [pc, #408]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	e01c      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d10c      	bne.n	80010a2 <HAL_RCC_OscConfig+0x356>
 8001088:	4b61      	ldr	r3, [pc, #388]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4a60      	ldr	r2, [pc, #384]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6213      	str	r3, [r2, #32]
 8001094:	4b5e      	ldr	r3, [pc, #376]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a5d      	ldr	r2, [pc, #372]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	e00b      	b.n	80010ba <HAL_RCC_OscConfig+0x36e>
 80010a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	4b58      	ldr	r3, [pc, #352]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a57      	ldr	r2, [pc, #348]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c2:	f7ff fb6d 	bl	80007a0 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c8:	e00a      	b.n	80010e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ca:	f7ff fb69 	bl	80007a0 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010d8:	4293      	cmp	r3, r2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e0b1      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0ee      	beq.n	80010ca <HAL_RCC_OscConfig+0x37e>
 80010ec:	e014      	b.n	8001118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb57 	bl	80007a0 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f4:	e00a      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff fb53 	bl	80007a0 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e09b      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110c:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1ee      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d105      	bne.n	800112a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111e:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a3b      	ldr	r2, [pc, #236]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8087 	beq.w	8001242 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001134:	4b36      	ldr	r3, [pc, #216]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b08      	cmp	r3, #8
 800113e:	d061      	beq.n	8001204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d146      	bne.n	80011d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001148:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <HAL_RCC_OscConfig+0x4cc>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fb27 	bl	80007a0 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff fb23 	bl	80007a0 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e06d      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001168:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f0      	bne.n	8001156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117c:	d108      	bne.n	8001190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4921      	ldr	r1, [pc, #132]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a19      	ldr	r1, [r3, #32]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	430b      	orrs	r3, r1
 80011a2:	491b      	ldr	r1, [pc, #108]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <HAL_RCC_OscConfig+0x4cc>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff faf7 	bl	80007a0 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff faf3 	bl	80007a0 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e03d      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x46a>
 80011d4:	e035      	b.n	8001242 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <HAL_RCC_OscConfig+0x4cc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fae0 	bl	80007a0 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e4:	f7ff fadc 	bl	80007a0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e026      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x498>
 8001202:	e01e      	b.n	8001242 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d107      	bne.n	800121c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e019      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
 8001210:	40021000 	.word	0x40021000
 8001214:	40007000 	.word	0x40007000
 8001218:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_RCC_OscConfig+0x500>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	429a      	cmp	r2, r3
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	429a      	cmp	r2, r3
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0d0      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b6a      	ldr	r3, [pc, #424]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d910      	bls.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b67      	ldr	r3, [pc, #412]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4965      	ldr	r1, [pc, #404]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b63      	ldr	r3, [pc, #396]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0b8      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ac:	4b59      	ldr	r3, [pc, #356]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c4:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d0:	4b50      	ldr	r3, [pc, #320]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	494d      	ldr	r1, [pc, #308]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d040      	beq.n	8001370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d115      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e07f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e073      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	4b3d      	ldr	r3, [pc, #244]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06b      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4b39      	ldr	r3, [pc, #228]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4936      	ldr	r1, [pc, #216]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fa2e 	bl	80007a0 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff fa2a 	bl	80007a0 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e053      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 020c 	and.w	r2, r3, #12
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d1eb      	bne.n	8001348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d210      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0207 	bic.w	r2, r3, #7
 8001386:	4922      	ldr	r1, [pc, #136]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e032      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4916      	ldr	r1, [pc, #88]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	490e      	ldr	r1, [pc, #56]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	490a      	ldr	r1, [pc, #40]	@ (8001418 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	5ccb      	ldrb	r3, [r1, r3]
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	4a09      	ldr	r2, [pc, #36]	@ (800141c <HAL_RCC_ClockConfig+0x1cc>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_RCC_ClockConfig+0x1d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f98c 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000
 8001414:	40021000 	.word	0x40021000
 8001418:	080037a8 	.word	0x080037a8
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b04      	cmp	r3, #4
 800144c:	d002      	beq.n	8001454 <HAL_RCC_GetSysClockFreq+0x30>
 800144e:	2b08      	cmp	r3, #8
 8001450:	d003      	beq.n	800145a <HAL_RCC_GetSysClockFreq+0x36>
 8001452:	e027      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001456:	613b      	str	r3, [r7, #16]
      break;
 8001458:	e027      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	0c9b      	lsrs	r3, r3, #18
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001464:	5cd3      	ldrb	r3, [r2, r3]
 8001466:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	0c5b      	lsrs	r3, r3, #17
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	4a11      	ldr	r2, [pc, #68]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001486:	fb03 f202 	mul.w	r2, r3, r2
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e004      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	613b      	str	r3, [r7, #16]
      break;
 80014a2:	e002      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x98>)
 80014a6:	613b      	str	r3, [r7, #16]
      break;
 80014a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014aa:	693b      	ldr	r3, [r7, #16]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	007a1200 	.word	0x007a1200
 80014c0:	080037c0 	.word	0x080037c0
 80014c4:	080037d0 	.word	0x080037d0
 80014c8:	003d0900 	.word	0x003d0900

080014cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d0:	4b02      	ldr	r3, [pc, #8]	@ (80014dc <HAL_RCC_GetHCLKFreq+0x10>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000000 	.word	0x20000000

080014e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014e4:	f7ff fff2 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	4903      	ldr	r1, [pc, #12]	@ (8001504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	080037b8 	.word	0x080037b8

08001508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800150c:	f7ff ffde 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	0adb      	lsrs	r3, r3, #11
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	4903      	ldr	r1, [pc, #12]	@ (800152c <HAL_RCC_GetPCLK2Freq+0x24>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001524:	4618      	mov	r0, r3
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	080037b8 	.word	0x080037b8

08001530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <RCC_Delay+0x34>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <RCC_Delay+0x38>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0a5b      	lsrs	r3, r3, #9
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800154c:	bf00      	nop
  }
  while (Delay --);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	60fa      	str	r2, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f9      	bne.n	800154c <RCC_Delay+0x1c>
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000000 	.word	0x20000000
 8001568:	10624dd3 	.word	0x10624dd3

0800156c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e042      	b.n	8001604 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7fe ff74 	bl	8000480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2224      	movs	r2, #36	@ 0x24
 800159c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f971 	bl	8001898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80015c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80015d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2220      	movs	r2, #32
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	4613      	mov	r3, r2
 800161a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b20      	cmp	r3, #32
 800162a:	d175      	bne.n	8001718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_UART_Transmit+0x2c>
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e06e      	b.n	800171a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2221      	movs	r2, #33	@ 0x21
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800164a:	f7ff f8a9 	bl	80007a0 <HAL_GetTick>
 800164e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	88fa      	ldrh	r2, [r7, #6]
 8001654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	88fa      	ldrh	r2, [r7, #6]
 800165a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001664:	d108      	bne.n	8001678 <HAL_UART_Transmit+0x6c>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	e003      	b.n	8001680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001680:	e02e      	b.n	80016e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f848 	bl	8001722 <UART_WaitOnFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e03a      	b.n	800171a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10b      	bne.n	80016c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3302      	adds	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e007      	b.n	80016d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3301      	adds	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1cb      	bne.n	8001682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2200      	movs	r2, #0
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f814 	bl	8001722 <UART_WaitOnFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e006      	b.n	800171a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2220      	movs	r2, #32
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001718:	2302      	movs	r3, #2
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001732:	e03b      	b.n	80017ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800173a:	d037      	beq.n	80017ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800173c:	f7ff f830 	bl	80007a0 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	6a3a      	ldr	r2, [r7, #32]
 8001748:	429a      	cmp	r2, r3
 800174a:	d302      	bcc.n	8001752 <UART_WaitOnFlagUntilTimeout+0x30>
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e03a      	b.n	80017cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d023      	beq.n	80017ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b80      	cmp	r3, #128	@ 0x80
 8001768:	d020      	beq.n	80017ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b40      	cmp	r3, #64	@ 0x40
 800176e:	d01d      	beq.n	80017ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b08      	cmp	r3, #8
 800177c:	d116      	bne.n	80017ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f81d 	bl	80017d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2208      	movs	r2, #8
 800179e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e00f      	b.n	80017cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4013      	ands	r3, r2
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d0b4      	beq.n	8001734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b095      	sub	sp, #84	@ 0x54
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	330c      	adds	r3, #12
 80017e2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e6:	e853 3f00 	ldrex	r3, [r3]
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80017ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	330c      	adds	r3, #12
 80017fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001800:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001802:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001804:	e841 2300 	strex	r3, r2, [r1]
 8001808:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800180a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e5      	bne.n	80017dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3314      	adds	r3, #20
 8001816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	e853 3f00 	ldrex	r3, [r3]
 800181e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3314      	adds	r3, #20
 800182e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001830:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001834:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001838:	e841 2300 	strex	r3, r2, [r1]
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1e5      	bne.n	8001810 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	2b01      	cmp	r3, #1
 800184a:	d119      	bne.n	8001880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	330c      	adds	r3, #12
 8001852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	e853 3f00 	ldrex	r3, [r3]
 800185a:	60bb      	str	r3, [r7, #8]
   return(result);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f023 0310 	bic.w	r3, r3, #16
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	330c      	adds	r3, #12
 800186a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800186c:	61ba      	str	r2, [r7, #24]
 800186e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	e841 2300 	strex	r3, r2, [r1]
 8001878:	613b      	str	r3, [r7, #16]
   return(result);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e5      	bne.n	800184c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800188e:	bf00      	nop
 8001890:	3754      	adds	r7, #84	@ 0x54
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80018d2:	f023 030c 	bic.w	r3, r3, #12
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	430b      	orrs	r3, r1
 80018de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2c      	ldr	r2, [pc, #176]	@ (80019ac <UART_SetConfig+0x114>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d103      	bne.n	8001908 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001900:	f7ff fe02 	bl	8001508 <HAL_RCC_GetPCLK2Freq>
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	e002      	b.n	800190e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001908:	f7ff fdea 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
 800190c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009a      	lsls	r2, r3, #2
 8001918:	441a      	add	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	4a22      	ldr	r2, [pc, #136]	@ (80019b0 <UART_SetConfig+0x118>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	0119      	lsls	r1, r3, #4
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	009a      	lsls	r2, r3, #2
 8001938:	441a      	add	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	fbb2 f2f3 	udiv	r2, r2, r3
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <UART_SetConfig+0x118>)
 8001946:	fba3 0302 	umull	r0, r3, r3, r2
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2064      	movs	r0, #100	@ 0x64
 800194e:	fb00 f303 	mul.w	r3, r0, r3
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	3332      	adds	r3, #50	@ 0x32
 8001958:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <UART_SetConfig+0x118>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001964:	4419      	add	r1, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	009a      	lsls	r2, r3, #2
 8001970:	441a      	add	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fbb2 f2f3 	udiv	r2, r2, r3
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <UART_SetConfig+0x118>)
 800197e:	fba3 0302 	umull	r0, r3, r3, r2
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2064      	movs	r0, #100	@ 0x64
 8001986:	fb00 f303 	mul.w	r3, r0, r3
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	3332      	adds	r3, #50	@ 0x32
 8001990:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <UART_SetConfig+0x118>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	f003 020f 	and.w	r2, r3, #15
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	440a      	add	r2, r1
 80019a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40013800 	.word	0x40013800
 80019b0:	51eb851f 	.word	0x51eb851f

080019b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	2b84      	cmp	r3, #132	@ 0x84
 80019c8:	d005      	beq.n	80019d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	3303      	adds	r3, #3
 80019d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019e6:	f000 fadf 	bl	8001fa8 <vTaskStartScheduler>
  
  return osOK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af04      	add	r7, sp, #16
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d020      	beq.n	8001a44 <osThreadCreate+0x54>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01c      	beq.n	8001a44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685c      	ldr	r4, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691e      	ldr	r6, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffc9 	bl	80019b4 <makeFreeRtosPriority>
 8001a22:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a2c:	9202      	str	r2, [sp, #8]
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	9100      	str	r1, [sp, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	4632      	mov	r2, r6
 8001a36:	4629      	mov	r1, r5
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f000 f8e8 	bl	8001c0e <xTaskCreateStatic>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e01c      	b.n	8001a7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685c      	ldr	r4, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a50:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ffab 	bl	80019b4 <makeFreeRtosPriority>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4632      	mov	r2, r6
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f000 f92d 	bl	8001cce <xTaskCreate>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <osDelay+0x16>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	e000      	b.n	8001aa0 <osDelay+0x18>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fa4b 	bl	8001f3c <vTaskDelay>
  
  return osOK;
 8001aa6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f103 0208 	add.w	r2, r3, #8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f103 0208 	add.w	r2, r3, #8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f103 0208 	add.w	r2, r3, #8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b62:	d103      	bne.n	8001b6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e00c      	b.n	8001b86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3308      	adds	r3, #8
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e002      	b.n	8001b7a <vListInsert+0x2e>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d2f6      	bcs.n	8001b74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	601a      	str	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6892      	ldr	r2, [r2, #8]
 8001bd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6852      	ldr	r2, [r2, #4]
 8001bdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d103      	bne.n	8001bf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1e5a      	subs	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b08e      	sub	sp, #56	@ 0x38
 8001c12:	af04      	add	r7, sp, #16
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10b      	bne.n	8001c3a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c26:	f383 8811 	msr	BASEPRI, r3
 8001c2a:	f3bf 8f6f 	isb	sy
 8001c2e:	f3bf 8f4f 	dsb	sy
 8001c32:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	e7fd      	b.n	8001c36 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c44:	f383 8811 	msr	BASEPRI, r3
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	61fb      	str	r3, [r7, #28]
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c58:	2354      	movs	r3, #84	@ 0x54
 8001c5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b54      	cmp	r3, #84	@ 0x54
 8001c60:	d00b      	beq.n	8001c7a <xTaskCreateStatic+0x6c>
	__asm volatile
 8001c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	61bb      	str	r3, [r7, #24]
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	e7fd      	b.n	8001c76 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001c7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01e      	beq.n	8001cc0 <xTaskCreateStatic+0xb2>
 8001c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9303      	str	r3, [sp, #12]
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f850 	bl	8001d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cba:	f000 f8d5 	bl	8001e68 <prvAddNewTaskToReadyList>
 8001cbe:	e001      	b.n	8001cc4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001cc4:	697b      	ldr	r3, [r7, #20]
	}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3728      	adds	r7, #40	@ 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b08c      	sub	sp, #48	@ 0x30
 8001cd2:	af04      	add	r7, sp, #16
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fe94 	bl	8002a10 <pvPortMalloc>
 8001ce8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00e      	beq.n	8001d0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001cf0:	2054      	movs	r0, #84	@ 0x54
 8001cf2:	f000 fe8d 	bl	8002a10 <pvPortMalloc>
 8001cf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d04:	e005      	b.n	8001d12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f000 ff50 	bl	8002bac <vPortFree>
 8001d0c:	e001      	b.n	8001d12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9303      	str	r3, [sp, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f80e 	bl	8001d58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d3c:	69f8      	ldr	r0, [r7, #28]
 8001d3e:	f000 f893 	bl	8001e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	e002      	b.n	8001d4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
	}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d70:	3b01      	subs	r3, #1
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f023 0307 	bic.w	r3, r3, #7
 8001d7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	617b      	str	r3, [r7, #20]
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01f      	beq.n	8001de8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	e012      	b.n	8001dd4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	7819      	ldrb	r1, [r3, #0]
 8001db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3334      	adds	r3, #52	@ 0x34
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d9e9      	bls.n	8001dae <prvInitialiseNewTask+0x56>
 8001dda:	e000      	b.n	8001dde <prvInitialiseNewTask+0x86>
			{
				break;
 8001ddc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de6:	e003      	b.n	8001df0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d901      	bls.n	8001dfa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001df6:	2306      	movs	r3, #6
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e04:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e08:	2200      	movs	r2, #0
 8001e0a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe6c 	bl	8001aee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e18:	3318      	adds	r3, #24
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe67 	bl	8001aee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e28:	f1c3 0207 	rsb	r2, r3, #7
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	2200      	movs	r2, #0
 8001e3a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	68f9      	ldr	r1, [r7, #12]
 8001e48:	69b8      	ldr	r0, [r7, #24]
 8001e4a:	f000 fc2b 	bl	80026a4 <pxPortInitialiseStack>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e70:	f000 fd0c 	bl	800288c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e74:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <prvAddNewTaskToReadyList+0xb8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a29      	ldr	r2, [pc, #164]	@ (8001f20 <prvAddNewTaskToReadyList+0xb8>)
 8001e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001e7e:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e86:	4a27      	ldr	r2, [pc, #156]	@ (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <prvAddNewTaskToReadyList+0xb8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d110      	bne.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001e94:	f000 fac4 	bl	8002420 <prvInitialiseTaskLists>
 8001e98:	e00d      	b.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001e9a:	4b23      	ldr	r3, [pc, #140]	@ (8001f28 <prvAddNewTaskToReadyList+0xc0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d802      	bhi.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <prvAddNewTaskToReadyList+0xc4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f2c <prvAddNewTaskToReadyList+0xc4>)
 8001ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <prvAddNewTaskToReadyList+0xc8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <prvAddNewTaskToReadyList+0xc8>)
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <prvAddNewTaskToReadyList+0xcc>)
 8001ee0:	441a      	add	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f7ff fe0c 	bl	8001b06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001eee:	f000 fcfd 	bl	80028ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <prvAddNewTaskToReadyList+0xc0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00e      	beq.n	8001f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <prvAddNewTaskToReadyList+0xd0>)
 8001f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000430 	.word	0x20000430
 8001f24:	20000330 	.word	0x20000330
 8001f28:	2000043c 	.word	0x2000043c
 8001f2c:	2000044c 	.word	0x2000044c
 8001f30:	20000438 	.word	0x20000438
 8001f34:	20000334 	.word	0x20000334
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d018      	beq.n	8001f80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f4e:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <vTaskDelay+0x64>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <vTaskDelay+0x32>
	__asm volatile
 8001f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f5a:	f383 8811 	msr	BASEPRI, r3
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	f3bf 8f4f 	dsb	sy
 8001f66:	60bb      	str	r3, [r7, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	e7fd      	b.n	8001f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001f6e:	f000 f87d 	bl	800206c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f72:	2100      	movs	r1, #0
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fb2f 	bl	80025d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001f7a:	f000 f885 	bl	8002088 <xTaskResumeAll>
 8001f7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d107      	bne.n	8001f96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <vTaskDelay+0x68>)
 8001f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000458 	.word	0x20000458
 8001fa4:	e000ed04 	.word	0xe000ed04

08001fa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001fb6:	463a      	mov	r2, r7
 8001fb8:	1d39      	adds	r1, r7, #4
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe f8c6 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	9202      	str	r2, [sp, #8]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	491f      	ldr	r1, [pc, #124]	@ (8002054 <vTaskStartScheduler+0xac>)
 8001fd8:	481f      	ldr	r0, [pc, #124]	@ (8002058 <vTaskStartScheduler+0xb0>)
 8001fda:	f7ff fe18 	bl	8001c0e <xTaskCreateStatic>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800205c <vTaskStartScheduler+0xb4>)
 8001fe2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <vTaskStartScheduler+0xb4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e001      	b.n	8001ff6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d116      	bne.n	800202a <vTaskStartScheduler+0x82>
	__asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	613b      	str	r3, [r7, #16]
}
 800200e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <vTaskStartScheduler+0xb8>)
 8002012:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002016:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <vTaskStartScheduler+0xbc>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <vTaskStartScheduler+0xc0>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002024:	f000 fbc0 	bl	80027a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002028:	e00f      	b.n	800204a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002030:	d10b      	bne.n	800204a <vTaskStartScheduler+0xa2>
	__asm volatile
 8002032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002036:	f383 8811 	msr	BASEPRI, r3
 800203a:	f3bf 8f6f 	isb	sy
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	60fb      	str	r3, [r7, #12]
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	e7fd      	b.n	8002046 <vTaskStartScheduler+0x9e>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	080037a0 	.word	0x080037a0
 8002058:	080023f1 	.word	0x080023f1
 800205c:	20000454 	.word	0x20000454
 8002060:	20000450 	.word	0x20000450
 8002064:	2000043c 	.word	0x2000043c
 8002068:	20000434 	.word	0x20000434

0800206c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <vTaskSuspendAll+0x18>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <vTaskSuspendAll+0x18>)
 8002078:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000458 	.word	0x20000458

08002088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002096:	4b42      	ldr	r3, [pc, #264]	@ (80021a0 <xTaskResumeAll+0x118>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800209e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	603b      	str	r3, [r7, #0]
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	e7fd      	b.n	80020b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80020b6:	f000 fbe9 	bl	800288c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80020ba:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <xTaskResumeAll+0x118>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3b01      	subs	r3, #1
 80020c0:	4a37      	ldr	r2, [pc, #220]	@ (80021a0 <xTaskResumeAll+0x118>)
 80020c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <xTaskResumeAll+0x118>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d161      	bne.n	8002190 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020cc:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <xTaskResumeAll+0x11c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05d      	beq.n	8002190 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020d4:	e02e      	b.n	8002134 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020d6:	4b34      	ldr	r3, [pc, #208]	@ (80021a8 <xTaskResumeAll+0x120>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3318      	adds	r3, #24
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fd6a 	bl	8001bbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fd65 	bl	8001bbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	2201      	movs	r2, #1
 80020f8:	409a      	lsls	r2, r3
 80020fa:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <xTaskResumeAll+0x124>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <xTaskResumeAll+0x124>)
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <xTaskResumeAll+0x128>)
 8002112:	441a      	add	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f7ff fcf3 	bl	8001b06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002124:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <xTaskResumeAll+0x12c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800212e:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <xTaskResumeAll+0x130>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <xTaskResumeAll+0x120>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1cc      	bne.n	80020d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002142:	f000 fa0b 	bl	800255c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002146:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <xTaskResumeAll+0x134>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002152:	f000 f837 	bl	80021c4 <xTaskIncrementTick>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800215c:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <xTaskResumeAll+0x130>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3b01      	subs	r3, #1
 8002166:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f1      	bne.n	8002152 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <xTaskResumeAll+0x134>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002174:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <xTaskResumeAll+0x130>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800217c:	2301      	movs	r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <xTaskResumeAll+0x138>)
 8002182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002190:	f000 fbac 	bl	80028ec <vPortExitCritical>

	return xAlreadyYielded;
 8002194:	68bb      	ldr	r3, [r7, #8]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000458 	.word	0x20000458
 80021a4:	20000430 	.word	0x20000430
 80021a8:	200003f0 	.word	0x200003f0
 80021ac:	20000438 	.word	0x20000438
 80021b0:	20000334 	.word	0x20000334
 80021b4:	20000330 	.word	0x20000330
 80021b8:	20000444 	.word	0x20000444
 80021bc:	20000440 	.word	0x20000440
 80021c0:	e000ed04 	.word	0xe000ed04

080021c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021ce:	4b4f      	ldr	r3, [pc, #316]	@ (800230c <xTaskIncrementTick+0x148>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 808f 	bne.w	80022f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80021d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002310 <xTaskIncrementTick+0x14c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80021e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002310 <xTaskIncrementTick+0x14c>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d121      	bne.n	8002230 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80021ec:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <xTaskIncrementTick+0x150>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <xTaskIncrementTick+0x4a>
	__asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	603b      	str	r3, [r7, #0]
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	e7fd      	b.n	800220a <xTaskIncrementTick+0x46>
 800220e:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <xTaskIncrementTick+0x150>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	4b40      	ldr	r3, [pc, #256]	@ (8002318 <xTaskIncrementTick+0x154>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a3e      	ldr	r2, [pc, #248]	@ (8002314 <xTaskIncrementTick+0x150>)
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4a3e      	ldr	r2, [pc, #248]	@ (8002318 <xTaskIncrementTick+0x154>)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b3e      	ldr	r3, [pc, #248]	@ (800231c <xTaskIncrementTick+0x158>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	4a3c      	ldr	r2, [pc, #240]	@ (800231c <xTaskIncrementTick+0x158>)
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	f000 f996 	bl	800255c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002230:	4b3b      	ldr	r3, [pc, #236]	@ (8002320 <xTaskIncrementTick+0x15c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	429a      	cmp	r2, r3
 8002238:	d348      	bcc.n	80022cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800223a:	4b36      	ldr	r3, [pc, #216]	@ (8002314 <xTaskIncrementTick+0x150>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002244:	4b36      	ldr	r3, [pc, #216]	@ (8002320 <xTaskIncrementTick+0x15c>)
 8002246:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800224a:	601a      	str	r2, [r3, #0]
					break;
 800224c:	e03e      	b.n	80022cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800224e:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <xTaskIncrementTick+0x150>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	429a      	cmp	r2, r3
 8002264:	d203      	bcs.n	800226e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002266:	4a2e      	ldr	r2, [pc, #184]	@ (8002320 <xTaskIncrementTick+0x15c>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800226c:	e02e      	b.n	80022cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3304      	adds	r3, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fca2 	bl	8001bbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	3318      	adds	r3, #24
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fc99 	bl	8001bbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	2201      	movs	r2, #1
 8002290:	409a      	lsls	r2, r3
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <xTaskIncrementTick+0x160>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <xTaskIncrementTick+0x160>)
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002328 <xTaskIncrementTick+0x164>)
 80022aa:	441a      	add	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3304      	adds	r3, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7ff fc27 	bl	8001b06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <xTaskIncrementTick+0x168>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d3b9      	bcc.n	800223a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022ca:	e7b6      	b.n	800223a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80022cc:	4b17      	ldr	r3, [pc, #92]	@ (800232c <xTaskIncrementTick+0x168>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d2:	4915      	ldr	r1, [pc, #84]	@ (8002328 <xTaskIncrementTick+0x164>)
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d901      	bls.n	80022e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <xTaskIncrementTick+0x16c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e004      	b.n	8002300 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80022f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <xTaskIncrementTick+0x170>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002334 <xTaskIncrementTick+0x170>)
 80022fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002300:	697b      	ldr	r3, [r7, #20]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000458 	.word	0x20000458
 8002310:	20000434 	.word	0x20000434
 8002314:	200003e8 	.word	0x200003e8
 8002318:	200003ec 	.word	0x200003ec
 800231c:	20000448 	.word	0x20000448
 8002320:	20000450 	.word	0x20000450
 8002324:	20000438 	.word	0x20000438
 8002328:	20000334 	.word	0x20000334
 800232c:	20000330 	.word	0x20000330
 8002330:	20000444 	.word	0x20000444
 8002334:	20000440 	.word	0x20000440

08002338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800233e:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <vTaskSwitchContext+0xa4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002346:	4b26      	ldr	r3, [pc, #152]	@ (80023e0 <vTaskSwitchContext+0xa8>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800234c:	e040      	b.n	80023d0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800234e:	4b24      	ldr	r3, [pc, #144]	@ (80023e0 <vTaskSwitchContext+0xa8>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002354:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <vTaskSwitchContext+0xac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	f1c3 031f 	rsb	r3, r3, #31
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	491f      	ldr	r1, [pc, #124]	@ (80023e8 <vTaskSwitchContext+0xb0>)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <vTaskSwitchContext+0x5e>
	__asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	607b      	str	r3, [r7, #4]
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <vTaskSwitchContext+0x5a>
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <vTaskSwitchContext+0xb0>)
 80023a2:	4413      	add	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	3308      	adds	r3, #8
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d104      	bne.n	80023c6 <vTaskSwitchContext+0x8e>
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <vTaskSwitchContext+0xb4>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000458 	.word	0x20000458
 80023e0:	20000444 	.word	0x20000444
 80023e4:	20000438 	.word	0x20000438
 80023e8:	20000334 	.word	0x20000334
 80023ec:	20000330 	.word	0x20000330

080023f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80023f8:	f000 f852 	bl	80024a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <prvIdleTask+0x28>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d9f9      	bls.n	80023f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <prvIdleTask+0x2c>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002414:	e7f0      	b.n	80023f8 <prvIdleTask+0x8>
 8002416:	bf00      	nop
 8002418:	20000334 	.word	0x20000334
 800241c:	e000ed04 	.word	0xe000ed04

08002420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	e00c      	b.n	8002446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <prvInitialiseTaskLists+0x60>)
 8002438:	4413      	add	r3, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fb38 	bl	8001ab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3301      	adds	r3, #1
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b06      	cmp	r3, #6
 800244a:	d9ef      	bls.n	800242c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800244c:	480d      	ldr	r0, [pc, #52]	@ (8002484 <prvInitialiseTaskLists+0x64>)
 800244e:	f7ff fb2f 	bl	8001ab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002452:	480d      	ldr	r0, [pc, #52]	@ (8002488 <prvInitialiseTaskLists+0x68>)
 8002454:	f7ff fb2c 	bl	8001ab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002458:	480c      	ldr	r0, [pc, #48]	@ (800248c <prvInitialiseTaskLists+0x6c>)
 800245a:	f7ff fb29 	bl	8001ab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800245e:	480c      	ldr	r0, [pc, #48]	@ (8002490 <prvInitialiseTaskLists+0x70>)
 8002460:	f7ff fb26 	bl	8001ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002464:	480b      	ldr	r0, [pc, #44]	@ (8002494 <prvInitialiseTaskLists+0x74>)
 8002466:	f7ff fb23 	bl	8001ab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800246a:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <prvInitialiseTaskLists+0x78>)
 800246c:	4a05      	ldr	r2, [pc, #20]	@ (8002484 <prvInitialiseTaskLists+0x64>)
 800246e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <prvInitialiseTaskLists+0x7c>)
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <prvInitialiseTaskLists+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000334 	.word	0x20000334
 8002484:	200003c0 	.word	0x200003c0
 8002488:	200003d4 	.word	0x200003d4
 800248c:	200003f0 	.word	0x200003f0
 8002490:	20000404 	.word	0x20000404
 8002494:	2000041c 	.word	0x2000041c
 8002498:	200003e8 	.word	0x200003e8
 800249c:	200003ec 	.word	0x200003ec

080024a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024a6:	e019      	b.n	80024dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80024a8:	f000 f9f0 	bl	800288c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ac:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <prvCheckTasksWaitingTermination+0x50>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fb7f 	bl	8001bbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <prvCheckTasksWaitingTermination+0x54>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	4a0b      	ldr	r2, [pc, #44]	@ (80024f4 <prvCheckTasksWaitingTermination+0x54>)
 80024c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <prvCheckTasksWaitingTermination+0x58>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <prvCheckTasksWaitingTermination+0x58>)
 80024d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80024d2:	f000 fa0b 	bl	80028ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f810 	bl	80024fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <prvCheckTasksWaitingTermination+0x58>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e1      	bne.n	80024a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000404 	.word	0x20000404
 80024f4:	20000430 	.word	0x20000430
 80024f8:	20000418 	.word	0x20000418

080024fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fb4a 	bl	8002bac <vPortFree>
				vPortFree( pxTCB );
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fb47 	bl	8002bac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800251e:	e019      	b.n	8002554 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002526:	2b01      	cmp	r3, #1
 8002528:	d103      	bne.n	8002532 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fb3e 	bl	8002bac <vPortFree>
	}
 8002530:	e010      	b.n	8002554 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002538:	2b02      	cmp	r3, #2
 800253a:	d00b      	beq.n	8002554 <prvDeleteTCB+0x58>
	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	60fb      	str	r3, [r7, #12]
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <prvDeleteTCB+0x54>
	}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <prvResetNextTaskUnblockTime+0x38>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800256c:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <prvResetNextTaskUnblockTime+0x3c>)
 800256e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002572:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002574:	e008      	b.n	8002588 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <prvResetNextTaskUnblockTime+0x38>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <prvResetNextTaskUnblockTime+0x3c>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	200003e8 	.word	0x200003e8
 8002598:	20000450 	.word	0x20000450

0800259c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80025a2:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <xTaskGetSchedulerState+0x34>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80025aa:	2301      	movs	r3, #1
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	e008      	b.n	80025c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025b0:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <xTaskGetSchedulerState+0x38>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80025b8:	2302      	movs	r3, #2
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	e001      	b.n	80025c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80025c2:	687b      	ldr	r3, [r7, #4]
	}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	2000043c 	.word	0x2000043c
 80025d4:	20000458 	.word	0x20000458

080025d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025e2:	4b29      	ldr	r3, [pc, #164]	@ (8002688 <prvAddCurrentTaskToDelayedList+0xb0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025e8:	4b28      	ldr	r3, [pc, #160]	@ (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3304      	adds	r3, #4
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fae4 	bl	8001bbc <uxListRemove>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	2201      	movs	r2, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4013      	ands	r3, r2
 800260e:	4a20      	ldr	r2, [pc, #128]	@ (8002690 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002610:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002618:	d10a      	bne.n	8002630 <prvAddCurrentTaskToDelayedList+0x58>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002620:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3304      	adds	r3, #4
 8002626:	4619      	mov	r1, r3
 8002628:	481a      	ldr	r0, [pc, #104]	@ (8002694 <prvAddCurrentTaskToDelayedList+0xbc>)
 800262a:	f7ff fa6c 	bl	8001b06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800262e:	e026      	b.n	800267e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d209      	bcs.n	800265c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002648:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <prvAddCurrentTaskToDelayedList+0xc0>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3304      	adds	r3, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f7ff fa79 	bl	8001b4c <vListInsert>
}
 800265a:	e010      	b.n	800267e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <prvAddCurrentTaskToDelayedList+0xc4>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3304      	adds	r3, #4
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f7ff fa6f 	bl	8001b4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800266e:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	429a      	cmp	r2, r3
 8002676:	d202      	bcs.n	800267e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002678:	4a09      	ldr	r2, [pc, #36]	@ (80026a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	6013      	str	r3, [r2, #0]
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000434 	.word	0x20000434
 800268c:	20000330 	.word	0x20000330
 8002690:	20000438 	.word	0x20000438
 8002694:	2000041c 	.word	0x2000041c
 8002698:	200003ec 	.word	0x200003ec
 800269c:	200003e8 	.word	0x200003e8
 80026a0:	20000450 	.word	0x20000450

080026a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3b04      	subs	r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3b04      	subs	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f023 0201 	bic.w	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3b04      	subs	r3, #4
 80026d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026d4:	4a08      	ldr	r2, [pc, #32]	@ (80026f8 <pxPortInitialiseStack+0x54>)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3b14      	subs	r3, #20
 80026de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3b20      	subs	r3, #32
 80026ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	080026fd 	.word	0x080026fd

080026fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <prvTaskExitError+0x54>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800270e:	d00b      	beq.n	8002728 <prvTaskExitError+0x2c>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	60fb      	str	r3, [r7, #12]
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <prvTaskExitError+0x28>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	60bb      	str	r3, [r7, #8]
}
 800273a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800273c:	bf00      	nop
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0fc      	beq.n	800273e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	2000000c 	.word	0x2000000c
	...

08002760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002760:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <pxCurrentTCBConst2>)
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	6808      	ldr	r0, [r1, #0]
 8002766:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800276a:	f380 8809 	msr	PSP, r0
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f380 8811 	msr	BASEPRI, r0
 800277a:	f04e 0e0d 	orr.w	lr, lr, #13
 800277e:	4770      	bx	lr

08002780 <pxCurrentTCBConst2>:
 8002780:	20000330 	.word	0x20000330
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop

08002788 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002788:	4806      	ldr	r0, [pc, #24]	@ (80027a4 <prvPortStartFirstTask+0x1c>)
 800278a:	6800      	ldr	r0, [r0, #0]
 800278c:	6800      	ldr	r0, [r0, #0]
 800278e:	f380 8808 	msr	MSP, r0
 8002792:	b662      	cpsie	i
 8002794:	b661      	cpsie	f
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	df00      	svc	0
 80027a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80027a2:	bf00      	nop
 80027a4:	e000ed08 	.word	0xe000ed08

080027a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80027ae:	4b32      	ldr	r3, [pc, #200]	@ (8002878 <xPortStartScheduler+0xd0>)
 80027b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	22ff      	movs	r2, #255	@ 0xff
 80027be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <xPortStartScheduler+0xd4>)
 80027d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80027d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002880 <xPortStartScheduler+0xd8>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027dc:	e009      	b.n	80027f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80027de:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <xPortStartScheduler+0xd8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	4a26      	ldr	r2, [pc, #152]	@ (8002880 <xPortStartScheduler+0xd8>)
 80027e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b80      	cmp	r3, #128	@ 0x80
 80027fc:	d0ef      	beq.n	80027de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80027fe:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <xPortStartScheduler+0xd8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	d00b      	beq.n	8002822 <xPortStartScheduler+0x7a>
	__asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	60bb      	str	r3, [r7, #8]
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	e7fd      	b.n	800281e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002822:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <xPortStartScheduler+0xd8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <xPortStartScheduler+0xd8>)
 800282a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <xPortStartScheduler+0xd8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002834:	4a12      	ldr	r2, [pc, #72]	@ (8002880 <xPortStartScheduler+0xd8>)
 8002836:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002840:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <xPortStartScheduler+0xdc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0f      	ldr	r2, [pc, #60]	@ (8002884 <xPortStartScheduler+0xdc>)
 8002846:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800284a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800284c:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <xPortStartScheduler+0xdc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0c      	ldr	r2, [pc, #48]	@ (8002884 <xPortStartScheduler+0xdc>)
 8002852:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002856:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002858:	f000 f8b8 	bl	80029cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <xPortStartScheduler+0xe0>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002862:	f7ff ff91 	bl	8002788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002866:	f7ff fd67 	bl	8002338 <vTaskSwitchContext>
	prvTaskExitError();
 800286a:	f7ff ff47 	bl	80026fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	e000e400 	.word	0xe000e400
 800287c:	2000045c 	.word	0x2000045c
 8002880:	20000460 	.word	0x20000460
 8002884:	e000ed20 	.word	0xe000ed20
 8002888:	2000000c 	.word	0x2000000c

0800288c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
	__asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	607b      	str	r3, [r7, #4]
}
 80028a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80028a6:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <vPortEnterCritical+0x58>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <vPortEnterCritical+0x58>)
 80028ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80028b0:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <vPortEnterCritical+0x58>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d110      	bne.n	80028da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <vPortEnterCritical+0x5c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <vPortEnterCritical+0x4e>
	__asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	603b      	str	r3, [r7, #0]
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	e7fd      	b.n	80028d6 <vPortEnterCritical+0x4a>
	}
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <vPortExitCritical+0x50>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10b      	bne.n	8002912 <vPortExitCritical+0x26>
	__asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	607b      	str	r3, [r7, #4]
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	e7fd      	b.n	800290e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <vPortExitCritical+0x50>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3b01      	subs	r3, #1
 8002918:	4a08      	ldr	r2, [pc, #32]	@ (800293c <vPortExitCritical+0x50>)
 800291a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800291c:	4b07      	ldr	r3, [pc, #28]	@ (800293c <vPortExitCritical+0x50>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <vPortExitCritical+0x44>
 8002924:	2300      	movs	r3, #0
 8002926:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800292e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000000c 	.word	0x2000000c

08002940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002940:	f3ef 8009 	mrs	r0, PSP
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <pxCurrentTCBConst>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002950:	6010      	str	r0, [r2, #0]
 8002952:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002956:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800295a:	f380 8811 	msr	BASEPRI, r0
 800295e:	f7ff fceb 	bl	8002338 <vTaskSwitchContext>
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f380 8811 	msr	BASEPRI, r0
 800296a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	6808      	ldr	r0, [r1, #0]
 8002972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002976:	f380 8809 	msr	PSP, r0
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	4770      	bx	lr

08002980 <pxCurrentTCBConst>:
 8002980:	20000330 	.word	0x20000330
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop

08002988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
	__asm volatile
 800298e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	607b      	str	r3, [r7, #4]
}
 80029a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80029a2:	f7ff fc0f 	bl	80021c4 <xTaskIncrementTick>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <xPortSysTickHandler+0x40>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f383 8811 	msr	BASEPRI, r3
}
 80029be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	e000ed04 	.word	0xe000ed04

080029cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <vPortSetupTimerInterrupt+0x30>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <vPortSetupTimerInterrupt+0x34>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <vPortSetupTimerInterrupt+0x38>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <vPortSetupTimerInterrupt+0x3c>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <vPortSetupTimerInterrupt+0x40>)
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029ee:	4b03      	ldr	r3, [pc, #12]	@ (80029fc <vPortSetupTimerInterrupt+0x30>)
 80029f0:	2207      	movs	r2, #7
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	e000e010 	.word	0xe000e010
 8002a00:	e000e018 	.word	0xe000e018
 8002a04:	20000000 	.word	0x20000000
 8002a08:	10624dd3 	.word	0x10624dd3
 8002a0c:	e000e014 	.word	0xe000e014

08002a10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	@ 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002a1c:	f7ff fb26 	bl	800206c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a20:	4b5c      	ldr	r3, [pc, #368]	@ (8002b94 <pvPortMalloc+0x184>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002a28:	f000 f924 	bl	8002c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <pvPortMalloc+0x188>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 8095 	bne.w	8002b64 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01e      	beq.n	8002a7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002a40:	2208      	movs	r2, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	3308      	adds	r3, #8
 8002a5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <pvPortMalloc+0x6e>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	617b      	str	r3, [r7, #20]
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	e7fd      	b.n	8002a7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d06f      	beq.n	8002b64 <pvPortMalloc+0x154>
 8002a84:	4b45      	ldr	r3, [pc, #276]	@ (8002b9c <pvPortMalloc+0x18c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d86a      	bhi.n	8002b64 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ba0 <pvPortMalloc+0x190>)
 8002a90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a92:	4b43      	ldr	r3, [pc, #268]	@ (8002ba0 <pvPortMalloc+0x190>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a98:	e004      	b.n	8002aa4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d903      	bls.n	8002ab6 <pvPortMalloc+0xa6>
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f1      	bne.n	8002a9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ab6:	4b37      	ldr	r3, [pc, #220]	@ (8002b94 <pvPortMalloc+0x184>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d051      	beq.n	8002b64 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	4413      	add	r3, r2
 8002ac8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	2308      	movs	r3, #8
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d920      	bls.n	8002b24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <pvPortMalloc+0xfc>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	613b      	str	r3, [r7, #16]
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad2      	subs	r2, r2, r3
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b1e:	69b8      	ldr	r0, [r7, #24]
 8002b20:	f000 f90a 	bl	8002d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <pvPortMalloc+0x18c>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b9c <pvPortMalloc+0x18c>)
 8002b30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b32:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <pvPortMalloc+0x18c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <pvPortMalloc+0x194>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d203      	bcs.n	8002b46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	@ (8002b9c <pvPortMalloc+0x18c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a18      	ldr	r2, [pc, #96]	@ (8002ba4 <pvPortMalloc+0x194>)
 8002b44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <pvPortMalloc+0x188>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <pvPortMalloc+0x198>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	4a11      	ldr	r2, [pc, #68]	@ (8002ba8 <pvPortMalloc+0x198>)
 8002b62:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b64:	f7ff fa90 	bl	8002088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <pvPortMalloc+0x17a>
	__asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	60fb      	str	r3, [r7, #12]
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	e7fd      	b.n	8002b86 <pvPortMalloc+0x176>
	return pvReturn;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3728      	adds	r7, #40	@ 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000106c 	.word	0x2000106c
 8002b98:	20001080 	.word	0x20001080
 8002b9c:	20001070 	.word	0x20001070
 8002ba0:	20001064 	.word	0x20001064
 8002ba4:	20001074 	.word	0x20001074
 8002ba8:	20001078 	.word	0x20001078

08002bac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04f      	beq.n	8002c5e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	425b      	negs	r3, r3
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4b25      	ldr	r3, [pc, #148]	@ (8002c68 <vPortFree+0xbc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <vPortFree+0x46>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	60fb      	str	r3, [r7, #12]
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <vPortFree+0x66>
	__asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	60bb      	str	r3, [r7, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	e7fd      	b.n	8002c0e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <vPortFree+0xbc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01e      	beq.n	8002c5e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11a      	bne.n	8002c5e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <vPortFree+0xbc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c38:	f7ff fa18 	bl	800206c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <vPortFree+0xc0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <vPortFree+0xc0>)
 8002c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c4a:	6938      	ldr	r0, [r7, #16]
 8002c4c:	f000 f874 	bl	8002d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <vPortFree+0xc4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	4a06      	ldr	r2, [pc, #24]	@ (8002c70 <vPortFree+0xc4>)
 8002c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002c5a:	f7ff fa15 	bl	8002088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20001080 	.word	0x20001080
 8002c6c:	20001070 	.word	0x20001070
 8002c70:	2000107c 	.word	0x2000107c

08002c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c7a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c80:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <prvHeapInit+0xac>)
 8002c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3307      	adds	r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0307 	bic.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <prvHeapInit+0xac>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002cac:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <prvHeapInit+0xb0>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <prvHeapInit+0xb0>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0307 	bic.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <prvHeapInit+0xb4>)
 8002cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <prvHeapInit+0xb4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <prvHeapInit+0xb4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <prvHeapInit+0xb4>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <prvHeapInit+0xb8>)
 8002d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <prvHeapInit+0xbc>)
 8002d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <prvHeapInit+0xc0>)
 8002d0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d12:	601a      	str	r2, [r3, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000464 	.word	0x20000464
 8002d24:	20001064 	.word	0x20001064
 8002d28:	2000106c 	.word	0x2000106c
 8002d2c:	20001074 	.word	0x20001074
 8002d30:	20001070 	.word	0x20001070
 8002d34:	20001080 	.word	0x20001080

08002d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d40:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <prvInsertBlockIntoFreeList+0xa8>)
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e002      	b.n	8002d4c <prvInsertBlockIntoFreeList+0x14>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d8f7      	bhi.n	8002d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4413      	add	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d108      	bne.n	8002d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	441a      	add	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	441a      	add	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d118      	bne.n	8002dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <prvInsertBlockIntoFreeList+0xac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d00d      	beq.n	8002db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e008      	b.n	8002dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <prvInsertBlockIntoFreeList+0xac>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e003      	b.n	8002dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d002      	beq.n	8002dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	20001064 	.word	0x20001064
 8002de4:	2000106c 	.word	0x2000106c

08002de8 <std>:
 8002de8:	2300      	movs	r3, #0
 8002dea:	b510      	push	{r4, lr}
 8002dec:	4604      	mov	r4, r0
 8002dee:	e9c0 3300 	strd	r3, r3, [r0]
 8002df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002df6:	6083      	str	r3, [r0, #8]
 8002df8:	8181      	strh	r1, [r0, #12]
 8002dfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8002dfc:	81c2      	strh	r2, [r0, #14]
 8002dfe:	6183      	str	r3, [r0, #24]
 8002e00:	4619      	mov	r1, r3
 8002e02:	2208      	movs	r2, #8
 8002e04:	305c      	adds	r0, #92	@ 0x5c
 8002e06:	f000 f90f 	bl	8003028 <memset>
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e40 <std+0x58>)
 8002e0c:	6224      	str	r4, [r4, #32]
 8002e0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <std+0x5c>)
 8002e12:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <std+0x60>)
 8002e16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <std+0x64>)
 8002e1a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <std+0x68>)
 8002e1e:	429c      	cmp	r4, r3
 8002e20:	d006      	beq.n	8002e30 <std+0x48>
 8002e22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e26:	4294      	cmp	r4, r2
 8002e28:	d002      	beq.n	8002e30 <std+0x48>
 8002e2a:	33d0      	adds	r3, #208	@ 0xd0
 8002e2c:	429c      	cmp	r4, r3
 8002e2e:	d105      	bne.n	8002e3c <std+0x54>
 8002e30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e38:	f000 b928 	b.w	800308c <__retarget_lock_init_recursive>
 8002e3c:	bd10      	pop	{r4, pc}
 8002e3e:	bf00      	nop
 8002e40:	08003341 	.word	0x08003341
 8002e44:	08003363 	.word	0x08003363
 8002e48:	0800339b 	.word	0x0800339b
 8002e4c:	080033bf 	.word	0x080033bf
 8002e50:	20001084 	.word	0x20001084

08002e54 <stdio_exit_handler>:
 8002e54:	4a02      	ldr	r2, [pc, #8]	@ (8002e60 <stdio_exit_handler+0xc>)
 8002e56:	4903      	ldr	r1, [pc, #12]	@ (8002e64 <stdio_exit_handler+0x10>)
 8002e58:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <stdio_exit_handler+0x14>)
 8002e5a:	f000 b869 	b.w	8002f30 <_fwalk_sglue>
 8002e5e:	bf00      	nop
 8002e60:	20000010 	.word	0x20000010
 8002e64:	080032d9 	.word	0x080032d9
 8002e68:	20000020 	.word	0x20000020

08002e6c <cleanup_stdio>:
 8002e6c:	6841      	ldr	r1, [r0, #4]
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <cleanup_stdio+0x34>)
 8002e70:	b510      	push	{r4, lr}
 8002e72:	4299      	cmp	r1, r3
 8002e74:	4604      	mov	r4, r0
 8002e76:	d001      	beq.n	8002e7c <cleanup_stdio+0x10>
 8002e78:	f000 fa2e 	bl	80032d8 <_fflush_r>
 8002e7c:	68a1      	ldr	r1, [r4, #8]
 8002e7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <cleanup_stdio+0x38>)
 8002e80:	4299      	cmp	r1, r3
 8002e82:	d002      	beq.n	8002e8a <cleanup_stdio+0x1e>
 8002e84:	4620      	mov	r0, r4
 8002e86:	f000 fa27 	bl	80032d8 <_fflush_r>
 8002e8a:	68e1      	ldr	r1, [r4, #12]
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <cleanup_stdio+0x3c>)
 8002e8e:	4299      	cmp	r1, r3
 8002e90:	d004      	beq.n	8002e9c <cleanup_stdio+0x30>
 8002e92:	4620      	mov	r0, r4
 8002e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e98:	f000 ba1e 	b.w	80032d8 <_fflush_r>
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20001084 	.word	0x20001084
 8002ea4:	200010ec 	.word	0x200010ec
 8002ea8:	20001154 	.word	0x20001154

08002eac <global_stdio_init.part.0>:
 8002eac:	b510      	push	{r4, lr}
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <global_stdio_init.part.0+0x30>)
 8002eb0:	4c0b      	ldr	r4, [pc, #44]	@ (8002ee0 <global_stdio_init.part.0+0x34>)
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <global_stdio_init.part.0+0x38>)
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	2104      	movs	r1, #4
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f7ff ff94 	bl	8002de8 <std>
 8002ec0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2109      	movs	r1, #9
 8002ec8:	f7ff ff8e 	bl	8002de8 <std>
 8002ecc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed6:	2112      	movs	r1, #18
 8002ed8:	f7ff bf86 	b.w	8002de8 <std>
 8002edc:	200011bc 	.word	0x200011bc
 8002ee0:	20001084 	.word	0x20001084
 8002ee4:	08002e55 	.word	0x08002e55

08002ee8 <__sfp_lock_acquire>:
 8002ee8:	4801      	ldr	r0, [pc, #4]	@ (8002ef0 <__sfp_lock_acquire+0x8>)
 8002eea:	f000 b8d0 	b.w	800308e <__retarget_lock_acquire_recursive>
 8002eee:	bf00      	nop
 8002ef0:	200011c1 	.word	0x200011c1

08002ef4 <__sfp_lock_release>:
 8002ef4:	4801      	ldr	r0, [pc, #4]	@ (8002efc <__sfp_lock_release+0x8>)
 8002ef6:	f000 b8cb 	b.w	8003090 <__retarget_lock_release_recursive>
 8002efa:	bf00      	nop
 8002efc:	200011c1 	.word	0x200011c1

08002f00 <__sinit>:
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
 8002f04:	f7ff fff0 	bl	8002ee8 <__sfp_lock_acquire>
 8002f08:	6a23      	ldr	r3, [r4, #32]
 8002f0a:	b11b      	cbz	r3, 8002f14 <__sinit+0x14>
 8002f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f10:	f7ff bff0 	b.w	8002ef4 <__sfp_lock_release>
 8002f14:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <__sinit+0x28>)
 8002f16:	6223      	str	r3, [r4, #32]
 8002f18:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <__sinit+0x2c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f5      	bne.n	8002f0c <__sinit+0xc>
 8002f20:	f7ff ffc4 	bl	8002eac <global_stdio_init.part.0>
 8002f24:	e7f2      	b.n	8002f0c <__sinit+0xc>
 8002f26:	bf00      	nop
 8002f28:	08002e6d 	.word	0x08002e6d
 8002f2c:	200011bc 	.word	0x200011bc

08002f30 <_fwalk_sglue>:
 8002f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f34:	4607      	mov	r7, r0
 8002f36:	4688      	mov	r8, r1
 8002f38:	4614      	mov	r4, r2
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f40:	f1b9 0901 	subs.w	r9, r9, #1
 8002f44:	d505      	bpl.n	8002f52 <_fwalk_sglue+0x22>
 8002f46:	6824      	ldr	r4, [r4, #0]
 8002f48:	2c00      	cmp	r4, #0
 8002f4a:	d1f7      	bne.n	8002f3c <_fwalk_sglue+0xc>
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f52:	89ab      	ldrh	r3, [r5, #12]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d907      	bls.n	8002f68 <_fwalk_sglue+0x38>
 8002f58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	d003      	beq.n	8002f68 <_fwalk_sglue+0x38>
 8002f60:	4629      	mov	r1, r5
 8002f62:	4638      	mov	r0, r7
 8002f64:	47c0      	blx	r8
 8002f66:	4306      	orrs	r6, r0
 8002f68:	3568      	adds	r5, #104	@ 0x68
 8002f6a:	e7e9      	b.n	8002f40 <_fwalk_sglue+0x10>

08002f6c <_puts_r>:
 8002f6c:	6a03      	ldr	r3, [r0, #32]
 8002f6e:	b570      	push	{r4, r5, r6, lr}
 8002f70:	4605      	mov	r5, r0
 8002f72:	460e      	mov	r6, r1
 8002f74:	6884      	ldr	r4, [r0, #8]
 8002f76:	b90b      	cbnz	r3, 8002f7c <_puts_r+0x10>
 8002f78:	f7ff ffc2 	bl	8002f00 <__sinit>
 8002f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f7e:	07db      	lsls	r3, r3, #31
 8002f80:	d405      	bmi.n	8002f8e <_puts_r+0x22>
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	0598      	lsls	r0, r3, #22
 8002f86:	d402      	bmi.n	8002f8e <_puts_r+0x22>
 8002f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f8a:	f000 f880 	bl	800308e <__retarget_lock_acquire_recursive>
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	0719      	lsls	r1, r3, #28
 8002f92:	d502      	bpl.n	8002f9a <_puts_r+0x2e>
 8002f94:	6923      	ldr	r3, [r4, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d135      	bne.n	8003006 <_puts_r+0x9a>
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 fa51 	bl	8003444 <__swsetup_r>
 8002fa2:	b380      	cbz	r0, 8003006 <_puts_r+0x9a>
 8002fa4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002faa:	07da      	lsls	r2, r3, #31
 8002fac:	d405      	bmi.n	8002fba <_puts_r+0x4e>
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	059b      	lsls	r3, r3, #22
 8002fb2:	d402      	bmi.n	8002fba <_puts_r+0x4e>
 8002fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fb6:	f000 f86b 	bl	8003090 <__retarget_lock_release_recursive>
 8002fba:	4628      	mov	r0, r5
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da04      	bge.n	8002fcc <_puts_r+0x60>
 8002fc2:	69a2      	ldr	r2, [r4, #24]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	dc17      	bgt.n	8002ff8 <_puts_r+0x8c>
 8002fc8:	290a      	cmp	r1, #10
 8002fca:	d015      	beq.n	8002ff8 <_puts_r+0x8c>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	6022      	str	r2, [r4, #0]
 8002fd2:	7019      	strb	r1, [r3, #0]
 8002fd4:	68a3      	ldr	r3, [r4, #8]
 8002fd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	60a3      	str	r3, [r4, #8]
 8002fde:	2900      	cmp	r1, #0
 8002fe0:	d1ed      	bne.n	8002fbe <_puts_r+0x52>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da11      	bge.n	800300a <_puts_r+0x9e>
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	210a      	movs	r1, #10
 8002fea:	4628      	mov	r0, r5
 8002fec:	f000 f9eb 	bl	80033c6 <__swbuf_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d0d7      	beq.n	8002fa4 <_puts_r+0x38>
 8002ff4:	250a      	movs	r5, #10
 8002ff6:	e7d7      	b.n	8002fa8 <_puts_r+0x3c>
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	f000 f9e3 	bl	80033c6 <__swbuf_r>
 8003000:	3001      	adds	r0, #1
 8003002:	d1e7      	bne.n	8002fd4 <_puts_r+0x68>
 8003004:	e7ce      	b.n	8002fa4 <_puts_r+0x38>
 8003006:	3e01      	subs	r6, #1
 8003008:	e7e4      	b.n	8002fd4 <_puts_r+0x68>
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	6022      	str	r2, [r4, #0]
 8003010:	220a      	movs	r2, #10
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e7ee      	b.n	8002ff4 <_puts_r+0x88>
	...

08003018 <puts>:
 8003018:	4b02      	ldr	r3, [pc, #8]	@ (8003024 <puts+0xc>)
 800301a:	4601      	mov	r1, r0
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	f7ff bfa5 	b.w	8002f6c <_puts_r>
 8003022:	bf00      	nop
 8003024:	2000001c 	.word	0x2000001c

08003028 <memset>:
 8003028:	4603      	mov	r3, r0
 800302a:	4402      	add	r2, r0
 800302c:	4293      	cmp	r3, r2
 800302e:	d100      	bne.n	8003032 <memset+0xa>
 8003030:	4770      	bx	lr
 8003032:	f803 1b01 	strb.w	r1, [r3], #1
 8003036:	e7f9      	b.n	800302c <memset+0x4>

08003038 <__errno>:
 8003038:	4b01      	ldr	r3, [pc, #4]	@ (8003040 <__errno+0x8>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	2000001c 	.word	0x2000001c

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2600      	movs	r6, #0
 8003048:	4d0c      	ldr	r5, [pc, #48]	@ (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	@ (8003080 <__libc_init_array+0x3c>)
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	f000 fb6e 	bl	8003734 <_init>
 8003058:	2600      	movs	r6, #0
 800305a:	4d0a      	ldr	r5, [pc, #40]	@ (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	@ (8003088 <__libc_init_array+0x44>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	f855 3b04 	ldr.w	r3, [r5], #4
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	f855 3b04 	ldr.w	r3, [r5], #4
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	080037d4 	.word	0x080037d4
 8003080:	080037d4 	.word	0x080037d4
 8003084:	080037d4 	.word	0x080037d4
 8003088:	080037d8 	.word	0x080037d8

0800308c <__retarget_lock_init_recursive>:
 800308c:	4770      	bx	lr

0800308e <__retarget_lock_acquire_recursive>:
 800308e:	4770      	bx	lr

08003090 <__retarget_lock_release_recursive>:
 8003090:	4770      	bx	lr
	...

08003094 <sbrk_aligned>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	4e0f      	ldr	r6, [pc, #60]	@ (80030d4 <sbrk_aligned+0x40>)
 8003098:	460c      	mov	r4, r1
 800309a:	6831      	ldr	r1, [r6, #0]
 800309c:	4605      	mov	r5, r0
 800309e:	b911      	cbnz	r1, 80030a6 <sbrk_aligned+0x12>
 80030a0:	f000 fabc 	bl	800361c <_sbrk_r>
 80030a4:	6030      	str	r0, [r6, #0]
 80030a6:	4621      	mov	r1, r4
 80030a8:	4628      	mov	r0, r5
 80030aa:	f000 fab7 	bl	800361c <_sbrk_r>
 80030ae:	1c43      	adds	r3, r0, #1
 80030b0:	d103      	bne.n	80030ba <sbrk_aligned+0x26>
 80030b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80030b6:	4620      	mov	r0, r4
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	1cc4      	adds	r4, r0, #3
 80030bc:	f024 0403 	bic.w	r4, r4, #3
 80030c0:	42a0      	cmp	r0, r4
 80030c2:	d0f8      	beq.n	80030b6 <sbrk_aligned+0x22>
 80030c4:	1a21      	subs	r1, r4, r0
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 faa8 	bl	800361c <_sbrk_r>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d1f2      	bne.n	80030b6 <sbrk_aligned+0x22>
 80030d0:	e7ef      	b.n	80030b2 <sbrk_aligned+0x1e>
 80030d2:	bf00      	nop
 80030d4:	200011c4 	.word	0x200011c4

080030d8 <_malloc_r>:
 80030d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030dc:	1ccd      	adds	r5, r1, #3
 80030de:	f025 0503 	bic.w	r5, r5, #3
 80030e2:	3508      	adds	r5, #8
 80030e4:	2d0c      	cmp	r5, #12
 80030e6:	bf38      	it	cc
 80030e8:	250c      	movcc	r5, #12
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	4606      	mov	r6, r0
 80030ee:	db01      	blt.n	80030f4 <_malloc_r+0x1c>
 80030f0:	42a9      	cmp	r1, r5
 80030f2:	d904      	bls.n	80030fe <_malloc_r+0x26>
 80030f4:	230c      	movs	r3, #12
 80030f6:	6033      	str	r3, [r6, #0]
 80030f8:	2000      	movs	r0, #0
 80030fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031d4 <_malloc_r+0xfc>
 8003102:	f000 f911 	bl	8003328 <__malloc_lock>
 8003106:	f8d8 3000 	ldr.w	r3, [r8]
 800310a:	461c      	mov	r4, r3
 800310c:	bb44      	cbnz	r4, 8003160 <_malloc_r+0x88>
 800310e:	4629      	mov	r1, r5
 8003110:	4630      	mov	r0, r6
 8003112:	f7ff ffbf 	bl	8003094 <sbrk_aligned>
 8003116:	1c43      	adds	r3, r0, #1
 8003118:	4604      	mov	r4, r0
 800311a:	d158      	bne.n	80031ce <_malloc_r+0xf6>
 800311c:	f8d8 4000 	ldr.w	r4, [r8]
 8003120:	4627      	mov	r7, r4
 8003122:	2f00      	cmp	r7, #0
 8003124:	d143      	bne.n	80031ae <_malloc_r+0xd6>
 8003126:	2c00      	cmp	r4, #0
 8003128:	d04b      	beq.n	80031c2 <_malloc_r+0xea>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	4639      	mov	r1, r7
 800312e:	4630      	mov	r0, r6
 8003130:	eb04 0903 	add.w	r9, r4, r3
 8003134:	f000 fa72 	bl	800361c <_sbrk_r>
 8003138:	4581      	cmp	r9, r0
 800313a:	d142      	bne.n	80031c2 <_malloc_r+0xea>
 800313c:	6821      	ldr	r1, [r4, #0]
 800313e:	4630      	mov	r0, r6
 8003140:	1a6d      	subs	r5, r5, r1
 8003142:	4629      	mov	r1, r5
 8003144:	f7ff ffa6 	bl	8003094 <sbrk_aligned>
 8003148:	3001      	adds	r0, #1
 800314a:	d03a      	beq.n	80031c2 <_malloc_r+0xea>
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	442b      	add	r3, r5
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	f8d8 3000 	ldr.w	r3, [r8]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	bb62      	cbnz	r2, 80031b4 <_malloc_r+0xdc>
 800315a:	f8c8 7000 	str.w	r7, [r8]
 800315e:	e00f      	b.n	8003180 <_malloc_r+0xa8>
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	1b52      	subs	r2, r2, r5
 8003164:	d420      	bmi.n	80031a8 <_malloc_r+0xd0>
 8003166:	2a0b      	cmp	r2, #11
 8003168:	d917      	bls.n	800319a <_malloc_r+0xc2>
 800316a:	1961      	adds	r1, r4, r5
 800316c:	42a3      	cmp	r3, r4
 800316e:	6025      	str	r5, [r4, #0]
 8003170:	bf18      	it	ne
 8003172:	6059      	strne	r1, [r3, #4]
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	bf08      	it	eq
 8003178:	f8c8 1000 	streq.w	r1, [r8]
 800317c:	5162      	str	r2, [r4, r5]
 800317e:	604b      	str	r3, [r1, #4]
 8003180:	4630      	mov	r0, r6
 8003182:	f000 f8d7 	bl	8003334 <__malloc_unlock>
 8003186:	f104 000b 	add.w	r0, r4, #11
 800318a:	1d23      	adds	r3, r4, #4
 800318c:	f020 0007 	bic.w	r0, r0, #7
 8003190:	1ac2      	subs	r2, r0, r3
 8003192:	bf1c      	itt	ne
 8003194:	1a1b      	subne	r3, r3, r0
 8003196:	50a3      	strne	r3, [r4, r2]
 8003198:	e7af      	b.n	80030fa <_malloc_r+0x22>
 800319a:	6862      	ldr	r2, [r4, #4]
 800319c:	42a3      	cmp	r3, r4
 800319e:	bf0c      	ite	eq
 80031a0:	f8c8 2000 	streq.w	r2, [r8]
 80031a4:	605a      	strne	r2, [r3, #4]
 80031a6:	e7eb      	b.n	8003180 <_malloc_r+0xa8>
 80031a8:	4623      	mov	r3, r4
 80031aa:	6864      	ldr	r4, [r4, #4]
 80031ac:	e7ae      	b.n	800310c <_malloc_r+0x34>
 80031ae:	463c      	mov	r4, r7
 80031b0:	687f      	ldr	r7, [r7, #4]
 80031b2:	e7b6      	b.n	8003122 <_malloc_r+0x4a>
 80031b4:	461a      	mov	r2, r3
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	d1fb      	bne.n	80031b4 <_malloc_r+0xdc>
 80031bc:	2300      	movs	r3, #0
 80031be:	6053      	str	r3, [r2, #4]
 80031c0:	e7de      	b.n	8003180 <_malloc_r+0xa8>
 80031c2:	230c      	movs	r3, #12
 80031c4:	4630      	mov	r0, r6
 80031c6:	6033      	str	r3, [r6, #0]
 80031c8:	f000 f8b4 	bl	8003334 <__malloc_unlock>
 80031cc:	e794      	b.n	80030f8 <_malloc_r+0x20>
 80031ce:	6005      	str	r5, [r0, #0]
 80031d0:	e7d6      	b.n	8003180 <_malloc_r+0xa8>
 80031d2:	bf00      	nop
 80031d4:	200011c8 	.word	0x200011c8

080031d8 <__sflush_r>:
 80031d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	0716      	lsls	r6, r2, #28
 80031e0:	4605      	mov	r5, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	d454      	bmi.n	8003290 <__sflush_r+0xb8>
 80031e6:	684b      	ldr	r3, [r1, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	dc02      	bgt.n	80031f2 <__sflush_r+0x1a>
 80031ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	dd48      	ble.n	8003284 <__sflush_r+0xac>
 80031f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031f4:	2e00      	cmp	r6, #0
 80031f6:	d045      	beq.n	8003284 <__sflush_r+0xac>
 80031f8:	2300      	movs	r3, #0
 80031fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031fe:	682f      	ldr	r7, [r5, #0]
 8003200:	6a21      	ldr	r1, [r4, #32]
 8003202:	602b      	str	r3, [r5, #0]
 8003204:	d030      	beq.n	8003268 <__sflush_r+0x90>
 8003206:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	0759      	lsls	r1, r3, #29
 800320c:	d505      	bpl.n	800321a <__sflush_r+0x42>
 800320e:	6863      	ldr	r3, [r4, #4]
 8003210:	1ad2      	subs	r2, r2, r3
 8003212:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003214:	b10b      	cbz	r3, 800321a <__sflush_r+0x42>
 8003216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003218:	1ad2      	subs	r2, r2, r3
 800321a:	2300      	movs	r3, #0
 800321c:	4628      	mov	r0, r5
 800321e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003220:	6a21      	ldr	r1, [r4, #32]
 8003222:	47b0      	blx	r6
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	89a3      	ldrh	r3, [r4, #12]
 8003228:	d106      	bne.n	8003238 <__sflush_r+0x60>
 800322a:	6829      	ldr	r1, [r5, #0]
 800322c:	291d      	cmp	r1, #29
 800322e:	d82b      	bhi.n	8003288 <__sflush_r+0xb0>
 8003230:	4a28      	ldr	r2, [pc, #160]	@ (80032d4 <__sflush_r+0xfc>)
 8003232:	40ca      	lsrs	r2, r1
 8003234:	07d6      	lsls	r6, r2, #31
 8003236:	d527      	bpl.n	8003288 <__sflush_r+0xb0>
 8003238:	2200      	movs	r2, #0
 800323a:	6062      	str	r2, [r4, #4]
 800323c:	6922      	ldr	r2, [r4, #16]
 800323e:	04d9      	lsls	r1, r3, #19
 8003240:	6022      	str	r2, [r4, #0]
 8003242:	d504      	bpl.n	800324e <__sflush_r+0x76>
 8003244:	1c42      	adds	r2, r0, #1
 8003246:	d101      	bne.n	800324c <__sflush_r+0x74>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	b903      	cbnz	r3, 800324e <__sflush_r+0x76>
 800324c:	6560      	str	r0, [r4, #84]	@ 0x54
 800324e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003250:	602f      	str	r7, [r5, #0]
 8003252:	b1b9      	cbz	r1, 8003284 <__sflush_r+0xac>
 8003254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003258:	4299      	cmp	r1, r3
 800325a:	d002      	beq.n	8003262 <__sflush_r+0x8a>
 800325c:	4628      	mov	r0, r5
 800325e:	f000 fa21 	bl	80036a4 <_free_r>
 8003262:	2300      	movs	r3, #0
 8003264:	6363      	str	r3, [r4, #52]	@ 0x34
 8003266:	e00d      	b.n	8003284 <__sflush_r+0xac>
 8003268:	2301      	movs	r3, #1
 800326a:	4628      	mov	r0, r5
 800326c:	47b0      	blx	r6
 800326e:	4602      	mov	r2, r0
 8003270:	1c50      	adds	r0, r2, #1
 8003272:	d1c9      	bne.n	8003208 <__sflush_r+0x30>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0c6      	beq.n	8003208 <__sflush_r+0x30>
 800327a:	2b1d      	cmp	r3, #29
 800327c:	d001      	beq.n	8003282 <__sflush_r+0xaa>
 800327e:	2b16      	cmp	r3, #22
 8003280:	d11d      	bne.n	80032be <__sflush_r+0xe6>
 8003282:	602f      	str	r7, [r5, #0]
 8003284:	2000      	movs	r0, #0
 8003286:	e021      	b.n	80032cc <__sflush_r+0xf4>
 8003288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328c:	b21b      	sxth	r3, r3
 800328e:	e01a      	b.n	80032c6 <__sflush_r+0xee>
 8003290:	690f      	ldr	r7, [r1, #16]
 8003292:	2f00      	cmp	r7, #0
 8003294:	d0f6      	beq.n	8003284 <__sflush_r+0xac>
 8003296:	0793      	lsls	r3, r2, #30
 8003298:	bf18      	it	ne
 800329a:	2300      	movne	r3, #0
 800329c:	680e      	ldr	r6, [r1, #0]
 800329e:	bf08      	it	eq
 80032a0:	694b      	ldreq	r3, [r1, #20]
 80032a2:	1bf6      	subs	r6, r6, r7
 80032a4:	600f      	str	r7, [r1, #0]
 80032a6:	608b      	str	r3, [r1, #8]
 80032a8:	2e00      	cmp	r6, #0
 80032aa:	ddeb      	ble.n	8003284 <__sflush_r+0xac>
 80032ac:	4633      	mov	r3, r6
 80032ae:	463a      	mov	r2, r7
 80032b0:	4628      	mov	r0, r5
 80032b2:	6a21      	ldr	r1, [r4, #32]
 80032b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80032b8:	47e0      	blx	ip
 80032ba:	2800      	cmp	r0, #0
 80032bc:	dc07      	bgt.n	80032ce <__sflush_r+0xf6>
 80032be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ce:	4407      	add	r7, r0
 80032d0:	1a36      	subs	r6, r6, r0
 80032d2:	e7e9      	b.n	80032a8 <__sflush_r+0xd0>
 80032d4:	20400001 	.word	0x20400001

080032d8 <_fflush_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	690b      	ldr	r3, [r1, #16]
 80032dc:	4605      	mov	r5, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	b913      	cbnz	r3, 80032e8 <_fflush_r+0x10>
 80032e2:	2500      	movs	r5, #0
 80032e4:	4628      	mov	r0, r5
 80032e6:	bd38      	pop	{r3, r4, r5, pc}
 80032e8:	b118      	cbz	r0, 80032f2 <_fflush_r+0x1a>
 80032ea:	6a03      	ldr	r3, [r0, #32]
 80032ec:	b90b      	cbnz	r3, 80032f2 <_fflush_r+0x1a>
 80032ee:	f7ff fe07 	bl	8002f00 <__sinit>
 80032f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f3      	beq.n	80032e2 <_fflush_r+0xa>
 80032fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032fc:	07d0      	lsls	r0, r2, #31
 80032fe:	d404      	bmi.n	800330a <_fflush_r+0x32>
 8003300:	0599      	lsls	r1, r3, #22
 8003302:	d402      	bmi.n	800330a <_fflush_r+0x32>
 8003304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003306:	f7ff fec2 	bl	800308e <__retarget_lock_acquire_recursive>
 800330a:	4628      	mov	r0, r5
 800330c:	4621      	mov	r1, r4
 800330e:	f7ff ff63 	bl	80031d8 <__sflush_r>
 8003312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003314:	4605      	mov	r5, r0
 8003316:	07da      	lsls	r2, r3, #31
 8003318:	d4e4      	bmi.n	80032e4 <_fflush_r+0xc>
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	059b      	lsls	r3, r3, #22
 800331e:	d4e1      	bmi.n	80032e4 <_fflush_r+0xc>
 8003320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003322:	f7ff feb5 	bl	8003090 <__retarget_lock_release_recursive>
 8003326:	e7dd      	b.n	80032e4 <_fflush_r+0xc>

08003328 <__malloc_lock>:
 8003328:	4801      	ldr	r0, [pc, #4]	@ (8003330 <__malloc_lock+0x8>)
 800332a:	f7ff beb0 	b.w	800308e <__retarget_lock_acquire_recursive>
 800332e:	bf00      	nop
 8003330:	200011c0 	.word	0x200011c0

08003334 <__malloc_unlock>:
 8003334:	4801      	ldr	r0, [pc, #4]	@ (800333c <__malloc_unlock+0x8>)
 8003336:	f7ff beab 	b.w	8003090 <__retarget_lock_release_recursive>
 800333a:	bf00      	nop
 800333c:	200011c0 	.word	0x200011c0

08003340 <__sread>:
 8003340:	b510      	push	{r4, lr}
 8003342:	460c      	mov	r4, r1
 8003344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003348:	f000 f956 	bl	80035f8 <_read_r>
 800334c:	2800      	cmp	r0, #0
 800334e:	bfab      	itete	ge
 8003350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003352:	89a3      	ldrhlt	r3, [r4, #12]
 8003354:	181b      	addge	r3, r3, r0
 8003356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800335a:	bfac      	ite	ge
 800335c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800335e:	81a3      	strhlt	r3, [r4, #12]
 8003360:	bd10      	pop	{r4, pc}

08003362 <__swrite>:
 8003362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003366:	461f      	mov	r7, r3
 8003368:	898b      	ldrh	r3, [r1, #12]
 800336a:	4605      	mov	r5, r0
 800336c:	05db      	lsls	r3, r3, #23
 800336e:	460c      	mov	r4, r1
 8003370:	4616      	mov	r6, r2
 8003372:	d505      	bpl.n	8003380 <__swrite+0x1e>
 8003374:	2302      	movs	r3, #2
 8003376:	2200      	movs	r2, #0
 8003378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800337c:	f000 f92a 	bl	80035d4 <_lseek_r>
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	4632      	mov	r2, r6
 8003384:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003388:	81a3      	strh	r3, [r4, #12]
 800338a:	4628      	mov	r0, r5
 800338c:	463b      	mov	r3, r7
 800338e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003396:	f000 b951 	b.w	800363c <_write_r>

0800339a <__sseek>:
 800339a:	b510      	push	{r4, lr}
 800339c:	460c      	mov	r4, r1
 800339e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a2:	f000 f917 	bl	80035d4 <_lseek_r>
 80033a6:	1c43      	adds	r3, r0, #1
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	bf15      	itete	ne
 80033ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80033ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80033b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80033b6:	81a3      	strheq	r3, [r4, #12]
 80033b8:	bf18      	it	ne
 80033ba:	81a3      	strhne	r3, [r4, #12]
 80033bc:	bd10      	pop	{r4, pc}

080033be <__sclose>:
 80033be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033c2:	f000 b94d 	b.w	8003660 <_close_r>

080033c6 <__swbuf_r>:
 80033c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c8:	460e      	mov	r6, r1
 80033ca:	4614      	mov	r4, r2
 80033cc:	4605      	mov	r5, r0
 80033ce:	b118      	cbz	r0, 80033d8 <__swbuf_r+0x12>
 80033d0:	6a03      	ldr	r3, [r0, #32]
 80033d2:	b90b      	cbnz	r3, 80033d8 <__swbuf_r+0x12>
 80033d4:	f7ff fd94 	bl	8002f00 <__sinit>
 80033d8:	69a3      	ldr	r3, [r4, #24]
 80033da:	60a3      	str	r3, [r4, #8]
 80033dc:	89a3      	ldrh	r3, [r4, #12]
 80033de:	071a      	lsls	r2, r3, #28
 80033e0:	d501      	bpl.n	80033e6 <__swbuf_r+0x20>
 80033e2:	6923      	ldr	r3, [r4, #16]
 80033e4:	b943      	cbnz	r3, 80033f8 <__swbuf_r+0x32>
 80033e6:	4621      	mov	r1, r4
 80033e8:	4628      	mov	r0, r5
 80033ea:	f000 f82b 	bl	8003444 <__swsetup_r>
 80033ee:	b118      	cbz	r0, 80033f8 <__swbuf_r+0x32>
 80033f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80033f4:	4638      	mov	r0, r7
 80033f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	6922      	ldr	r2, [r4, #16]
 80033fc:	b2f6      	uxtb	r6, r6
 80033fe:	1a98      	subs	r0, r3, r2
 8003400:	6963      	ldr	r3, [r4, #20]
 8003402:	4637      	mov	r7, r6
 8003404:	4283      	cmp	r3, r0
 8003406:	dc05      	bgt.n	8003414 <__swbuf_r+0x4e>
 8003408:	4621      	mov	r1, r4
 800340a:	4628      	mov	r0, r5
 800340c:	f7ff ff64 	bl	80032d8 <_fflush_r>
 8003410:	2800      	cmp	r0, #0
 8003412:	d1ed      	bne.n	80033f0 <__swbuf_r+0x2a>
 8003414:	68a3      	ldr	r3, [r4, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	60a3      	str	r3, [r4, #8]
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	6022      	str	r2, [r4, #0]
 8003420:	701e      	strb	r6, [r3, #0]
 8003422:	6962      	ldr	r2, [r4, #20]
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	429a      	cmp	r2, r3
 8003428:	d004      	beq.n	8003434 <__swbuf_r+0x6e>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	07db      	lsls	r3, r3, #31
 800342e:	d5e1      	bpl.n	80033f4 <__swbuf_r+0x2e>
 8003430:	2e0a      	cmp	r6, #10
 8003432:	d1df      	bne.n	80033f4 <__swbuf_r+0x2e>
 8003434:	4621      	mov	r1, r4
 8003436:	4628      	mov	r0, r5
 8003438:	f7ff ff4e 	bl	80032d8 <_fflush_r>
 800343c:	2800      	cmp	r0, #0
 800343e:	d0d9      	beq.n	80033f4 <__swbuf_r+0x2e>
 8003440:	e7d6      	b.n	80033f0 <__swbuf_r+0x2a>
	...

08003444 <__swsetup_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4b29      	ldr	r3, [pc, #164]	@ (80034ec <__swsetup_r+0xa8>)
 8003448:	4605      	mov	r5, r0
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	460c      	mov	r4, r1
 800344e:	b118      	cbz	r0, 8003458 <__swsetup_r+0x14>
 8003450:	6a03      	ldr	r3, [r0, #32]
 8003452:	b90b      	cbnz	r3, 8003458 <__swsetup_r+0x14>
 8003454:	f7ff fd54 	bl	8002f00 <__sinit>
 8003458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800345c:	0719      	lsls	r1, r3, #28
 800345e:	d422      	bmi.n	80034a6 <__swsetup_r+0x62>
 8003460:	06da      	lsls	r2, r3, #27
 8003462:	d407      	bmi.n	8003474 <__swsetup_r+0x30>
 8003464:	2209      	movs	r2, #9
 8003466:	602a      	str	r2, [r5, #0]
 8003468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800346c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003470:	81a3      	strh	r3, [r4, #12]
 8003472:	e033      	b.n	80034dc <__swsetup_r+0x98>
 8003474:	0758      	lsls	r0, r3, #29
 8003476:	d512      	bpl.n	800349e <__swsetup_r+0x5a>
 8003478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800347a:	b141      	cbz	r1, 800348e <__swsetup_r+0x4a>
 800347c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003480:	4299      	cmp	r1, r3
 8003482:	d002      	beq.n	800348a <__swsetup_r+0x46>
 8003484:	4628      	mov	r0, r5
 8003486:	f000 f90d 	bl	80036a4 <_free_r>
 800348a:	2300      	movs	r3, #0
 800348c:	6363      	str	r3, [r4, #52]	@ 0x34
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003494:	81a3      	strh	r3, [r4, #12]
 8003496:	2300      	movs	r3, #0
 8003498:	6063      	str	r3, [r4, #4]
 800349a:	6923      	ldr	r3, [r4, #16]
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	81a3      	strh	r3, [r4, #12]
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	b94b      	cbnz	r3, 80034be <__swsetup_r+0x7a>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034b4:	d003      	beq.n	80034be <__swsetup_r+0x7a>
 80034b6:	4621      	mov	r1, r4
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 f83e 	bl	800353a <__smakebuf_r>
 80034be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034c2:	f013 0201 	ands.w	r2, r3, #1
 80034c6:	d00a      	beq.n	80034de <__swsetup_r+0x9a>
 80034c8:	2200      	movs	r2, #0
 80034ca:	60a2      	str	r2, [r4, #8]
 80034cc:	6962      	ldr	r2, [r4, #20]
 80034ce:	4252      	negs	r2, r2
 80034d0:	61a2      	str	r2, [r4, #24]
 80034d2:	6922      	ldr	r2, [r4, #16]
 80034d4:	b942      	cbnz	r2, 80034e8 <__swsetup_r+0xa4>
 80034d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80034da:	d1c5      	bne.n	8003468 <__swsetup_r+0x24>
 80034dc:	bd38      	pop	{r3, r4, r5, pc}
 80034de:	0799      	lsls	r1, r3, #30
 80034e0:	bf58      	it	pl
 80034e2:	6962      	ldrpl	r2, [r4, #20]
 80034e4:	60a2      	str	r2, [r4, #8]
 80034e6:	e7f4      	b.n	80034d2 <__swsetup_r+0x8e>
 80034e8:	2000      	movs	r0, #0
 80034ea:	e7f7      	b.n	80034dc <__swsetup_r+0x98>
 80034ec:	2000001c 	.word	0x2000001c

080034f0 <__swhatbuf_r>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	460c      	mov	r4, r1
 80034f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f8:	4615      	mov	r5, r2
 80034fa:	2900      	cmp	r1, #0
 80034fc:	461e      	mov	r6, r3
 80034fe:	b096      	sub	sp, #88	@ 0x58
 8003500:	da0c      	bge.n	800351c <__swhatbuf_r+0x2c>
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	2100      	movs	r1, #0
 8003506:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800350a:	bf14      	ite	ne
 800350c:	2340      	movne	r3, #64	@ 0x40
 800350e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003512:	2000      	movs	r0, #0
 8003514:	6031      	str	r1, [r6, #0]
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	b016      	add	sp, #88	@ 0x58
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	466a      	mov	r2, sp
 800351e:	f000 f8af 	bl	8003680 <_fstat_r>
 8003522:	2800      	cmp	r0, #0
 8003524:	dbed      	blt.n	8003502 <__swhatbuf_r+0x12>
 8003526:	9901      	ldr	r1, [sp, #4]
 8003528:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800352c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003530:	4259      	negs	r1, r3
 8003532:	4159      	adcs	r1, r3
 8003534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003538:	e7eb      	b.n	8003512 <__swhatbuf_r+0x22>

0800353a <__smakebuf_r>:
 800353a:	898b      	ldrh	r3, [r1, #12]
 800353c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800353e:	079d      	lsls	r5, r3, #30
 8003540:	4606      	mov	r6, r0
 8003542:	460c      	mov	r4, r1
 8003544:	d507      	bpl.n	8003556 <__smakebuf_r+0x1c>
 8003546:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800354a:	6023      	str	r3, [r4, #0]
 800354c:	6123      	str	r3, [r4, #16]
 800354e:	2301      	movs	r3, #1
 8003550:	6163      	str	r3, [r4, #20]
 8003552:	b003      	add	sp, #12
 8003554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003556:	466a      	mov	r2, sp
 8003558:	ab01      	add	r3, sp, #4
 800355a:	f7ff ffc9 	bl	80034f0 <__swhatbuf_r>
 800355e:	9f00      	ldr	r7, [sp, #0]
 8003560:	4605      	mov	r5, r0
 8003562:	4639      	mov	r1, r7
 8003564:	4630      	mov	r0, r6
 8003566:	f7ff fdb7 	bl	80030d8 <_malloc_r>
 800356a:	b948      	cbnz	r0, 8003580 <__smakebuf_r+0x46>
 800356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003570:	059a      	lsls	r2, r3, #22
 8003572:	d4ee      	bmi.n	8003552 <__smakebuf_r+0x18>
 8003574:	f023 0303 	bic.w	r3, r3, #3
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	e7e2      	b.n	8003546 <__smakebuf_r+0xc>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800358a:	81a3      	strh	r3, [r4, #12]
 800358c:	9b01      	ldr	r3, [sp, #4]
 800358e:	6020      	str	r0, [r4, #0]
 8003590:	b15b      	cbz	r3, 80035aa <__smakebuf_r+0x70>
 8003592:	4630      	mov	r0, r6
 8003594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003598:	f000 f80c 	bl	80035b4 <_isatty_r>
 800359c:	b128      	cbz	r0, 80035aa <__smakebuf_r+0x70>
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	f023 0303 	bic.w	r3, r3, #3
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	81a3      	strh	r3, [r4, #12]
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	431d      	orrs	r5, r3
 80035ae:	81a5      	strh	r5, [r4, #12]
 80035b0:	e7cf      	b.n	8003552 <__smakebuf_r+0x18>
	...

080035b4 <_isatty_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	2300      	movs	r3, #0
 80035b8:	4d05      	ldr	r5, [pc, #20]	@ (80035d0 <_isatty_r+0x1c>)
 80035ba:	4604      	mov	r4, r0
 80035bc:	4608      	mov	r0, r1
 80035be:	602b      	str	r3, [r5, #0]
 80035c0:	f7fd f81e 	bl	8000600 <_isatty>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d102      	bne.n	80035ce <_isatty_r+0x1a>
 80035c8:	682b      	ldr	r3, [r5, #0]
 80035ca:	b103      	cbz	r3, 80035ce <_isatty_r+0x1a>
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	200011cc 	.word	0x200011cc

080035d4 <_lseek_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4604      	mov	r4, r0
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	2200      	movs	r2, #0
 80035de:	4d05      	ldr	r5, [pc, #20]	@ (80035f4 <_lseek_r+0x20>)
 80035e0:	602a      	str	r2, [r5, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f7fd f816 	bl	8000614 <_lseek>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d102      	bne.n	80035f2 <_lseek_r+0x1e>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	b103      	cbz	r3, 80035f2 <_lseek_r+0x1e>
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	200011cc 	.word	0x200011cc

080035f8 <_read_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4604      	mov	r4, r0
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	2200      	movs	r2, #0
 8003602:	4d05      	ldr	r5, [pc, #20]	@ (8003618 <_read_r+0x20>)
 8003604:	602a      	str	r2, [r5, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	f7fc ffa7 	bl	800055a <_read>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	d102      	bne.n	8003616 <_read_r+0x1e>
 8003610:	682b      	ldr	r3, [r5, #0]
 8003612:	b103      	cbz	r3, 8003616 <_read_r+0x1e>
 8003614:	6023      	str	r3, [r4, #0]
 8003616:	bd38      	pop	{r3, r4, r5, pc}
 8003618:	200011cc 	.word	0x200011cc

0800361c <_sbrk_r>:
 800361c:	b538      	push	{r3, r4, r5, lr}
 800361e:	2300      	movs	r3, #0
 8003620:	4d05      	ldr	r5, [pc, #20]	@ (8003638 <_sbrk_r+0x1c>)
 8003622:	4604      	mov	r4, r0
 8003624:	4608      	mov	r0, r1
 8003626:	602b      	str	r3, [r5, #0]
 8003628:	f7fd f800 	bl	800062c <_sbrk>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d102      	bne.n	8003636 <_sbrk_r+0x1a>
 8003630:	682b      	ldr	r3, [r5, #0]
 8003632:	b103      	cbz	r3, 8003636 <_sbrk_r+0x1a>
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	bd38      	pop	{r3, r4, r5, pc}
 8003638:	200011cc 	.word	0x200011cc

0800363c <_write_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	2200      	movs	r2, #0
 8003646:	4d05      	ldr	r5, [pc, #20]	@ (800365c <_write_r+0x20>)
 8003648:	602a      	str	r2, [r5, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	f7fc ffa2 	bl	8000594 <_write>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d102      	bne.n	800365a <_write_r+0x1e>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	b103      	cbz	r3, 800365a <_write_r+0x1e>
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	200011cc 	.word	0x200011cc

08003660 <_close_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	2300      	movs	r3, #0
 8003664:	4d05      	ldr	r5, [pc, #20]	@ (800367c <_close_r+0x1c>)
 8003666:	4604      	mov	r4, r0
 8003668:	4608      	mov	r0, r1
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	f7fc ffae 	bl	80005cc <_close>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d102      	bne.n	800367a <_close_r+0x1a>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	b103      	cbz	r3, 800367a <_close_r+0x1a>
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	200011cc 	.word	0x200011cc

08003680 <_fstat_r>:
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	2300      	movs	r3, #0
 8003684:	4d06      	ldr	r5, [pc, #24]	@ (80036a0 <_fstat_r+0x20>)
 8003686:	4604      	mov	r4, r0
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	602b      	str	r3, [r5, #0]
 800368e:	f7fc ffa8 	bl	80005e2 <_fstat>
 8003692:	1c43      	adds	r3, r0, #1
 8003694:	d102      	bne.n	800369c <_fstat_r+0x1c>
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	b103      	cbz	r3, 800369c <_fstat_r+0x1c>
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	bd38      	pop	{r3, r4, r5, pc}
 800369e:	bf00      	nop
 80036a0:	200011cc 	.word	0x200011cc

080036a4 <_free_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4605      	mov	r5, r0
 80036a8:	2900      	cmp	r1, #0
 80036aa:	d040      	beq.n	800372e <_free_r+0x8a>
 80036ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b0:	1f0c      	subs	r4, r1, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bfb8      	it	lt
 80036b6:	18e4      	addlt	r4, r4, r3
 80036b8:	f7ff fe36 	bl	8003328 <__malloc_lock>
 80036bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <_free_r+0x8c>)
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	b933      	cbnz	r3, 80036d0 <_free_r+0x2c>
 80036c2:	6063      	str	r3, [r4, #4]
 80036c4:	6014      	str	r4, [r2, #0]
 80036c6:	4628      	mov	r0, r5
 80036c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036cc:	f7ff be32 	b.w	8003334 <__malloc_unlock>
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	d908      	bls.n	80036e6 <_free_r+0x42>
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	1821      	adds	r1, r4, r0
 80036d8:	428b      	cmp	r3, r1
 80036da:	bf01      	itttt	eq
 80036dc:	6819      	ldreq	r1, [r3, #0]
 80036de:	685b      	ldreq	r3, [r3, #4]
 80036e0:	1809      	addeq	r1, r1, r0
 80036e2:	6021      	streq	r1, [r4, #0]
 80036e4:	e7ed      	b.n	80036c2 <_free_r+0x1e>
 80036e6:	461a      	mov	r2, r3
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	b10b      	cbz	r3, 80036f0 <_free_r+0x4c>
 80036ec:	42a3      	cmp	r3, r4
 80036ee:	d9fa      	bls.n	80036e6 <_free_r+0x42>
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	1850      	adds	r0, r2, r1
 80036f4:	42a0      	cmp	r0, r4
 80036f6:	d10b      	bne.n	8003710 <_free_r+0x6c>
 80036f8:	6820      	ldr	r0, [r4, #0]
 80036fa:	4401      	add	r1, r0
 80036fc:	1850      	adds	r0, r2, r1
 80036fe:	4283      	cmp	r3, r0
 8003700:	6011      	str	r1, [r2, #0]
 8003702:	d1e0      	bne.n	80036c6 <_free_r+0x22>
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4408      	add	r0, r1
 800370a:	6010      	str	r0, [r2, #0]
 800370c:	6053      	str	r3, [r2, #4]
 800370e:	e7da      	b.n	80036c6 <_free_r+0x22>
 8003710:	d902      	bls.n	8003718 <_free_r+0x74>
 8003712:	230c      	movs	r3, #12
 8003714:	602b      	str	r3, [r5, #0]
 8003716:	e7d6      	b.n	80036c6 <_free_r+0x22>
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	1821      	adds	r1, r4, r0
 800371c:	428b      	cmp	r3, r1
 800371e:	bf01      	itttt	eq
 8003720:	6819      	ldreq	r1, [r3, #0]
 8003722:	685b      	ldreq	r3, [r3, #4]
 8003724:	1809      	addeq	r1, r1, r0
 8003726:	6021      	streq	r1, [r4, #0]
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	6054      	str	r4, [r2, #4]
 800372c:	e7cb      	b.n	80036c6 <_free_r+0x22>
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	200011c8 	.word	0x200011c8

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
