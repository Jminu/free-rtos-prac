
01_TASKMAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  08003ab0  08003ab0  00004ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004384  08004384  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004384  08004384  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00005384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800438c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004418  2000006c  080043f8  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004484  080043f8  00006484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098c1  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023da  00000000  00000000  0000f956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00011d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087c  00000000  00000000  00012890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019677  00000000  00000000  0001310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd16  00000000  00000000  0002c783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b550  00000000  00000000  00038499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c39e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  000c3a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c6e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a98 	.word	0x08003a98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08003a98 	.word	0x08003a98

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	@ (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f923 	bl	80003ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	200f      	movs	r0, #15
 8000168:	f000 f808 	bl	800017c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f002 fb02 	bl	8002774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000184:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <HAL_InitTick+0x54>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b12      	ldr	r3, [pc, #72]	@ (80001d4 <HAL_InitTick+0x58>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	4619      	mov	r1, r3
 800018e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000192:	fbb3 f3f1 	udiv	r3, r3, r1
 8000196:	fbb2 f3f3 	udiv	r3, r2, r3
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f93b 	bl	8000416 <HAL_SYSTICK_Config>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e00e      	b.n	80001c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b0f      	cmp	r3, #15
 80001ae:	d80a      	bhi.n	80001c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001b0:	2200      	movs	r2, #0
 80001b2:	6879      	ldr	r1, [r7, #4]
 80001b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80001b8:	f000 f903 	bl	80003c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001bc:	4a06      	ldr	r2, [pc, #24]	@ (80001d8 <HAL_InitTick+0x5c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001c2:	2300      	movs	r3, #0
 80001c4:	e000      	b.n	80001c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	20000004 	.word	0x20000004
 80001d8:	20000000 	.word	0x20000000

080001dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001e0:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <HAL_IncTick+0x1c>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <HAL_IncTick+0x20>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4413      	add	r3, r2
 80001ec:	4a03      	ldr	r2, [pc, #12]	@ (80001fc <HAL_IncTick+0x20>)
 80001ee:	6013      	str	r3, [r2, #0]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	20000004 	.word	0x20000004
 80001fc:	20000088 	.word	0x20000088

08000200 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  return uwTick;
 8000204:	4b02      	ldr	r3, [pc, #8]	@ (8000210 <HAL_GetTick+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
}
 8000208:	4618      	mov	r0, r3
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000088 	.word	0x20000088

08000214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f003 0307 	and.w	r3, r3, #7
 8000222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__NVIC_SetPriorityGrouping+0x44>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022a:	68ba      	ldr	r2, [r7, #8]
 800022c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000230:	4013      	ands	r3, r2
 8000232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000246:	4a04      	ldr	r2, [pc, #16]	@ (8000258 <__NVIC_SetPriorityGrouping+0x44>)
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	60d3      	str	r3, [r2, #12]
}
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__NVIC_GetPriorityGrouping+0x18>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	f003 0307 	and.w	r3, r3, #7
}
 800026a:	4618      	mov	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	2b00      	cmp	r3, #0
 8000288:	db0b      	blt.n	80002a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 021f 	and.w	r2, r3, #31
 8000290:	4906      	ldr	r1, [pc, #24]	@ (80002ac <__NVIC_EnableIRQ+0x34>)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	095b      	lsrs	r3, r3, #5
 8000298:	2001      	movs	r0, #1
 800029a:	fa00 f202 	lsl.w	r2, r0, r2
 800029e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	db0a      	blt.n	80002da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	490c      	ldr	r1, [pc, #48]	@ (80002fc <__NVIC_SetPriority+0x4c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	0112      	lsls	r2, r2, #4
 80002d0:	b2d2      	uxtb	r2, r2
 80002d2:	440b      	add	r3, r1
 80002d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d8:	e00a      	b.n	80002f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4908      	ldr	r1, [pc, #32]	@ (8000300 <__NVIC_SetPriority+0x50>)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 030f 	and.w	r3, r3, #15
 80002e6:	3b04      	subs	r3, #4
 80002e8:	0112      	lsls	r2, r2, #4
 80002ea:	b2d2      	uxtb	r2, r2
 80002ec:	440b      	add	r3, r1
 80002ee:	761a      	strb	r2, [r3, #24]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000304:	b480      	push	{r7}
 8000306:	b089      	sub	sp, #36	@ 0x24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000318:	69fb      	ldr	r3, [r7, #28]
 800031a:	f1c3 0307 	rsb	r3, r3, #7
 800031e:	2b04      	cmp	r3, #4
 8000320:	bf28      	it	cs
 8000322:	2304      	movcs	r3, #4
 8000324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000326:	69fb      	ldr	r3, [r7, #28]
 8000328:	3304      	adds	r3, #4
 800032a:	2b06      	cmp	r3, #6
 800032c:	d902      	bls.n	8000334 <NVIC_EncodePriority+0x30>
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3b03      	subs	r3, #3
 8000332:	e000      	b.n	8000336 <NVIC_EncodePriority+0x32>
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800033c:	69bb      	ldr	r3, [r7, #24]
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	43da      	mvns	r2, r3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	401a      	ands	r2, r3
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800034c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43d9      	mvns	r1, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800035c:	4313      	orrs	r3, r2
         );
}
 800035e:	4618      	mov	r0, r3
 8000360:	3724      	adds	r7, #36	@ 0x24
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3b01      	subs	r3, #1
 8000374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000378:	d301      	bcc.n	800037e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800037a:	2301      	movs	r3, #1
 800037c:	e00f      	b.n	800039e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037e:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <SysTick_Config+0x40>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3b01      	subs	r3, #1
 8000384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000386:	210f      	movs	r1, #15
 8000388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800038c:	f7ff ff90 	bl	80002b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <SysTick_Config+0x40>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000396:	4b04      	ldr	r3, [pc, #16]	@ (80003a8 <SysTick_Config+0x40>)
 8000398:	2207      	movs	r2, #7
 800039a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800039c:	2300      	movs	r3, #0
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	e000e010 	.word	0xe000e010

080003ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff2d 	bl	8000214 <__NVIC_SetPriorityGrouping>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b086      	sub	sp, #24
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	4603      	mov	r3, r0
 80003ca:	60b9      	str	r1, [r7, #8]
 80003cc:	607a      	str	r2, [r7, #4]
 80003ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d4:	f7ff ff42 	bl	800025c <__NVIC_GetPriorityGrouping>
 80003d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	6978      	ldr	r0, [r7, #20]
 80003e0:	f7ff ff90 	bl	8000304 <NVIC_EncodePriority>
 80003e4:	4602      	mov	r2, r0
 80003e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ea:	4611      	mov	r1, r2
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff5f 	bl	80002b0 <__NVIC_SetPriority>
}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff35 	bl	8000278 <__NVIC_EnableIRQ>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ffa2 	bl	8000368 <SysTick_Config>
 8000424:	4603      	mov	r3, r0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000430:	b480      	push	{r7}
 8000432:	b08b      	sub	sp, #44	@ 0x2c
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000442:	e169      	b.n	8000718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000444:	2201      	movs	r2, #1
 8000446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	69fa      	ldr	r2, [r7, #28]
 8000454:	4013      	ands	r3, r2
 8000456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000458:	69ba      	ldr	r2, [r7, #24]
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	429a      	cmp	r2, r3
 800045e:	f040 8158 	bne.w	8000712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	4a9a      	ldr	r2, [pc, #616]	@ (80006d0 <HAL_GPIO_Init+0x2a0>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d05e      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 800046c:	4a98      	ldr	r2, [pc, #608]	@ (80006d0 <HAL_GPIO_Init+0x2a0>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d875      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 8000472:	4a98      	ldr	r2, [pc, #608]	@ (80006d4 <HAL_GPIO_Init+0x2a4>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d058      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 8000478:	4a96      	ldr	r2, [pc, #600]	@ (80006d4 <HAL_GPIO_Init+0x2a4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d86f      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 800047e:	4a96      	ldr	r2, [pc, #600]	@ (80006d8 <HAL_GPIO_Init+0x2a8>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d052      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 8000484:	4a94      	ldr	r2, [pc, #592]	@ (80006d8 <HAL_GPIO_Init+0x2a8>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d869      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 800048a:	4a94      	ldr	r2, [pc, #592]	@ (80006dc <HAL_GPIO_Init+0x2ac>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d04c      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 8000490:	4a92      	ldr	r2, [pc, #584]	@ (80006dc <HAL_GPIO_Init+0x2ac>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d863      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 8000496:	4a92      	ldr	r2, [pc, #584]	@ (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d046      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 800049c:	4a90      	ldr	r2, [pc, #576]	@ (80006e0 <HAL_GPIO_Init+0x2b0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d85d      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 80004a2:	2b12      	cmp	r3, #18
 80004a4:	d82a      	bhi.n	80004fc <HAL_GPIO_Init+0xcc>
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d859      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 80004aa:	a201      	add	r2, pc, #4	@ (adr r2, 80004b0 <HAL_GPIO_Init+0x80>)
 80004ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b0:	0800052b 	.word	0x0800052b
 80004b4:	08000505 	.word	0x08000505
 80004b8:	08000517 	.word	0x08000517
 80004bc:	08000559 	.word	0x08000559
 80004c0:	0800055f 	.word	0x0800055f
 80004c4:	0800055f 	.word	0x0800055f
 80004c8:	0800055f 	.word	0x0800055f
 80004cc:	0800055f 	.word	0x0800055f
 80004d0:	0800055f 	.word	0x0800055f
 80004d4:	0800055f 	.word	0x0800055f
 80004d8:	0800055f 	.word	0x0800055f
 80004dc:	0800055f 	.word	0x0800055f
 80004e0:	0800055f 	.word	0x0800055f
 80004e4:	0800055f 	.word	0x0800055f
 80004e8:	0800055f 	.word	0x0800055f
 80004ec:	0800055f 	.word	0x0800055f
 80004f0:	0800055f 	.word	0x0800055f
 80004f4:	0800050d 	.word	0x0800050d
 80004f8:	08000521 	.word	0x08000521
 80004fc:	4a79      	ldr	r2, [pc, #484]	@ (80006e4 <HAL_GPIO_Init+0x2b4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d013      	beq.n	800052a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000502:	e02c      	b.n	800055e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	623b      	str	r3, [r7, #32]
          break;
 800050a:	e029      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	3304      	adds	r3, #4
 8000512:	623b      	str	r3, [r7, #32]
          break;
 8000514:	e024      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	3308      	adds	r3, #8
 800051c:	623b      	str	r3, [r7, #32]
          break;
 800051e:	e01f      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	330c      	adds	r3, #12
 8000526:	623b      	str	r3, [r7, #32]
          break;
 8000528:	e01a      	b.n	8000560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d102      	bne.n	8000538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000532:	2304      	movs	r3, #4
 8000534:	623b      	str	r3, [r7, #32]
          break;
 8000536:	e013      	b.n	8000560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d105      	bne.n	800054c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	611a      	str	r2, [r3, #16]
          break;
 800054a:	e009      	b.n	8000560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800054c:	2308      	movs	r3, #8
 800054e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	69fa      	ldr	r2, [r7, #28]
 8000554:	615a      	str	r2, [r3, #20]
          break;
 8000556:	e003      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
          break;
 800055c:	e000      	b.n	8000560 <HAL_GPIO_Init+0x130>
          break;
 800055e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	2bff      	cmp	r3, #255	@ 0xff
 8000564:	d801      	bhi.n	800056a <HAL_GPIO_Init+0x13a>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	e001      	b.n	800056e <HAL_GPIO_Init+0x13e>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3304      	adds	r3, #4
 800056e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	2bff      	cmp	r3, #255	@ 0xff
 8000574:	d802      	bhi.n	800057c <HAL_GPIO_Init+0x14c>
 8000576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	e002      	b.n	8000582 <HAL_GPIO_Init+0x152>
 800057c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057e:	3b08      	subs	r3, #8
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	210f      	movs	r1, #15
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	6a39      	ldr	r1, [r7, #32]
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	431a      	orrs	r2, r3
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f000 80b1 	beq.w	8000712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005b0:	4b4d      	ldr	r3, [pc, #308]	@ (80006e8 <HAL_GPIO_Init+0x2b8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a4c      	ldr	r2, [pc, #304]	@ (80006e8 <HAL_GPIO_Init+0x2b8>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <HAL_GPIO_Init+0x2b8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005c8:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <HAL_GPIO_Init+0x2bc>)
 80005ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	3302      	adds	r3, #2
 80005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d8:	f003 0303 	and.w	r3, r3, #3
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	220f      	movs	r2, #15
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a40      	ldr	r2, [pc, #256]	@ (80006f0 <HAL_GPIO_Init+0x2c0>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d013      	beq.n	800061c <HAL_GPIO_Init+0x1ec>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a3f      	ldr	r2, [pc, #252]	@ (80006f4 <HAL_GPIO_Init+0x2c4>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d00d      	beq.n	8000618 <HAL_GPIO_Init+0x1e8>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a3e      	ldr	r2, [pc, #248]	@ (80006f8 <HAL_GPIO_Init+0x2c8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d007      	beq.n	8000614 <HAL_GPIO_Init+0x1e4>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a3d      	ldr	r2, [pc, #244]	@ (80006fc <HAL_GPIO_Init+0x2cc>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d101      	bne.n	8000610 <HAL_GPIO_Init+0x1e0>
 800060c:	2303      	movs	r3, #3
 800060e:	e006      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 8000610:	2304      	movs	r3, #4
 8000612:	e004      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 8000614:	2302      	movs	r3, #2
 8000616:	e002      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 8000618:	2301      	movs	r3, #1
 800061a:	e000      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 800061c:	2300      	movs	r3, #0
 800061e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000620:	f002 0203 	and.w	r2, r2, #3
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	4093      	lsls	r3, r2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4313      	orrs	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800062e:	492f      	ldr	r1, [pc, #188]	@ (80006ec <HAL_GPIO_Init+0x2bc>)
 8000630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	3302      	adds	r3, #2
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000644:	2b00      	cmp	r3, #0
 8000646:	d006      	beq.n	8000656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000648:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	492c      	ldr	r1, [pc, #176]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	4313      	orrs	r3, r2
 8000652:	600b      	str	r3, [r1, #0]
 8000654:	e006      	b.n	8000664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000656:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	43db      	mvns	r3, r3
 800065e:	4928      	ldr	r1, [pc, #160]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000660:	4013      	ands	r3, r2
 8000662:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	4922      	ldr	r1, [pc, #136]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	4313      	orrs	r3, r2
 800067a:	604b      	str	r3, [r1, #4]
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	43db      	mvns	r3, r3
 8000686:	491e      	ldr	r1, [pc, #120]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000688:	4013      	ands	r3, r2
 800068a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	4918      	ldr	r1, [pc, #96]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	608b      	str	r3, [r1, #8]
 80006a4:	e006      	b.n	80006b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	43db      	mvns	r3, r3
 80006ae:	4914      	ldr	r1, [pc, #80]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d021      	beq.n	8000704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	490e      	ldr	r1, [pc, #56]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	60cb      	str	r3, [r1, #12]
 80006cc:	e021      	b.n	8000712 <HAL_GPIO_Init+0x2e2>
 80006ce:	bf00      	nop
 80006d0:	10320000 	.word	0x10320000
 80006d4:	10310000 	.word	0x10310000
 80006d8:	10220000 	.word	0x10220000
 80006dc:	10210000 	.word	0x10210000
 80006e0:	10120000 	.word	0x10120000
 80006e4:	10110000 	.word	0x10110000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	40011000 	.word	0x40011000
 80006fc:	40011400 	.word	0x40011400
 8000700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000704:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <HAL_GPIO_Init+0x304>)
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	43db      	mvns	r3, r3
 800070c:	4909      	ldr	r1, [pc, #36]	@ (8000734 <HAL_GPIO_Init+0x304>)
 800070e:	4013      	ands	r3, r2
 8000710:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000714:	3301      	adds	r3, #1
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071e:	fa22 f303 	lsr.w	r3, r2, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	f47f ae8e 	bne.w	8000444 <HAL_GPIO_Init+0x14>
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	372c      	adds	r7, #44	@ 0x2c
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40010400 	.word	0x40010400

08000738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
 8000744:	4613      	mov	r3, r2
 8000746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000748:	787b      	ldrb	r3, [r7, #1]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d003      	beq.n	8000756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800074e:	887a      	ldrh	r2, [r7, #2]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000754:	e003      	b.n	800075e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	041a      	lsls	r2, r3, #16
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	611a      	str	r2, [r3, #16]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	4013      	ands	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	d006      	beq.n	800078c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800077e:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f806 	bl	8000798 <HAL_GPIO_EXTI_Callback>
  }
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40010400 	.word	0x40010400

08000798 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e272      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 8087 	beq.w	80008da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007cc:	4b92      	ldr	r3, [pc, #584]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f003 030c 	and.w	r3, r3, #12
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d00c      	beq.n	80007f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d8:	4b8f      	ldr	r3, [pc, #572]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f003 030c 	and.w	r3, r3, #12
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	d112      	bne.n	800080a <HAL_RCC_OscConfig+0x5e>
 80007e4:	4b8c      	ldr	r3, [pc, #560]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007f0:	d10b      	bne.n	800080a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007f2:	4b89      	ldr	r3, [pc, #548]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d06c      	beq.n	80008d8 <HAL_RCC_OscConfig+0x12c>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d168      	bne.n	80008d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e24c      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000812:	d106      	bne.n	8000822 <HAL_RCC_OscConfig+0x76>
 8000814:	4b80      	ldr	r3, [pc, #512]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a7f      	ldr	r2, [pc, #508]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800081a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e02e      	b.n	8000880 <HAL_RCC_OscConfig+0xd4>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10c      	bne.n	8000844 <HAL_RCC_OscConfig+0x98>
 800082a:	4b7b      	ldr	r3, [pc, #492]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a7a      	ldr	r2, [pc, #488]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	4b78      	ldr	r3, [pc, #480]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a77      	ldr	r2, [pc, #476]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800083c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e01d      	b.n	8000880 <HAL_RCC_OscConfig+0xd4>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800084c:	d10c      	bne.n	8000868 <HAL_RCC_OscConfig+0xbc>
 800084e:	4b72      	ldr	r3, [pc, #456]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a71      	ldr	r2, [pc, #452]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	4b6f      	ldr	r3, [pc, #444]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a6e      	ldr	r2, [pc, #440]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e00b      	b.n	8000880 <HAL_RCC_OscConfig+0xd4>
 8000868:	4b6b      	ldr	r3, [pc, #428]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a6a      	ldr	r2, [pc, #424]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800086e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b68      	ldr	r3, [pc, #416]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a67      	ldr	r2, [pc, #412]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800087a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800087e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d013      	beq.n	80008b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000888:	f7ff fcba 	bl	8000200 <HAL_GetTick>
 800088c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088e:	e008      	b.n	80008a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000890:	f7ff fcb6 	bl	8000200 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	2b64      	cmp	r3, #100	@ 0x64
 800089c:	d901      	bls.n	80008a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800089e:	2303      	movs	r3, #3
 80008a0:	e200      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f0      	beq.n	8000890 <HAL_RCC_OscConfig+0xe4>
 80008ae:	e014      	b.n	80008da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008b0:	f7ff fca6 	bl	8000200 <HAL_GetTick>
 80008b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b6:	e008      	b.n	80008ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008b8:	f7ff fca2 	bl	8000200 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b64      	cmp	r3, #100	@ 0x64
 80008c4:	d901      	bls.n	80008ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008c6:	2303      	movs	r3, #3
 80008c8:	e1ec      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ca:	4b53      	ldr	r3, [pc, #332]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1f0      	bne.n	80008b8 <HAL_RCC_OscConfig+0x10c>
 80008d6:	e000      	b.n	80008da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d063      	beq.n	80009ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 030c 	and.w	r3, r3, #12
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00b      	beq.n	800090a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008f2:	4b49      	ldr	r3, [pc, #292]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 030c 	and.w	r3, r3, #12
 80008fa:	2b08      	cmp	r3, #8
 80008fc:	d11c      	bne.n	8000938 <HAL_RCC_OscConfig+0x18c>
 80008fe:	4b46      	ldr	r3, [pc, #280]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d116      	bne.n	8000938 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090a:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	2b00      	cmp	r3, #0
 8000914:	d005      	beq.n	8000922 <HAL_RCC_OscConfig+0x176>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d001      	beq.n	8000922 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e1c0      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000922:	4b3d      	ldr	r3, [pc, #244]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4939      	ldr	r1, [pc, #228]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000932:	4313      	orrs	r3, r2
 8000934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000936:	e03a      	b.n	80009ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d020      	beq.n	8000982 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000940:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <HAL_RCC_OscConfig+0x270>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000946:	f7ff fc5b 	bl	8000200 <HAL_GetTick>
 800094a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094c:	e008      	b.n	8000960 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800094e:	f7ff fc57 	bl	8000200 <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2b02      	cmp	r3, #2
 800095a:	d901      	bls.n	8000960 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800095c:	2303      	movs	r3, #3
 800095e:	e1a1      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0f0      	beq.n	800094e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800096c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4927      	ldr	r1, [pc, #156]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 800097c:	4313      	orrs	r3, r2
 800097e:	600b      	str	r3, [r1, #0]
 8000980:	e015      	b.n	80009ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <HAL_RCC_OscConfig+0x270>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000988:	f7ff fc3a 	bl	8000200 <HAL_GetTick>
 800098c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000990:	f7ff fc36 	bl	8000200 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e180      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1f0      	bne.n	8000990 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d03a      	beq.n	8000a30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d019      	beq.n	80009f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <HAL_RCC_OscConfig+0x274>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c8:	f7ff fc1a 	bl	8000200 <HAL_GetTick>
 80009cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ce:	e008      	b.n	80009e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009d0:	f7ff fc16 	bl	8000200 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d901      	bls.n	80009e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009de:	2303      	movs	r3, #3
 80009e0:	e160      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <HAL_RCC_OscConfig+0x26c>)
 80009e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f0      	beq.n	80009d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fad8 	bl	8000fa4 <RCC_Delay>
 80009f4:	e01c      	b.n	8000a30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_RCC_OscConfig+0x274>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fc:	f7ff fc00 	bl	8000200 <HAL_GetTick>
 8000a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a02:	e00f      	b.n	8000a24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a04:	f7ff fbfc 	bl	8000200 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d908      	bls.n	8000a24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a12:	2303      	movs	r3, #3
 8000a14:	e146      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	42420000 	.word	0x42420000
 8000a20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a24:	4b92      	ldr	r3, [pc, #584]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1e9      	bne.n	8000a04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f000 80a6 	beq.w	8000b8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a42:	4b8b      	ldr	r3, [pc, #556]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10d      	bne.n	8000a6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b88      	ldr	r3, [pc, #544]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a87      	ldr	r2, [pc, #540]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b85      	ldr	r3, [pc, #532]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a66:	2301      	movs	r3, #1
 8000a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a6a:	4b82      	ldr	r3, [pc, #520]	@ (8000c74 <HAL_RCC_OscConfig+0x4c8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d118      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a76:	4b7f      	ldr	r3, [pc, #508]	@ (8000c74 <HAL_RCC_OscConfig+0x4c8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8000c74 <HAL_RCC_OscConfig+0x4c8>)
 8000a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a82:	f7ff fbbd 	bl	8000200 <HAL_GetTick>
 8000a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a88:	e008      	b.n	8000a9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a8a:	f7ff fbb9 	bl	8000200 <HAL_GetTick>
 8000a8e:	4602      	mov	r2, r0
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	2b64      	cmp	r3, #100	@ 0x64
 8000a96:	d901      	bls.n	8000a9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e103      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9c:	4b75      	ldr	r3, [pc, #468]	@ (8000c74 <HAL_RCC_OscConfig+0x4c8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f0      	beq.n	8000a8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d106      	bne.n	8000abe <HAL_RCC_OscConfig+0x312>
 8000ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6213      	str	r3, [r2, #32]
 8000abc:	e02d      	b.n	8000b1a <HAL_RCC_OscConfig+0x36e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10c      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x334>
 8000ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	4a69      	ldr	r2, [pc, #420]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000acc:	f023 0301 	bic.w	r3, r3, #1
 8000ad0:	6213      	str	r3, [r2, #32]
 8000ad2:	4b67      	ldr	r3, [pc, #412]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000ad4:	6a1b      	ldr	r3, [r3, #32]
 8000ad6:	4a66      	ldr	r2, [pc, #408]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000ad8:	f023 0304 	bic.w	r3, r3, #4
 8000adc:	6213      	str	r3, [r2, #32]
 8000ade:	e01c      	b.n	8000b1a <HAL_RCC_OscConfig+0x36e>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d10c      	bne.n	8000b02 <HAL_RCC_OscConfig+0x356>
 8000ae8:	4b61      	ldr	r3, [pc, #388]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	4a60      	ldr	r2, [pc, #384]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6213      	str	r3, [r2, #32]
 8000af4:	4b5e      	ldr	r3, [pc, #376]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	4a5d      	ldr	r2, [pc, #372]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6213      	str	r3, [r2, #32]
 8000b00:	e00b      	b.n	8000b1a <HAL_RCC_OscConfig+0x36e>
 8000b02:	4b5b      	ldr	r3, [pc, #364]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	4a5a      	ldr	r2, [pc, #360]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b08:	f023 0301 	bic.w	r3, r3, #1
 8000b0c:	6213      	str	r3, [r2, #32]
 8000b0e:	4b58      	ldr	r3, [pc, #352]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b10:	6a1b      	ldr	r3, [r3, #32]
 8000b12:	4a57      	ldr	r2, [pc, #348]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b14:	f023 0304 	bic.w	r3, r3, #4
 8000b18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d015      	beq.n	8000b4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b22:	f7ff fb6d 	bl	8000200 <HAL_GetTick>
 8000b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b28:	e00a      	b.n	8000b40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b2a:	f7ff fb69 	bl	8000200 <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e0b1      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b40:	4b4b      	ldr	r3, [pc, #300]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0ee      	beq.n	8000b2a <HAL_RCC_OscConfig+0x37e>
 8000b4c:	e014      	b.n	8000b78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fb57 	bl	8000200 <HAL_GetTick>
 8000b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b54:	e00a      	b.n	8000b6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b56:	f7ff fb53 	bl	8000200 <HAL_GetTick>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d901      	bls.n	8000b6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e09b      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b6c:	4b40      	ldr	r3, [pc, #256]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1ee      	bne.n	8000b56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b78:	7dfb      	ldrb	r3, [r7, #23]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d105      	bne.n	8000b8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a3b      	ldr	r2, [pc, #236]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8087 	beq.w	8000ca2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b94:	4b36      	ldr	r3, [pc, #216]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 030c 	and.w	r3, r3, #12
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d061      	beq.n	8000c64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d146      	bne.n	8000c36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ba8:	4b33      	ldr	r3, [pc, #204]	@ (8000c78 <HAL_RCC_OscConfig+0x4cc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bae:	f7ff fb27 	bl	8000200 <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb4:	e008      	b.n	8000bc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bb6:	f7ff fb23 	bl	8000200 <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e06d      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc8:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f0      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bdc:	d108      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	4921      	ldr	r1, [pc, #132]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000bec:	4313      	orrs	r3, r2
 8000bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a19      	ldr	r1, [r3, #32]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c00:	430b      	orrs	r3, r1
 8000c02:	491b      	ldr	r1, [pc, #108]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000c04:	4313      	orrs	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <HAL_RCC_OscConfig+0x4cc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0e:	f7ff faf7 	bl	8000200 <HAL_GetTick>
 8000c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c14:	e008      	b.n	8000c28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c16:	f7ff faf3 	bl	8000200 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e03d      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f0      	beq.n	8000c16 <HAL_RCC_OscConfig+0x46a>
 8000c34:	e035      	b.n	8000ca2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_RCC_OscConfig+0x4cc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fae0 	bl	8000200 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c44:	f7ff fadc 	bl	8000200 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e026      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f0      	bne.n	8000c44 <HAL_RCC_OscConfig+0x498>
 8000c62:	e01e      	b.n	8000ca2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d107      	bne.n	8000c7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e019      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40007000 	.word	0x40007000
 8000c78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_RCC_OscConfig+0x500>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d106      	bne.n	8000c9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d101      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e0d0      	b.n	8000e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d910      	bls.n	8000cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd2:	4b67      	ldr	r3, [pc, #412]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 0207 	bic.w	r2, r3, #7
 8000cda:	4965      	ldr	r1, [pc, #404]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce2:	4b63      	ldr	r3, [pc, #396]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d001      	beq.n	8000cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e0b8      	b.n	8000e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d020      	beq.n	8000d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d0c:	4b59      	ldr	r3, [pc, #356]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4a58      	ldr	r2, [pc, #352]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d24:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a52      	ldr	r2, [pc, #328]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d30:	4b50      	ldr	r3, [pc, #320]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	494d      	ldr	r1, [pc, #308]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d040      	beq.n	8000dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d107      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	4b47      	ldr	r3, [pc, #284]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d115      	bne.n	8000d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e07f      	b.n	8000e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d107      	bne.n	8000d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6e:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d109      	bne.n	8000d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e073      	b.n	8000e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e06b      	b.n	8000e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d8e:	4b39      	ldr	r3, [pc, #228]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f023 0203 	bic.w	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4936      	ldr	r1, [pc, #216]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000da0:	f7ff fa2e 	bl	8000200 <HAL_GetTick>
 8000da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000da6:	e00a      	b.n	8000dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da8:	f7ff fa2a 	bl	8000200 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e053      	b.n	8000e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 020c 	and.w	r2, r3, #12
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d1eb      	bne.n	8000da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dd0:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d210      	bcs.n	8000e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dde:	4b24      	ldr	r3, [pc, #144]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 0207 	bic.w	r2, r3, #7
 8000de6:	4922      	ldr	r1, [pc, #136]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d001      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e032      	b.n	8000e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d008      	beq.n	8000e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4916      	ldr	r1, [pc, #88]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d009      	beq.n	8000e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	490e      	ldr	r1, [pc, #56]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e3e:	f000 f821 	bl	8000e84 <HAL_RCC_GetSysClockFreq>
 8000e42:	4602      	mov	r2, r0
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c4>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	490a      	ldr	r1, [pc, #40]	@ (8000e78 <HAL_RCC_ClockConfig+0x1c8>)
 8000e50:	5ccb      	ldrb	r3, [r1, r3]
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	4a09      	ldr	r2, [pc, #36]	@ (8000e7c <HAL_RCC_ClockConfig+0x1cc>)
 8000e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <HAL_RCC_ClockConfig+0x1d0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f98c 	bl	800017c <HAL_InitTick>

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	08004338 	.word	0x08004338
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000000 	.word	0x20000000

08000e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e84:	b490      	push	{r4, r7}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e8a:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e8c:	1d3c      	adds	r4, r7, #4
 8000e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e94:	f240 2301 	movw	r3, #513	@ 0x201
 8000e98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d002      	beq.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d003      	beq.n	8000eca <HAL_RCC_GetSysClockFreq+0x46>
 8000ec2:	e02b      	b.n	8000f1c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ec6:	623b      	str	r3, [r7, #32]
      break;
 8000ec8:	e02b      	b.n	8000f22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	0c9b      	lsrs	r3, r3, #18
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3328      	adds	r3, #40	@ 0x28
 8000ed4:	443b      	add	r3, r7
 8000ed6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000eda:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d012      	beq.n	8000f0c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	0c5b      	lsrs	r3, r3, #17
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	3328      	adds	r3, #40	@ 0x28
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ef8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000efe:	fb03 f202 	mul.w	r2, r3, r2
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0a:	e004      	b.n	8000f16 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	623b      	str	r3, [r7, #32]
      break;
 8000f1a:	e002      	b.n	8000f22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f1e:	623b      	str	r3, [r7, #32]
      break;
 8000f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f22:	6a3b      	ldr	r3, [r7, #32]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3728      	adds	r7, #40	@ 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc90      	pop	{r4, r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	08003ab0 	.word	0x08003ab0
 8000f34:	40021000 	.word	0x40021000
 8000f38:	007a1200 	.word	0x007a1200
 8000f3c:	003d0900 	.word	0x003d0900

08000f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f44:	4b02      	ldr	r3, [pc, #8]	@ (8000f50 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	2000000c 	.word	0x2000000c

08000f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f58:	f7ff fff2 	bl	8000f40 <HAL_RCC_GetHCLKFreq>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	4903      	ldr	r1, [pc, #12]	@ (8000f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f6a:	5ccb      	ldrb	r3, [r1, r3]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	08004348 	.word	0x08004348

08000f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_RCC_GetHCLKFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	0adb      	lsrs	r3, r3, #11
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	4903      	ldr	r1, [pc, #12]	@ (8000fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	08004348 	.word	0x08004348

08000fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fac:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <RCC_Delay+0x34>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <RCC_Delay+0x38>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0a5b      	lsrs	r3, r3, #9
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fc0:	bf00      	nop
  }
  while (Delay --);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	60fa      	str	r2, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f9      	bne.n	8000fc0 <RCC_Delay+0x1c>
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	2000000c 	.word	0x2000000c
 8000fdc:	10624dd3 	.word	0x10624dd3

08000fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e03f      	b.n	8001072 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 fbec 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2224      	movs	r2, #36	@ 0x24
 8001010:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f905 	bl	8001234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2220      	movs	r2, #32
 8001064:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2220      	movs	r2, #32
 800106c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b08a      	sub	sp, #40	@ 0x28
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4613      	mov	r3, r2
 8001088:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b20      	cmp	r3, #32
 8001098:	d17c      	bne.n	8001194 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_UART_Transmit+0x2c>
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e075      	b.n	8001196 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_UART_Transmit+0x3e>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e06e      	b.n	8001196 <HAL_UART_Transmit+0x11c>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2221      	movs	r2, #33	@ 0x21
 80010ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80010ce:	f7ff f897 	bl	8000200 <HAL_GetTick>
 80010d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010e8:	d108      	bne.n	80010fc <HAL_UART_Transmit+0x82>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	e003      	b.n	8001104 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 800110c:	e02a      	b.n	8001164 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2200      	movs	r2, #0
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 f840 	bl	800119e <UART_WaitOnFlagUntilTimeout>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e036      	b.n	8001196 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10b      	bne.n	8001146 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800113c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	3302      	adds	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	e007      	b.n	8001156 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3301      	adds	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001168:	b29b      	uxth	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1cf      	bne.n	800110e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	2140      	movs	r1, #64	@ 0x40
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f810 	bl	800119e <UART_WaitOnFlagUntilTimeout>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e006      	b.n	8001196 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2220      	movs	r2, #32
 800118c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	e000      	b.n	8001196 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001194:	2302      	movs	r3, #2
  }
}
 8001196:	4618      	mov	r0, r3
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4613      	mov	r3, r2
 80011ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011ae:	e02c      	b.n	800120a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b6:	d028      	beq.n	800120a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <UART_WaitOnFlagUntilTimeout+0x30>
 80011be:	f7ff f81f 	bl	8000200 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d21d      	bcs.n	800120a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80011dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2220      	movs	r2, #32
 80011f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2220      	movs	r2, #32
 80011fa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e00f      	b.n	800122a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4013      	ands	r3, r2
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	429a      	cmp	r2, r3
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	429a      	cmp	r2, r3
 8001226:	d0c3      	beq.n	80011b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	4313      	orrs	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800126e:	f023 030c 	bic.w	r3, r3, #12
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	430b      	orrs	r3, r1
 800127a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2c      	ldr	r2, [pc, #176]	@ (8001348 <UART_SetConfig+0x114>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d103      	bne.n	80012a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800129c:	f7ff fe6e 	bl	8000f7c <HAL_RCC_GetPCLK2Freq>
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	e002      	b.n	80012aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80012a4:	f7ff fe56 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 80012a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	009a      	lsls	r2, r3, #2
 80012b4:	441a      	add	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c0:	4a22      	ldr	r2, [pc, #136]	@ (800134c <UART_SetConfig+0x118>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	0119      	lsls	r1, r3, #4
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009a      	lsls	r2, r3, #2
 80012d4:	441a      	add	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <UART_SetConfig+0x118>)
 80012e2:	fba3 0302 	umull	r0, r3, r3, r2
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2064      	movs	r0, #100	@ 0x64
 80012ea:	fb00 f303 	mul.w	r3, r0, r3
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	3332      	adds	r3, #50	@ 0x32
 80012f4:	4a15      	ldr	r2, [pc, #84]	@ (800134c <UART_SetConfig+0x118>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001300:	4419      	add	r1, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	009a      	lsls	r2, r3, #2
 800130c:	441a      	add	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fbb2 f2f3 	udiv	r2, r2, r3
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <UART_SetConfig+0x118>)
 800131a:	fba3 0302 	umull	r0, r3, r3, r2
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2064      	movs	r0, #100	@ 0x64
 8001322:	fb00 f303 	mul.w	r3, r0, r3
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	3332      	adds	r3, #50	@ 0x32
 800132c:	4a07      	ldr	r2, [pc, #28]	@ (800134c <UART_SetConfig+0x118>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	f003 020f 	and.w	r2, r3, #15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	440a      	add	r2, r1
 800133e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40013800 	.word	0x40013800
 800134c:	51eb851f 	.word	0x51eb851f

08001350 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001354:	f000 fa2e 	bl	80017b4 <vTaskStartScheduler>
  
  return osOK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}

0800135e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f103 0208 	add.w	r2, r3, #8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001376:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f103 0208 	add.w	r2, r3, #8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f103 0208 	add.w	r2, r3, #8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6892      	ldr	r2, [r2, #8]
 8001410:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6852      	ldr	r2, [r2, #4]
 800141a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d103      	bne.n	800142e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af04      	add	r7, sp, #16
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fe15 	bl	8002090 <pvPortMalloc>
 8001466:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00e      	beq.n	800148c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800146e:	2054      	movs	r0, #84	@ 0x54
 8001470:	f000 fe0e 	bl	8002090 <pvPortMalloc>
 8001474:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	631a      	str	r2, [r3, #48]	@ 0x30
 8001482:	e005      	b.n	8001490 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f000 feb5 	bl	80021f4 <vPortFree>
 800148a:	e001      	b.n	8001490 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d013      	beq.n	80014be <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	2300      	movs	r3, #0
 800149a:	9303      	str	r3, [sp, #12]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f80f 	bl	80014d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014b2:	69f8      	ldr	r0, [r7, #28]
 80014b4:	f000 f888 	bl	80015c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	e002      	b.n	80014c4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80014c4:	69bb      	ldr	r3, [r7, #24]
	}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80014de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014e8:	3b01      	subs	r3, #1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f023 0307 	bic.w	r3, r3, #7
 80014f6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d004      	beq.n	800150c <prvInitialiseNewTask+0x3c>
 8001502:	f240 315d 	movw	r1, #861	@ 0x35d
 8001506:	482f      	ldr	r0, [pc, #188]	@ (80015c4 <prvInitialiseNewTask+0xf4>)
 8001508:	f001 f916 	bl	8002738 <vAssertCalled>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e012      	b.n	8001538 <prvInitialiseNewTask+0x68>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	7819      	ldrb	r1, [r3, #0]
 800151a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	3334      	adds	r3, #52	@ 0x34
 8001522:	460a      	mov	r2, r1
 8001524:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <prvInitialiseNewTask+0x70>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	d9e9      	bls.n	8001512 <prvInitialiseNewTask+0x42>
 800153e:	e000      	b.n	8001542 <prvInitialiseNewTask+0x72>
		{
			break;
 8001540:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	2b13      	cmp	r3, #19
 800154e:	d901      	bls.n	8001554 <prvInitialiseNewTask+0x84>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001550:	2313      	movs	r3, #19
 8001552:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001556:	6a3a      	ldr	r2, [r7, #32]
 8001558:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	6a3a      	ldr	r2, [r7, #32]
 800155e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001562:	2200      	movs	r2, #0
 8001564:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	3304      	adds	r3, #4
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff16 	bl	800139c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001572:	3318      	adds	r3, #24
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff11 	bl	800139c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800157a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800157e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	f1c3 0214 	rsb	r2, r3, #20
 8001586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800158e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	68f9      	ldr	r1, [r7, #12]
 80015a2:	6938      	ldr	r0, [r7, #16]
 80015a4:	f000 fbd8 	bl	8001d58 <pxPortInitialiseStack>
 80015a8:	4602      	mov	r2, r0
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <prvInitialiseNewTask+0xea>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08003ac0 	.word	0x08003ac0

080015c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80015d0:	f000 fca8 	bl	8001f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <prvAddNewTaskToReadyList+0xb8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <prvAddNewTaskToReadyList+0xb8>)
 80015dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80015de:	4b29      	ldr	r3, [pc, #164]	@ (8001684 <prvAddNewTaskToReadyList+0xbc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80015e6:	4a27      	ldr	r2, [pc, #156]	@ (8001684 <prvAddNewTaskToReadyList+0xbc>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <prvAddNewTaskToReadyList+0xb8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d110      	bne.n	8001616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80015f4:	f000 faf0 	bl	8001bd8 <prvInitialiseTaskLists>
 80015f8:	e00d      	b.n	8001616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80015fa:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <prvAddNewTaskToReadyList+0xc0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <prvAddNewTaskToReadyList+0xbc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	d802      	bhi.n	8001616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001610:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <prvAddNewTaskToReadyList+0xbc>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <prvAddNewTaskToReadyList+0xc4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <prvAddNewTaskToReadyList+0xc4>)
 800161e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	2201      	movs	r2, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <prvAddNewTaskToReadyList+0xc8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4313      	orrs	r3, r2
 800162e:	4a18      	ldr	r2, [pc, #96]	@ (8001690 <prvAddNewTaskToReadyList+0xc8>)
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <prvAddNewTaskToReadyList+0xcc>)
 8001640:	441a      	add	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	4619      	mov	r1, r3
 8001648:	4610      	mov	r0, r2
 800164a:	f7ff feb3 	bl	80013b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800164e:	f000 fc93 	bl	8001f78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <prvAddNewTaskToReadyList+0xc0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00e      	beq.n	8001678 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <prvAddNewTaskToReadyList+0xbc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <prvAddNewTaskToReadyList+0xd0>)
 800166a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f3bf 8f4f 	dsb	sy
 8001674:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000290 	.word	0x20000290
 8001684:	2000008c 	.word	0x2000008c
 8001688:	2000029c 	.word	0x2000029c
 800168c:	200002ac 	.word	0x200002ac
 8001690:	20000298 	.word	0x20000298
 8001694:	20000090 	.word	0x20000090
 8001698:	e000ed04 	.word	0xe000ed04

0800169c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80016a4:	f000 fc3e 	bl	8001f24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <vTaskDelete+0x18>
 80016ae:	4b36      	ldr	r3, [pc, #216]	@ (8001788 <vTaskDelete+0xec>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	e000      	b.n	80016b6 <vTaskDelete+0x1a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3304      	adds	r3, #4
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fe9c 	bl	80013fa <uxListRemove>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d115      	bne.n	80016f4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016cc:	492f      	ldr	r1, [pc, #188]	@ (800178c <vTaskDelete+0xf0>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10a      	bne.n	80016f4 <vTaskDelete+0x58>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e2:	2201      	movs	r2, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <vTaskDelete+0xf4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4013      	ands	r3, r2
 80016f0:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <vTaskDelete+0xf4>)
 80016f2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3318      	adds	r3, #24
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fe7a 	bl	80013fa <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <vTaskDelete+0xf8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <vTaskDelete+0xf8>)
 800170e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <vTaskDelete+0xec>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	429a      	cmp	r2, r3
 8001718:	d10b      	bne.n	8001732 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3304      	adds	r3, #4
 800171e:	4619      	mov	r1, r3
 8001720:	481d      	ldr	r0, [pc, #116]	@ (8001798 <vTaskDelete+0xfc>)
 8001722:	f7ff fe47 	bl	80013b4 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <vTaskDelete+0x100>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <vTaskDelete+0x100>)
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e009      	b.n	8001746 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001732:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <vTaskDelete+0x104>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <vTaskDelete+0x104>)
 800173a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 fab9 	bl	8001cb4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001742:	f000 fac7 	bl	8001cd4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001746:	f000 fc17 	bl	8001f78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <vTaskDelete+0x108>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <vTaskDelete+0xe2>
		{
			if( pxTCB == pxCurrentTCB )
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <vTaskDelete+0xec>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d110      	bne.n	800177e <vTaskDelete+0xe2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <vTaskDelete+0x10c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <vTaskDelete+0xd2>
 8001764:	f240 419f 	movw	r1, #1183	@ 0x49f
 8001768:	4810      	ldr	r0, [pc, #64]	@ (80017ac <vTaskDelete+0x110>)
 800176a:	f000 ffe5 	bl	8002738 <vAssertCalled>
				portYIELD_WITHIN_API();
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <vTaskDelete+0x114>)
 8001770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	f3bf 8f4f 	dsb	sy
 800177a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000008c 	.word	0x2000008c
 800178c:	20000090 	.word	0x20000090
 8001790:	20000298 	.word	0x20000298
 8001794:	200002ac 	.word	0x200002ac
 8001798:	20000264 	.word	0x20000264
 800179c:	20000278 	.word	0x20000278
 80017a0:	20000290 	.word	0x20000290
 80017a4:	2000029c 	.word	0x2000029c
 80017a8:	200002b8 	.word	0x200002b8
 80017ac:	08003ac0 	.word	0x08003ac0
 80017b0:	e000ed04 	.word	0xe000ed04

080017b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <vTaskStartScheduler+0x6c>)
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	2300      	movs	r3, #0
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	4917      	ldr	r1, [pc, #92]	@ (8001824 <vTaskStartScheduler+0x70>)
 80017c8:	4817      	ldr	r0, [pc, #92]	@ (8001828 <vTaskStartScheduler+0x74>)
 80017ca:	f7ff fe3f 	bl	800144c <xTaskCreate>
 80017ce:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d116      	bne.n	8001804 <vTaskStartScheduler+0x50>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017da:	f383 8811 	msr	BASEPRI, r3
 80017de:	f3bf 8f6f 	isb	sy
 80017e2:	f3bf 8f4f 	dsb	sy
 80017e6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017e8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <vTaskStartScheduler+0x78>)
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <vTaskStartScheduler+0x7c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <vTaskStartScheduler+0x80>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80017fe:	f000 fb23 	bl	8001e48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001802:	e008      	b.n	8001816 <vTaskStartScheduler+0x62>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800180a:	d104      	bne.n	8001816 <vTaskStartScheduler+0x62>
 800180c:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 8001810:	4809      	ldr	r0, [pc, #36]	@ (8001838 <vTaskStartScheduler+0x84>)
 8001812:	f000 ff91 	bl	8002738 <vAssertCalled>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002b4 	.word	0x200002b4
 8001824:	08003ac8 	.word	0x08003ac8
 8001828:	08001ba9 	.word	0x08001ba9
 800182c:	200002b0 	.word	0x200002b0
 8001830:	2000029c 	.word	0x2000029c
 8001834:	20000294 	.word	0x20000294
 8001838:	08003ac0 	.word	0x08003ac0

0800183c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <vTaskSuspendAll+0x18>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a03      	ldr	r2, [pc, #12]	@ (8001854 <vTaskSuspendAll+0x18>)
 8001848:	6013      	str	r3, [r2, #0]
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200002b8 	.word	0x200002b8

08001858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001866:	4b3e      	ldr	r3, [pc, #248]	@ (8001960 <xTaskResumeAll+0x108>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d104      	bne.n	8001878 <xTaskResumeAll+0x20>
 800186e:	f640 013a 	movw	r1, #2106	@ 0x83a
 8001872:	483c      	ldr	r0, [pc, #240]	@ (8001964 <xTaskResumeAll+0x10c>)
 8001874:	f000 ff60 	bl	8002738 <vAssertCalled>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001878:	f000 fb54 	bl	8001f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800187c:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <xTaskResumeAll+0x108>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3b01      	subs	r3, #1
 8001882:	4a37      	ldr	r2, [pc, #220]	@ (8001960 <xTaskResumeAll+0x108>)
 8001884:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001886:	4b36      	ldr	r3, [pc, #216]	@ (8001960 <xTaskResumeAll+0x108>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d161      	bne.n	8001952 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800188e:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <xTaskResumeAll+0x110>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d05d      	beq.n	8001952 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001896:	e02e      	b.n	80018f6 <xTaskResumeAll+0x9e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001898:	4b34      	ldr	r3, [pc, #208]	@ (800196c <xTaskResumeAll+0x114>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3318      	adds	r3, #24
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fda8 	bl	80013fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3304      	adds	r3, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fda3 	bl	80013fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	2201      	movs	r2, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <xTaskResumeAll+0x118>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001970 <xTaskResumeAll+0x118>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4a28      	ldr	r2, [pc, #160]	@ (8001974 <xTaskResumeAll+0x11c>)
 80018d4:	441a      	add	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f7ff fd69 	bl	80013b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018e6:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <xTaskResumeAll+0x120>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d302      	bcc.n	80018f6 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 80018f0:	4b22      	ldr	r3, [pc, #136]	@ (800197c <xTaskResumeAll+0x124>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <xTaskResumeAll+0x114>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1cc      	bne.n	8001898 <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001904:	f000 f9e6 	bl	8001cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <xTaskResumeAll+0x128>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d010      	beq.n	8001936 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001914:	f000 f838 	bl	8001988 <xTaskIncrementTick>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <xTaskResumeAll+0x124>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f1      	bne.n	8001914 <xTaskResumeAll+0xbc>

						uxPendedTicks = 0;
 8001930:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <xTaskResumeAll+0x128>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <xTaskResumeAll+0x124>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800193e:	2301      	movs	r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <xTaskResumeAll+0x12c>)
 8001944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001952:	f000 fb11 	bl	8001f78 <vPortExitCritical>

	return xAlreadyYielded;
 8001956:	68bb      	ldr	r3, [r7, #8]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200002b8 	.word	0x200002b8
 8001964:	08003ac0 	.word	0x08003ac0
 8001968:	20000290 	.word	0x20000290
 800196c:	20000250 	.word	0x20000250
 8001970:	20000298 	.word	0x20000298
 8001974:	20000090 	.word	0x20000090
 8001978:	2000008c 	.word	0x2000008c
 800197c:	200002a4 	.word	0x200002a4
 8001980:	200002a0 	.word	0x200002a0
 8001984:	e000ed04 	.word	0xe000ed04

08001988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001992:	4b4e      	ldr	r3, [pc, #312]	@ (8001acc <xTaskIncrementTick+0x144>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8087 	bne.w	8001aaa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800199c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <xTaskIncrementTick+0x148>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80019a4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad0 <xTaskIncrementTick+0x148>)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d11a      	bne.n	80019e6 <xTaskIncrementTick+0x5e>
		{
			taskSWITCH_DELAYED_LISTS();
 80019b0:	4b48      	ldr	r3, [pc, #288]	@ (8001ad4 <xTaskIncrementTick+0x14c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <xTaskIncrementTick+0x3c>
 80019ba:	f640 212d 	movw	r1, #2605	@ 0xa2d
 80019be:	4846      	ldr	r0, [pc, #280]	@ (8001ad8 <xTaskIncrementTick+0x150>)
 80019c0:	f000 feba 	bl	8002738 <vAssertCalled>
 80019c4:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <xTaskIncrementTick+0x14c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b44      	ldr	r3, [pc, #272]	@ (8001adc <xTaskIncrementTick+0x154>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a41      	ldr	r2, [pc, #260]	@ (8001ad4 <xTaskIncrementTick+0x14c>)
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4a42      	ldr	r2, [pc, #264]	@ (8001adc <xTaskIncrementTick+0x154>)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <xTaskIncrementTick+0x158>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	4a40      	ldr	r2, [pc, #256]	@ (8001ae0 <xTaskIncrementTick+0x158>)
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	f000 f977 	bl	8001cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80019e6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae4 <xTaskIncrementTick+0x15c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d34d      	bcc.n	8001a8c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019f0:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <xTaskIncrementTick+0x14c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <xTaskIncrementTick+0x76>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <xTaskIncrementTick+0x78>
 80019fe:	2300      	movs	r3, #0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a04:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <xTaskIncrementTick+0x15c>)
 8001a06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a0a:	601a      	str	r2, [r3, #0]
					break;
 8001a0c:	e03e      	b.n	8001a8c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <xTaskIncrementTick+0x14c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d203      	bcs.n	8001a2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae4 <xTaskIncrementTick+0x15c>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6013      	str	r3, [r2, #0]
						break;
 8001a2c:	e02e      	b.n	8001a8c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3304      	adds	r3, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fce1 	bl	80013fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	3318      	adds	r3, #24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fcd8 	bl	80013fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	2201      	movs	r2, #1
 8001a50:	409a      	lsls	r2, r3
 8001a52:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <xTaskIncrementTick+0x160>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <xTaskIncrementTick+0x160>)
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4a20      	ldr	r2, [pc, #128]	@ (8001aec <xTaskIncrementTick+0x164>)
 8001a6a:	441a      	add	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f7ff fc9e 	bl	80013b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <xTaskIncrementTick+0x168>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3b4      	bcc.n	80019f0 <xTaskIncrementTick+0x68>
						{
							xSwitchRequired = pdTRUE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a8a:	e7b1      	b.n	80019f0 <xTaskIncrementTick+0x68>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <xTaskIncrementTick+0x168>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a92:	4916      	ldr	r1, [pc, #88]	@ (8001aec <xTaskIncrementTick+0x164>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d907      	bls.n	8001ab4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e004      	b.n	8001ab4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <xTaskIncrementTick+0x16c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4a10      	ldr	r2, [pc, #64]	@ (8001af4 <xTaskIncrementTick+0x16c>)
 8001ab2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <xTaskIncrementTick+0x170>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001ac0:	697b      	ldr	r3, [r7, #20]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002b8 	.word	0x200002b8
 8001ad0:	20000294 	.word	0x20000294
 8001ad4:	20000248 	.word	0x20000248
 8001ad8:	08003ac0 	.word	0x08003ac0
 8001adc:	2000024c 	.word	0x2000024c
 8001ae0:	200002a8 	.word	0x200002a8
 8001ae4:	200002b0 	.word	0x200002b0
 8001ae8:	20000298 	.word	0x20000298
 8001aec:	20000090 	.word	0x20000090
 8001af0:	2000008c 	.word	0x2000008c
 8001af4:	200002a0 	.word	0x200002a0
 8001af8:	200002a4 	.word	0x200002a4

08001afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <vTaskSwitchContext+0x94>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <vTaskSwitchContext+0x98>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b10:	e039      	b.n	8001b86 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <vTaskSwitchContext+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b18:	4b1f      	ldr	r3, [pc, #124]	@ (8001b98 <vTaskSwitchContext+0x9c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f1c3 031f 	rsb	r3, r3, #31
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	491b      	ldr	r1, [pc, #108]	@ (8001b9c <vTaskSwitchContext+0xa0>)
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d104      	bne.n	8001b4c <vTaskSwitchContext+0x50>
 8001b42:	f640 314a 	movw	r1, #2890	@ 0xb4a
 8001b46:	4816      	ldr	r0, [pc, #88]	@ (8001ba0 <vTaskSwitchContext+0xa4>)
 8001b48:	f000 fdf6 	bl	8002738 <vAssertCalled>
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4a11      	ldr	r2, [pc, #68]	@ (8001b9c <vTaskSwitchContext+0xa0>)
 8001b58:	4413      	add	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d104      	bne.n	8001b7c <vTaskSwitchContext+0x80>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	4a08      	ldr	r2, [pc, #32]	@ (8001ba4 <vTaskSwitchContext+0xa8>)
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200002b8 	.word	0x200002b8
 8001b94:	200002a4 	.word	0x200002a4
 8001b98:	20000298 	.word	0x20000298
 8001b9c:	20000090 	.word	0x20000090
 8001ba0:	08003ac0 	.word	0x08003ac0
 8001ba4:	2000008c 	.word	0x2000008c

08001ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001bb0:	f000 f852 	bl	8001c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <prvIdleTask+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d9f9      	bls.n	8001bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <prvIdleTask+0x2c>)
 8001bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001bcc:	e7f0      	b.n	8001bb0 <prvIdleTask+0x8>
 8001bce:	bf00      	nop
 8001bd0:	20000090 	.word	0x20000090
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	e00c      	b.n	8001bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <prvInitialiseTaskLists+0x60>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fbb3 	bl	800135e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b13      	cmp	r3, #19
 8001c02:	d9ef      	bls.n	8001be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <prvInitialiseTaskLists+0x64>)
 8001c06:	f7ff fbaa 	bl	800135e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001c0a:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <prvInitialiseTaskLists+0x68>)
 8001c0c:	f7ff fba7 	bl	800135e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <prvInitialiseTaskLists+0x6c>)
 8001c12:	f7ff fba4 	bl	800135e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001c16:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <prvInitialiseTaskLists+0x70>)
 8001c18:	f7ff fba1 	bl	800135e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001c1c:	480b      	ldr	r0, [pc, #44]	@ (8001c4c <prvInitialiseTaskLists+0x74>)
 8001c1e:	f7ff fb9e 	bl	800135e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <prvInitialiseTaskLists+0x78>)
 8001c24:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <prvInitialiseTaskLists+0x64>)
 8001c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <prvInitialiseTaskLists+0x7c>)
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <prvInitialiseTaskLists+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000090 	.word	0x20000090
 8001c3c:	20000220 	.word	0x20000220
 8001c40:	20000234 	.word	0x20000234
 8001c44:	20000250 	.word	0x20000250
 8001c48:	20000264 	.word	0x20000264
 8001c4c:	2000027c 	.word	0x2000027c
 8001c50:	20000248 	.word	0x20000248
 8001c54:	2000024c 	.word	0x2000024c

08001c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c5e:	e019      	b.n	8001c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001c60:	f000 f960 	bl	8001f24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001c64:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <prvCheckTasksWaitingTermination+0x50>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fbc2 	bl	80013fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <prvCheckTasksWaitingTermination+0x54>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cac <prvCheckTasksWaitingTermination+0x54>)
 8001c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <prvCheckTasksWaitingTermination+0x58>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <prvCheckTasksWaitingTermination+0x58>)
 8001c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001c8a:	f000 f975 	bl	8001f78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f810 	bl	8001cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <prvCheckTasksWaitingTermination+0x58>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e1      	bne.n	8001c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000264 	.word	0x20000264
 8001cac:	20000290 	.word	0x20000290
 8001cb0:	20000278 	.word	0x20000278

08001cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fa97 	bl	80021f4 <vPortFree>
			vPortFree( pxTCB );
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fa94 	bl	80021f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <prvResetNextTaskUnblockTime+0x40>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <prvResetNextTaskUnblockTime+0x14>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <prvResetNextTaskUnblockTime+0x16>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <prvResetNextTaskUnblockTime+0x44>)
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cf4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001cf6:	e008      	b.n	8001d0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <prvResetNextTaskUnblockTime+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <prvResetNextTaskUnblockTime+0x44>)
 8001d08:	6013      	str	r3, [r2, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000248 	.word	0x20000248
 8001d18:	200002b0 	.word	0x200002b0

08001d1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <xTaskGetSchedulerState+0x34>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	e008      	b.n	8001d42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <xTaskGetSchedulerState+0x38>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	e001      	b.n	8001d42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001d42:	687b      	ldr	r3, [r7, #4]
	}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	2000029c 	.word	0x2000029c
 8001d54:	200002b8 	.word	0x200002b8

08001d58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3b04      	subs	r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3b04      	subs	r3, #4
 8001d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f023 0201 	bic.w	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3b04      	subs	r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d88:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <pxPortInitialiseStack+0x54>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b14      	subs	r3, #20
 8001d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3b20      	subs	r3, #32
 8001d9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	08001db1 	.word	0x08001db1

08001db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <prvTaskExitError+0x44>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dc2:	d003      	beq.n	8001dcc <prvTaskExitError+0x1c>
 8001dc4:	21ca      	movs	r1, #202	@ 0xca
 8001dc6:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <prvTaskExitError+0x48>)
 8001dc8:	f000 fcb6 	bl	8002738 <vAssertCalled>
	__asm volatile
 8001dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dd0:	f383 8811 	msr	BASEPRI, r3
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	607b      	str	r3, [r7, #4]
}
 8001dde:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001de0:	bf00      	nop
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0fc      	beq.n	8001de2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	08003ad0 	.word	0x08003ad0
 8001dfc:	00000000 	.word	0x00000000

08001e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <pxCurrentTCBConst2>)
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	6808      	ldr	r0, [r1, #0]
 8001e06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e0a:	f380 8809 	msr	PSP, r0
 8001e0e:	f3bf 8f6f 	isb	sy
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f380 8811 	msr	BASEPRI, r0
 8001e1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001e1e:	4770      	bx	lr

08001e20 <pxCurrentTCBConst2>:
 8001e20:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop

08001e28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001e28:	4806      	ldr	r0, [pc, #24]	@ (8001e44 <prvPortStartFirstTask+0x1c>)
 8001e2a:	6800      	ldr	r0, [r0, #0]
 8001e2c:	6800      	ldr	r0, [r0, #0]
 8001e2e:	f380 8808 	msr	MSP, r0
 8001e32:	b662      	cpsie	i
 8001e34:	b661      	cpsie	f
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	f3bf 8f6f 	isb	sy
 8001e3e:	df00      	svc	0
 8001e40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001e42:	bf00      	nop
 8001e44:	e000ed08 	.word	0xe000ed08

08001e48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <xPortStartScheduler+0xc4>)
 8001e50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	22ff      	movs	r2, #255	@ 0xff
 8001e5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <xPortStartScheduler+0xc8>)
 8001e74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e76:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e7c:	e009      	b.n	8001e92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a23      	ldr	r2, [pc, #140]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001e86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e9a:	2b80      	cmp	r3, #128	@ 0x80
 8001e9c:	d0ef      	beq.n	8001e7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d004      	beq.n	8001eb4 <xPortStartScheduler+0x6c>
 8001eaa:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001eae:	481a      	ldr	r0, [pc, #104]	@ (8001f18 <xPortStartScheduler+0xd0>)
 8001eb0:	f000 fc42 	bl	8002738 <vAssertCalled>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001eb4:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001ebc:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ec6:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <xPortStartScheduler+0xcc>)
 8001ec8:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <xPortStartScheduler+0xd4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <xPortStartScheduler+0xd4>)
 8001ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <xPortStartScheduler+0xd4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <xPortStartScheduler+0xd4>)
 8001ee4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001ee8:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001eea:	f000 f8af 	bl	800204c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <xPortStartScheduler+0xd8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001ef4:	f7ff ff98 	bl	8001e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001ef8:	f7ff fe00 	bl	8001afc <vTaskSwitchContext>
	prvTaskExitError();
 8001efc:	f7ff ff58 	bl	8001db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e400 	.word	0xe000e400
 8001f10:	200002bc 	.word	0x200002bc
 8001f14:	200002c0 	.word	0x200002c0
 8001f18:	08003ad0 	.word	0x08003ad0
 8001f1c:	e000ed20 	.word	0xe000ed20
 8001f20:	20000008 	.word	0x20000008

08001f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
	__asm volatile
 8001f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f2e:	f383 8811 	msr	BASEPRI, r3
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	607b      	str	r3, [r7, #4]
}
 8001f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <vPortEnterCritical+0x48>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a09      	ldr	r2, [pc, #36]	@ (8001f6c <vPortEnterCritical+0x48>)
 8001f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001f48:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <vPortEnterCritical+0x48>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d109      	bne.n	8001f64 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <vPortEnterCritical+0x4c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <vPortEnterCritical+0x40>
 8001f5a:	f240 1175 	movw	r1, #373	@ 0x175
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <vPortEnterCritical+0x50>)
 8001f60:	f000 fbea 	bl	8002738 <vAssertCalled>
	}
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	e000ed04 	.word	0xe000ed04
 8001f74:	08003ad0 	.word	0x08003ad0

08001f78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <vPortExitCritical+0x40>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d104      	bne.n	8001f90 <vPortExitCritical+0x18>
 8001f86:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8001f8a:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <vPortExitCritical+0x44>)
 8001f8c:	f000 fbd4 	bl	8002738 <vAssertCalled>
	uxCriticalNesting--;
 8001f90:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <vPortExitCritical+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <vPortExitCritical+0x40>)
 8001f98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001f9a:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <vPortExitCritical+0x40>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <vPortExitCritical+0x36>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001fac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	08003ad0 	.word	0x08003ad0

08001fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001fc0:	f3ef 8009 	mrs	r0, PSP
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <pxCurrentTCBConst>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fd0:	6010      	str	r0, [r2, #0]
 8001fd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001fd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001fda:	f380 8811 	msr	BASEPRI, r0
 8001fde:	f7ff fd8d 	bl	8001afc <vTaskSwitchContext>
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f380 8811 	msr	BASEPRI, r0
 8001fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	6808      	ldr	r0, [r1, #0]
 8001ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ff6:	f380 8809 	msr	PSP, r0
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	4770      	bx	lr

08002000 <pxCurrentTCBConst>:
 8002000:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop

08002008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
	__asm volatile
 800200e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	607b      	str	r3, [r7, #4]
}
 8002020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002022:	f7ff fcb1 	bl	8001988 <xTaskIncrementTick>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <xPortSysTickHandler+0x40>)
 800202e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f383 8811 	msr	BASEPRI, r3
}
 800203e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	e000ed04 	.word	0xe000ed04

0800204c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <vPortSetupTimerInterrupt+0x30>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <vPortSetupTimerInterrupt+0x34>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <vPortSetupTimerInterrupt+0x38>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a09      	ldr	r2, [pc, #36]	@ (8002088 <vPortSetupTimerInterrupt+0x3c>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	4a08      	ldr	r2, [pc, #32]	@ (800208c <vPortSetupTimerInterrupt+0x40>)
 800206a:	3b01      	subs	r3, #1
 800206c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800206e:	4b03      	ldr	r3, [pc, #12]	@ (800207c <vPortSetupTimerInterrupt+0x30>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	e000e010 	.word	0xe000e010
 8002080:	e000e018 	.word	0xe000e018
 8002084:	2000000c 	.word	0x2000000c
 8002088:	10624dd3 	.word	0x10624dd3
 800208c:	e000e014 	.word	0xe000e014

08002090 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800209c:	f7ff fbce 	bl	800183c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80020a0:	4b4e      	ldr	r3, [pc, #312]	@ (80021dc <pvPortMalloc+0x14c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80020a8:	f000 f8f4 	bl	8002294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80020ac:	4b4c      	ldr	r3, [pc, #304]	@ (80021e0 <pvPortMalloc+0x150>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d17f      	bne.n	80021b8 <pvPortMalloc+0x128>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80020be:	2208      	movs	r2, #8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00d      	beq.n	80020ec <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f023 0307 	bic.w	r3, r3, #7
 80020d6:	3308      	adds	r3, #8
 80020d8:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <pvPortMalloc+0x5c>
 80020e4:	2195      	movs	r1, #149	@ 0x95
 80020e6:	483f      	ldr	r0, [pc, #252]	@ (80021e4 <pvPortMalloc+0x154>)
 80020e8:	f000 fb26 	bl	8002738 <vAssertCalled>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d062      	beq.n	80021b8 <pvPortMalloc+0x128>
 80020f2:	4b3d      	ldr	r3, [pc, #244]	@ (80021e8 <pvPortMalloc+0x158>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d85d      	bhi.n	80021b8 <pvPortMalloc+0x128>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020fc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <pvPortMalloc+0x15c>)
 80020fe:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002100:	4b3a      	ldr	r3, [pc, #232]	@ (80021ec <pvPortMalloc+0x15c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002106:	e004      	b.n	8002112 <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	d903      	bls.n	8002124 <pvPortMalloc+0x94>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f1      	bne.n	8002108 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002124:	4b2d      	ldr	r3, [pc, #180]	@ (80021dc <pvPortMalloc+0x14c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	429a      	cmp	r2, r3
 800212c:	d044      	beq.n	80021b8 <pvPortMalloc+0x128>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2208      	movs	r2, #8
 8002134:	4413      	add	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	1ad2      	subs	r2, r2, r3
 8002148:	2308      	movs	r3, #8
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	429a      	cmp	r2, r3
 800214e:	d918      	bls.n	8002182 <pvPortMalloc+0xf2>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <pvPortMalloc+0xda>
 8002162:	21c2      	movs	r1, #194	@ 0xc2
 8002164:	481f      	ldr	r0, [pc, #124]	@ (80021e4 <pvPortMalloc+0x154>)
 8002166:	f000 fae7 	bl	8002738 <vAssertCalled>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1ad2      	subs	r2, r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	f000 f8eb 	bl	8002358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <pvPortMalloc+0x158>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	4a16      	ldr	r2, [pc, #88]	@ (80021e8 <pvPortMalloc+0x158>)
 800218e:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002190:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <pvPortMalloc+0x158>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <pvPortMalloc+0x160>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d203      	bcs.n	80021a4 <pvPortMalloc+0x114>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <pvPortMalloc+0x158>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a13      	ldr	r2, [pc, #76]	@ (80021f0 <pvPortMalloc+0x160>)
 80021a2:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <pvPortMalloc+0x150>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80021b8:	f7ff fb4e 	bl	8001858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <pvPortMalloc+0x140>
 80021c6:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80021ca:	4806      	ldr	r0, [pc, #24]	@ (80021e4 <pvPortMalloc+0x154>)
 80021cc:	f000 fab4 	bl	8002738 <vAssertCalled>
	return pvReturn;
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200042cc 	.word	0x200042cc
 80021e0:	200042d8 	.word	0x200042d8
 80021e4:	08003ad8 	.word	0x08003ad8
 80021e8:	200042d0 	.word	0x200042d0
 80021ec:	200042c4 	.word	0x200042c4
 80021f0:	200042d4 	.word	0x200042d4

080021f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03c      	beq.n	8002280 <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002206:	2308      	movs	r3, #8
 8002208:	425b      	negs	r3, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <vPortFree+0x94>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <vPortFree+0x38>
 8002222:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8002226:	4819      	ldr	r0, [pc, #100]	@ (800228c <vPortFree+0x98>)
 8002228:	f000 fa86 	bl	8002738 <vAssertCalled>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <vPortFree+0x4a>
 8002234:	f240 1117 	movw	r1, #279	@ 0x117
 8002238:	4814      	ldr	r0, [pc, #80]	@ (800228c <vPortFree+0x98>)
 800223a:	f000 fa7d 	bl	8002738 <vAssertCalled>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <vPortFree+0x94>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d115      	bne.n	8002280 <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <vPortFree+0x94>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002264:	f7ff faea 	bl	800183c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <vPortFree+0x9c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4413      	add	r3, r2
 8002272:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <vPortFree+0x9c>)
 8002274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002276:	68b8      	ldr	r0, [r7, #8]
 8002278:	f000 f86e 	bl	8002358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800227c:	f7ff faec 	bl	8001858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200042d8 	.word	0x200042d8
 800228c:	08003ad8 	.word	0x08003ad8
 8002290:	200042d0 	.word	0x200042d0

08002294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800229a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800229e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80022a0:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <prvHeapInit+0xac>)
 80022a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3307      	adds	r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0307 	bic.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <prvHeapInit+0xac>)
 80022c4:	4413      	add	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <prvHeapInit+0xb0>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <prvHeapInit+0xb0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80022e0:	2208      	movs	r2, #8
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0307 	bic.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a15      	ldr	r2, [pc, #84]	@ (8002348 <prvHeapInit+0xb4>)
 80022f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <prvHeapInit+0xb4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <prvHeapInit+0xb4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	1ad2      	subs	r2, r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <prvHeapInit+0xb4>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <prvHeapInit+0xb8>)
 8002322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <prvHeapInit+0xbc>)
 800232a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <prvHeapInit+0xc0>)
 800232e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	200002c4 	.word	0x200002c4
 8002344:	200042c4 	.word	0x200042c4
 8002348:	200042cc 	.word	0x200042cc
 800234c:	200042d4 	.word	0x200042d4
 8002350:	200042d0 	.word	0x200042d0
 8002354:	200042d8 	.word	0x200042d8

08002358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002360:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <prvInsertBlockIntoFreeList+0xa8>)
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <prvInsertBlockIntoFreeList+0x14>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d8f7      	bhi.n	8002366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d108      	bne.n	800239a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	441a      	add	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	441a      	add	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d118      	bne.n	80023e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <prvInsertBlockIntoFreeList+0xac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d00d      	beq.n	80023d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	441a      	add	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e008      	b.n	80023e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <prvInsertBlockIntoFreeList+0xac>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e003      	b.n	80023e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d002      	beq.n	80023f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	200042c4 	.word	0x200042c4
 8002404:	200042cc 	.word	0x200042cc

08002408 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b0a      	cmp	r3, #10
 8002414:	d106      	bne.n	8002424 <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 8002416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800241a:	2201      	movs	r2, #1
 800241c:	4907      	ldr	r1, [pc, #28]	@ (800243c <__io_putchar+0x34>)
 800241e:	4808      	ldr	r0, [pc, #32]	@ (8002440 <__io_putchar+0x38>)
 8002420:	f7fe fe2b 	bl	800107a <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002424:	1d39      	adds	r1, r7, #4
 8002426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800242a:	2201      	movs	r2, #1
 800242c:	4804      	ldr	r0, [pc, #16]	@ (8002440 <__io_putchar+0x38>)
 800242e:	f7fe fe24 	bl	800107a <HAL_UART_Transmit>
 return ch;
 8002432:	687b      	ldr	r3, [r7, #4]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	08003ae4 	.word	0x08003ae4
 8002440:	200042dc 	.word	0x200042dc

08002444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002448:	f7fd fe82 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800244c:	f000 f81a 	bl	8002484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002450:	f000 f884 	bl	800255c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002454:	f000 f858 	bl	8002508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* display a freeRTOS Intro */
  freertos_IntroTitle();
 8002458:	f000 f8f8 	bl	800264c <freertos_IntroTitle>

  // 즉시 printf 가 송신될수 있도록 stdout buffer size를 0으로 만들어준다.
  //setvbuf(stdout, NULL, _IONBF, 0);
  printf("[TASK]main\n");
 800245c:	4807      	ldr	r0, [pc, #28]	@ (800247c <main+0x38>)
 800245e:	f000 fd57 	bl	8002f10 <puts>
  fflush(stdout);
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <main+0x3c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fc13 	bl	8002c94 <fflush>
  /* definition and creation of defaultTask */
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  USER_THREADS();
 800246e:	f000 fac3 	bl	80029f8 <USER_THREADS>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002472:	f7fe ff6d 	bl	8001350 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002476:	bf00      	nop
 8002478:	e7fd      	b.n	8002476 <main+0x32>
 800247a:	bf00      	nop
 800247c:	08003ae8 	.word	0x08003ae8
 8002480:	2000001c 	.word	0x2000001c

08002484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b090      	sub	sp, #64	@ 0x40
 8002488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	2228      	movs	r2, #40	@ 0x28
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fd44 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024aa:	2301      	movs	r3, #1
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024ae:	2310      	movs	r3, #16
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b2:	2302      	movs	r3, #2
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80024b6:	2300      	movs	r3, #0
 80024b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024ba:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80024be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f971 	bl	80007ac <HAL_RCC_OscConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80024d0:	f000 f94a 	bl	8002768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d4:	230f      	movs	r3, #15
 80024d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d8:	2302      	movs	r3, #2
 80024da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2102      	movs	r1, #2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fbde 	bl	8000cb0 <HAL_RCC_ClockConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80024fa:	f000 f935 	bl	8002768 <Error_Handler>
  }
}
 80024fe:	bf00      	nop
 8002500:	3740      	adds	r7, #64	@ 0x40
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <MX_USART2_UART_Init+0x50>)
 8002510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 8002514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	@ (8002554 <MX_USART2_UART_Init+0x4c>)
 8002540:	f7fe fd4e 	bl	8000fe0 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800254a:	f000 f90d 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200042dc 	.word	0x200042dc
 8002558:	40004400 	.word	0x40004400

0800255c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002570:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <MX_GPIO_Init+0xcc>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a2c      	ldr	r2, [pc, #176]	@ (8002628 <MX_GPIO_Init+0xcc>)
 8002576:	f043 0310 	orr.w	r3, r3, #16
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <MX_GPIO_Init+0xcc>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002588:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <MX_GPIO_Init+0xcc>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4a26      	ldr	r2, [pc, #152]	@ (8002628 <MX_GPIO_Init+0xcc>)
 800258e:	f043 0320 	orr.w	r3, r3, #32
 8002592:	6193      	str	r3, [r2, #24]
 8002594:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <MX_GPIO_Init+0xcc>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <MX_GPIO_Init+0xcc>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <MX_GPIO_Init+0xcc>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <MX_GPIO_Init+0xcc>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <MX_GPIO_Init+0xcc>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002628 <MX_GPIO_Init+0xcc>)
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	6193      	str	r3, [r2, #24]
 80025c4:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <MX_GPIO_Init+0xcc>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2120      	movs	r1, #32
 80025d4:	4815      	ldr	r0, [pc, #84]	@ (800262c <MX_GPIO_Init+0xd0>)
 80025d6:	f7fe f8af 	bl	8000738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <MX_GPIO_Init+0xd4>)
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4619      	mov	r1, r3
 80025ee:	4811      	ldr	r0, [pc, #68]	@ (8002634 <MX_GPIO_Init+0xd8>)
 80025f0:	f7fd ff1e 	bl	8000430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025f4:	2320      	movs	r3, #32
 80025f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2302      	movs	r3, #2
 8002602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	4619      	mov	r1, r3
 800260a:	4808      	ldr	r0, [pc, #32]	@ (800262c <MX_GPIO_Init+0xd0>)
 800260c:	f7fd ff10 	bl	8000430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2105      	movs	r1, #5
 8002614:	2028      	movs	r0, #40	@ 0x28
 8002616:	f7fd fed4 	bl	80003c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800261a:	2028      	movs	r0, #40	@ 0x28
 800261c:	f7fd feed 	bl	80003fa <HAL_NVIC_EnableIRQ>

}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40010800 	.word	0x40010800
 8002630:	10110000 	.word	0x10110000
 8002634:	40011000 	.word	0x40011000

08002638 <OSVersion>:

/* USER CODE BEGIN 4 */
// version of this freertos
char* OSVersion(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 800263c:	4b02      	ldr	r3, [pc, #8]	@ (8002648 <OSVersion+0x10>)
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	08003af4 	.word	0x08003af4

0800264c <freertos_IntroTitle>:

//
// 'freertos_IntroTitle'
//
void freertos_IntroTitle(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8002650:	4823      	ldr	r0, [pc, #140]	@ (80026e0 <freertos_IntroTitle+0x94>)
 8002652:	f000 fc5d 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8002656:	4823      	ldr	r0, [pc, #140]	@ (80026e4 <freertos_IntroTitle+0x98>)
 8002658:	f000 fc5a 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 800265c:	4822      	ldr	r0, [pc, #136]	@ (80026e8 <freertos_IntroTitle+0x9c>)
 800265e:	f000 fc57 	bl	8002f10 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8002662:	4822      	ldr	r0, [pc, #136]	@ (80026ec <freertos_IntroTitle+0xa0>)
 8002664:	f000 fc54 	bl	8002f10 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8002668:	4821      	ldr	r0, [pc, #132]	@ (80026f0 <freertos_IntroTitle+0xa4>)
 800266a:	f000 fc51 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 800266e:	4821      	ldr	r0, [pc, #132]	@ (80026f4 <freertos_IntroTitle+0xa8>)
 8002670:	f000 fc4e 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8002674:	4820      	ldr	r0, [pc, #128]	@ (80026f8 <freertos_IntroTitle+0xac>)
 8002676:	f000 fc4b 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 800267a:	4820      	ldr	r0, [pc, #128]	@ (80026fc <freertos_IntroTitle+0xb0>)
 800267c:	f000 fc48 	bl	8002f10 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8002680:	481f      	ldr	r0, [pc, #124]	@ (8002700 <freertos_IntroTitle+0xb4>)
 8002682:	f000 fc45 	bl	8002f10 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8002686:	481f      	ldr	r0, [pc, #124]	@ (8002704 <freertos_IntroTitle+0xb8>)
 8002688:	f000 fc42 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 800268c:	481e      	ldr	r0, [pc, #120]	@ (8002708 <freertos_IntroTitle+0xbc>)
 800268e:	f000 fc3f 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8002692:	481e      	ldr	r0, [pc, #120]	@ (800270c <freertos_IntroTitle+0xc0>)
 8002694:	f000 fc3c 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8002698:	481d      	ldr	r0, [pc, #116]	@ (8002710 <freertos_IntroTitle+0xc4>)
 800269a:	f000 fc39 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 800269e:	481d      	ldr	r0, [pc, #116]	@ (8002714 <freertos_IntroTitle+0xc8>)
 80026a0:	f000 fc36 	bl	8002f10 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 80026a4:	481c      	ldr	r0, [pc, #112]	@ (8002718 <freertos_IntroTitle+0xcc>)
 80026a6:	f000 fc33 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 80026aa:	481c      	ldr	r0, [pc, #112]	@ (800271c <freertos_IntroTitle+0xd0>)
 80026ac:	f000 fc30 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 80026b0:	481b      	ldr	r0, [pc, #108]	@ (8002720 <freertos_IntroTitle+0xd4>)
 80026b2:	f000 fc2d 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80026b6:	481b      	ldr	r0, [pc, #108]	@ (8002724 <freertos_IntroTitle+0xd8>)
 80026b8:	f000 fc2a 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80026bc:	481a      	ldr	r0, [pc, #104]	@ (8002728 <freertos_IntroTitle+0xdc>)
 80026be:	f000 fc27 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80026c2:	f7ff ffb9 	bl	8002638 <OSVersion>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4619      	mov	r1, r3
 80026ca:	4818      	ldr	r0, [pc, #96]	@ (800272c <freertos_IntroTitle+0xe0>)
 80026cc:	f000 fbb8 	bl	8002e40 <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80026d0:	4817      	ldr	r0, [pc, #92]	@ (8002730 <freertos_IntroTitle+0xe4>)
 80026d2:	f000 fc1d 	bl	8002f10 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 80026d6:	4817      	ldr	r0, [pc, #92]	@ (8002734 <freertos_IntroTitle+0xe8>)
 80026d8:	f000 fc1a 	bl	8002f10 <puts>
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	08003afc 	.word	0x08003afc
 80026e4:	08003b3c 	.word	0x08003b3c
 80026e8:	08003b90 	.word	0x08003b90
 80026ec:	08003be4 	.word	0x08003be4
 80026f0:	08003c38 	.word	0x08003c38
 80026f4:	08003c8c 	.word	0x08003c8c
 80026f8:	08003ce0 	.word	0x08003ce0
 80026fc:	08003d34 	.word	0x08003d34
 8002700:	08003d88 	.word	0x08003d88
 8002704:	08003ddc 	.word	0x08003ddc
 8002708:	08003e30 	.word	0x08003e30
 800270c:	08003e84 	.word	0x08003e84
 8002710:	08003ed8 	.word	0x08003ed8
 8002714:	08003f2c 	.word	0x08003f2c
 8002718:	08003f80 	.word	0x08003f80
 800271c:	08003fd4 	.word	0x08003fd4
 8002720:	08004028 	.word	0x08004028
 8002724:	0800407c 	.word	0x0800407c
 8002728:	080040c4 	.word	0x080040c4
 800272c:	080040f0 	.word	0x080040f0
 8002730:	08004134 	.word	0x08004134
 8002734:	08004160 	.word	0x08004160

08002738 <vAssertCalled>:

void vAssertCalled( const char *pcFile, unsigned int ulLine )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	__asm volatile
 8002742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	60fb      	str	r3, [r7, #12]
}
 8002754:	bf00      	nop
  taskDISABLE_INTERRUPTS();
  printf("\n\nAssertion failed in %s:%d\n", pcFile, ulLine); for(;;);
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4802      	ldr	r0, [pc, #8]	@ (8002764 <vAssertCalled+0x2c>)
 800275c:	f000 fb70 	bl	8002e40 <iprintf>
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <vAssertCalled+0x28>
 8002764:	080041a8 	.word	0x080041a8

08002768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800277a:	4b18      	ldr	r3, [pc, #96]	@ (80027dc <HAL_MspInit+0x68>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <HAL_MspInit+0x68>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6193      	str	r3, [r2, #24]
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <HAL_MspInit+0x68>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_MspInit+0x68>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <HAL_MspInit+0x68>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]
 800279e:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <HAL_MspInit+0x68>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	210f      	movs	r1, #15
 80027ae:	f06f 0001 	mvn.w	r0, #1
 80027b2:	f7fd fe06 	bl	80003c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027b6:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <HAL_MspInit+0x6c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <HAL_MspInit+0x6c>)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010000 	.word	0x40010000

080027e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <HAL_UART_MspInit+0x70>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d123      	bne.n	800284c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <HAL_UART_MspInit+0x74>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	4a13      	ldr	r2, [pc, #76]	@ (8002858 <HAL_UART_MspInit+0x74>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280e:	61d3      	str	r3, [r2, #28]
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_UART_MspInit+0x74>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	4b0e      	ldr	r3, [pc, #56]	@ (8002858 <HAL_UART_MspInit+0x74>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a0d      	ldr	r2, [pc, #52]	@ (8002858 <HAL_UART_MspInit+0x74>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_UART_MspInit+0x74>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002834:	230c      	movs	r3, #12
 8002836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2302      	movs	r3, #2
 800283e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	4619      	mov	r1, r3
 8002846:	4805      	ldr	r0, [pc, #20]	@ (800285c <HAL_UART_MspInit+0x78>)
 8002848:	f7fd fdf2 	bl	8000430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40004400 	.word	0x40004400
 8002858:	40021000 	.word	0x40021000
 800285c:	40010800 	.word	0x40010800

08002860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <MemManage_Handler+0x4>

0800287c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <UsageFault_Handler+0x4>

0800288c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800289c:	f7fd fc9e 	bl	80001dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028a0:	f7ff fa3c 	bl	8001d1c <xTaskGetSchedulerState>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80028aa:	f7ff fbad 	bl	8002008 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80028b6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028ba:	f7fd ff55 	bl	8000768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e00a      	b.n	80028ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028d4:	f3af 8000 	nop.w
 80028d8:	4601      	mov	r1, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	60ba      	str	r2, [r7, #8]
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dbf0      	blt.n	80028d4 <_read+0x12>
	}

return len;
 80028f2:	687b      	ldr	r3, [r7, #4]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e009      	b.n	8002922 <_write+0x26>
#ifdef _SWV_ITM_PRINTF
 if ( *ptr == '\n' )
	 ITM_SendChar('\r');
 ITM_SendChar(*ptr++);
#else
	__io_putchar(*ptr++);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	60ba      	str	r2, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fd76 	bl	8002408 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbf1      	blt.n	800290e <_write+0x12>
#endif
	}
	return len;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_close>:

int _close(int file)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800295a:	605a      	str	r2, [r3, #4]
	return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <_isatty>:

int _isatty(int file)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	return 1;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <_sbrk+0x50>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <_sbrk+0x16>
		heap_end = &end;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <_sbrk+0x50>)
 80029a6:	4a10      	ldr	r2, [pc, #64]	@ (80029e8 <_sbrk+0x54>)
 80029a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <_sbrk+0x50>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029b0:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <_sbrk+0x50>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	466a      	mov	r2, sp
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d907      	bls.n	80029ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029be:	f000 fab7 	bl	8002f30 <__errno>
 80029c2:	4603      	mov	r3, r0
 80029c4:	220c      	movs	r2, #12
 80029c6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029cc:	e006      	b.n	80029dc <_sbrk+0x48>
	}

	heap_end += incr;
 80029ce:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <_sbrk+0x50>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <_sbrk+0x50>)
 80029d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000431c 	.word	0x2000431c
 80029e8:	20004488 	.word	0x20004488

080029ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <USER_THREADS>:
int	task1timer, task2timer;

/*-----------------------------------------------------------*/

void USER_THREADS( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af02      	add	r7, sp, #8
#ifdef CMSIS_OS
	osThreadDef(defaultTask, TaskMain, osPriorityHigh, 0, 256);
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
#else
	/* Create one of the two tasks. */
	xTaskCreate(	(TaskFunction_t)TaskMain,		/* Pointer to the function that implements the task. */
 80029fe:	4b07      	ldr	r3, [pc, #28]	@ (8002a1c <USER_THREADS+0x24>)
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	2314      	movs	r3, #20
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a0c:	4904      	ldr	r1, [pc, #16]	@ (8002a20 <USER_THREADS+0x28>)
 8002a0e:	4805      	ldr	r0, [pc, #20]	@ (8002a24 <USER_THREADS+0x2c>)
 8002a10:	f7fe fd1c 	bl	800144c <xTaskCreate>
					256,		/* Stack depth - most small microcontrollers will use much less stack than this. */
					NULL,		/* We are not using the task parameter. */
					TASK_MAIN_PRIO,	/* This task will run at this priority */
					&xHandleMain );		/* We are not using the task handle. */
#endif
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	2000432c 	.word	0x2000432c
 8002a20:	080041e0 	.word	0x080041e0
 8002a24:	08002a29 	.word	0x08002a29

08002a28 <TaskMain>:

static void TaskMain( void const *pvParameters )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "TaskMain";
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <TaskMain+0x4c>)
 8002a32:	60fb      	str	r3, [r7, #12]
	struct Param_types *Param;

	pvParameters = pvParameters; // for compiler warning

	/* Print out the name of this task. */
	printf( "%s is running\r\n", pcTaskName );
 8002a34:	68f9      	ldr	r1, [r7, #12]
 8002a36:	4810      	ldr	r0, [pc, #64]	@ (8002a78 <TaskMain+0x50>)
 8002a38:	f000 fa02 	bl	8002e40 <iprintf>
#if 0

#endif // TODO #1

	/* Create the other task in exactly the same way. */
	Param = &Param_Tbl;		/* get parameter tbl addr */
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <TaskMain+0x54>)
 8002a3e:	60bb      	str	r3, [r7, #8]
	Param->P1 = 111111;		/* set parameter */
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4a0f      	ldr	r2, [pc, #60]	@ (8002a80 <TaskMain+0x58>)
 8002a44:	605a      	str	r2, [r3, #4]
	Param->P2 = 222222;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <TaskMain+0x5c>)
 8002a4a:	609a      	str	r2, [r3, #8]
#ifdef CMSIS_OS
	osThreadDef(Task2, (void const *)Task2, osPriorityBelowNormal, 0, 256);
	xHandle2 = osThreadCreate (osThread(Task2), (void*)Param);
#else
	xTaskCreate( (TaskFunction_t)Task2, "Task2", 256, (void*)Param, TASK_2_PRIO, &xHandle2 );
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <TaskMain+0x60>)
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	2309      	movs	r3, #9
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a5a:	490c      	ldr	r1, [pc, #48]	@ (8002a8c <TaskMain+0x64>)
 8002a5c:	480c      	ldr	r0, [pc, #48]	@ (8002a90 <TaskMain+0x68>)
 8002a5e:	f7fe fcf5 	bl	800144c <xTaskCreate>
#if 0

#endif // TODO #4

	/* delete self task */
	vTaskDelete (xHandleMain);	// vTaskDelete (NULL);
 8002a62:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <TaskMain+0x6c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fe18 	bl	800169c <vTaskDelete>
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	080041e0 	.word	0x080041e0
 8002a78:	080041ec 	.word	0x080041ec
 8002a7c:	20004320 	.word	0x20004320
 8002a80:	0001b207 	.word	0x0001b207
 8002a84:	0003640e 	.word	0x0003640e
 8002a88:	20004330 	.word	0x20004330
 8002a8c:	080041fc 	.word	0x080041fc
 8002a90:	08002a99 	.word	0x08002a99
 8002a94:	2000432c 	.word	0x2000432c

08002a98 <Task2>:
		task1timer++;
	}
}

static void Task2( const struct Param_types *Param )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	const char *pcTaskName = "Task2";
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <Task2+0x44>)
 8002aa2:	60fb      	str	r3, [r7, #12]

	/* Print out the name of this task. */
	printf( "%s is running\n", pcTaskName );
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	480e      	ldr	r0, [pc, #56]	@ (8002ae0 <Task2+0x48>)
 8002aa8:	f000 f9ca 	bl	8002e40 <iprintf>

	printf("\n-------  Task2 parameter passed from main --------\n");
 8002aac:	480d      	ldr	r0, [pc, #52]	@ (8002ae4 <Task2+0x4c>)
 8002aae:	f000 fa2f 	bl	8002f10 <puts>
	printf("task2 first parameter = %d \n",Param->P1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480b      	ldr	r0, [pc, #44]	@ (8002ae8 <Task2+0x50>)
 8002aba:	f000 f9c1 	bl	8002e40 <iprintf>
	printf("task2 second parameter = %d \n",Param->P2);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4809      	ldr	r0, [pc, #36]	@ (8002aec <Task2+0x54>)
 8002ac6:	f000 f9bb 	bl	8002e40 <iprintf>
	printf("--------------------------------------------------\n");
 8002aca:	4809      	ldr	r0, [pc, #36]	@ (8002af0 <Task2+0x58>)
 8002acc:	f000 fa20 	bl	8002f10 <puts>
#if 0 // No comment
vTaskDelay (pdMS_TO_TICKS (1000));
printf("b"); fflush(stdout);	// 문자 'a' 출력
#endif // TODO #3

		task2timer++;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <Task2+0x5c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <Task2+0x5c>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e7f9      	b.n	8002ad0 <Task2+0x38>
 8002adc:	080041fc 	.word	0x080041fc
 8002ae0:	0800420c 	.word	0x0800420c
 8002ae4:	08004290 	.word	0x08004290
 8002ae8:	080042c4 	.word	0x080042c4
 8002aec:	080042e4 	.word	0x080042e4
 8002af0:	08004304 	.word	0x08004304
 8002af4:	20004334 	.word	0x20004334

08002af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002af8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002afa:	e003      	b.n	8002b04 <LoopCopyDataInit>

08002afc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002afe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b02:	3104      	adds	r1, #4

08002b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b04:	480a      	ldr	r0, [pc, #40]	@ (8002b30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b0c:	d3f6      	bcc.n	8002afc <CopyDataInit>
  ldr r2, =_sbss
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b10:	e002      	b.n	8002b18 <LoopFillZerobss>

08002b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b14:	f842 3b04 	str.w	r3, [r2], #4

08002b18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b18:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b1c:	d3f9      	bcc.n	8002b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b1e:	f7ff ff65 	bl	80029ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b22:	f000 fa0b 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b26:	f7ff fc8d 	bl	8002444 <main>
  bx lr
 8002b2a:	4770      	bx	lr
  ldr r3, =_sidata
 8002b2c:	0800438c 	.word	0x0800438c
  ldr r0, =_sdata
 8002b30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b34:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8002b38:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8002b3c:	20004484 	.word	0x20004484

08002b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b40:	e7fe      	b.n	8002b40 <ADC1_2_IRQHandler>
	...

08002b44 <__sflush_r>:
 8002b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	0716      	lsls	r6, r2, #28
 8002b4c:	4605      	mov	r5, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	d454      	bmi.n	8002bfc <__sflush_r+0xb8>
 8002b52:	684b      	ldr	r3, [r1, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	dc02      	bgt.n	8002b5e <__sflush_r+0x1a>
 8002b58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	dd48      	ble.n	8002bf0 <__sflush_r+0xac>
 8002b5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b60:	2e00      	cmp	r6, #0
 8002b62:	d045      	beq.n	8002bf0 <__sflush_r+0xac>
 8002b64:	2300      	movs	r3, #0
 8002b66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002b6a:	682f      	ldr	r7, [r5, #0]
 8002b6c:	6a21      	ldr	r1, [r4, #32]
 8002b6e:	602b      	str	r3, [r5, #0]
 8002b70:	d030      	beq.n	8002bd4 <__sflush_r+0x90>
 8002b72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002b74:	89a3      	ldrh	r3, [r4, #12]
 8002b76:	0759      	lsls	r1, r3, #29
 8002b78:	d505      	bpl.n	8002b86 <__sflush_r+0x42>
 8002b7a:	6863      	ldr	r3, [r4, #4]
 8002b7c:	1ad2      	subs	r2, r2, r3
 8002b7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b80:	b10b      	cbz	r3, 8002b86 <__sflush_r+0x42>
 8002b82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b84:	1ad2      	subs	r2, r2, r3
 8002b86:	2300      	movs	r3, #0
 8002b88:	4628      	mov	r0, r5
 8002b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b8c:	6a21      	ldr	r1, [r4, #32]
 8002b8e:	47b0      	blx	r6
 8002b90:	1c43      	adds	r3, r0, #1
 8002b92:	89a3      	ldrh	r3, [r4, #12]
 8002b94:	d106      	bne.n	8002ba4 <__sflush_r+0x60>
 8002b96:	6829      	ldr	r1, [r5, #0]
 8002b98:	291d      	cmp	r1, #29
 8002b9a:	d82b      	bhi.n	8002bf4 <__sflush_r+0xb0>
 8002b9c:	4a28      	ldr	r2, [pc, #160]	@ (8002c40 <__sflush_r+0xfc>)
 8002b9e:	40ca      	lsrs	r2, r1
 8002ba0:	07d6      	lsls	r6, r2, #31
 8002ba2:	d527      	bpl.n	8002bf4 <__sflush_r+0xb0>
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6062      	str	r2, [r4, #4]
 8002ba8:	6922      	ldr	r2, [r4, #16]
 8002baa:	04d9      	lsls	r1, r3, #19
 8002bac:	6022      	str	r2, [r4, #0]
 8002bae:	d504      	bpl.n	8002bba <__sflush_r+0x76>
 8002bb0:	1c42      	adds	r2, r0, #1
 8002bb2:	d101      	bne.n	8002bb8 <__sflush_r+0x74>
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	b903      	cbnz	r3, 8002bba <__sflush_r+0x76>
 8002bb8:	6560      	str	r0, [r4, #84]	@ 0x54
 8002bba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002bbc:	602f      	str	r7, [r5, #0]
 8002bbe:	b1b9      	cbz	r1, 8002bf0 <__sflush_r+0xac>
 8002bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002bc4:	4299      	cmp	r1, r3
 8002bc6:	d002      	beq.n	8002bce <__sflush_r+0x8a>
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f000 f9df 	bl	8002f8c <_free_r>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bd2:	e00d      	b.n	8002bf0 <__sflush_r+0xac>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	47b0      	blx	r6
 8002bda:	4602      	mov	r2, r0
 8002bdc:	1c50      	adds	r0, r2, #1
 8002bde:	d1c9      	bne.n	8002b74 <__sflush_r+0x30>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0c6      	beq.n	8002b74 <__sflush_r+0x30>
 8002be6:	2b1d      	cmp	r3, #29
 8002be8:	d001      	beq.n	8002bee <__sflush_r+0xaa>
 8002bea:	2b16      	cmp	r3, #22
 8002bec:	d11d      	bne.n	8002c2a <__sflush_r+0xe6>
 8002bee:	602f      	str	r7, [r5, #0]
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	e021      	b.n	8002c38 <__sflush_r+0xf4>
 8002bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	e01a      	b.n	8002c32 <__sflush_r+0xee>
 8002bfc:	690f      	ldr	r7, [r1, #16]
 8002bfe:	2f00      	cmp	r7, #0
 8002c00:	d0f6      	beq.n	8002bf0 <__sflush_r+0xac>
 8002c02:	0793      	lsls	r3, r2, #30
 8002c04:	bf18      	it	ne
 8002c06:	2300      	movne	r3, #0
 8002c08:	680e      	ldr	r6, [r1, #0]
 8002c0a:	bf08      	it	eq
 8002c0c:	694b      	ldreq	r3, [r1, #20]
 8002c0e:	1bf6      	subs	r6, r6, r7
 8002c10:	600f      	str	r7, [r1, #0]
 8002c12:	608b      	str	r3, [r1, #8]
 8002c14:	2e00      	cmp	r6, #0
 8002c16:	ddeb      	ble.n	8002bf0 <__sflush_r+0xac>
 8002c18:	4633      	mov	r3, r6
 8002c1a:	463a      	mov	r2, r7
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	6a21      	ldr	r1, [r4, #32]
 8002c20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002c24:	47e0      	blx	ip
 8002c26:	2800      	cmp	r0, #0
 8002c28:	dc07      	bgt.n	8002c3a <__sflush_r+0xf6>
 8002c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c3a:	4407      	add	r7, r0
 8002c3c:	1a36      	subs	r6, r6, r0
 8002c3e:	e7e9      	b.n	8002c14 <__sflush_r+0xd0>
 8002c40:	20400001 	.word	0x20400001

08002c44 <_fflush_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	690b      	ldr	r3, [r1, #16]
 8002c48:	4605      	mov	r5, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	b913      	cbnz	r3, 8002c54 <_fflush_r+0x10>
 8002c4e:	2500      	movs	r5, #0
 8002c50:	4628      	mov	r0, r5
 8002c52:	bd38      	pop	{r3, r4, r5, pc}
 8002c54:	b118      	cbz	r0, 8002c5e <_fflush_r+0x1a>
 8002c56:	6a03      	ldr	r3, [r0, #32]
 8002c58:	b90b      	cbnz	r3, 8002c5e <_fflush_r+0x1a>
 8002c5a:	f000 f8bb 	bl	8002dd4 <__sinit>
 8002c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f3      	beq.n	8002c4e <_fflush_r+0xa>
 8002c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002c68:	07d0      	lsls	r0, r2, #31
 8002c6a:	d404      	bmi.n	8002c76 <_fflush_r+0x32>
 8002c6c:	0599      	lsls	r1, r3, #22
 8002c6e:	d402      	bmi.n	8002c76 <_fflush_r+0x32>
 8002c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c72:	f000 f988 	bl	8002f86 <__retarget_lock_acquire_recursive>
 8002c76:	4628      	mov	r0, r5
 8002c78:	4621      	mov	r1, r4
 8002c7a:	f7ff ff63 	bl	8002b44 <__sflush_r>
 8002c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c80:	4605      	mov	r5, r0
 8002c82:	07da      	lsls	r2, r3, #31
 8002c84:	d4e4      	bmi.n	8002c50 <_fflush_r+0xc>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	059b      	lsls	r3, r3, #22
 8002c8a:	d4e1      	bmi.n	8002c50 <_fflush_r+0xc>
 8002c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c8e:	f000 f97b 	bl	8002f88 <__retarget_lock_release_recursive>
 8002c92:	e7dd      	b.n	8002c50 <_fflush_r+0xc>

08002c94 <fflush>:
 8002c94:	4601      	mov	r1, r0
 8002c96:	b920      	cbnz	r0, 8002ca2 <fflush+0xe>
 8002c98:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <fflush+0x18>)
 8002c9a:	4905      	ldr	r1, [pc, #20]	@ (8002cb0 <fflush+0x1c>)
 8002c9c:	4805      	ldr	r0, [pc, #20]	@ (8002cb4 <fflush+0x20>)
 8002c9e:	f000 b8b1 	b.w	8002e04 <_fwalk_sglue>
 8002ca2:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <fflush+0x24>)
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	f7ff bfcd 	b.w	8002c44 <_fflush_r>
 8002caa:	bf00      	nop
 8002cac:	20000010 	.word	0x20000010
 8002cb0:	08002c45 	.word	0x08002c45
 8002cb4:	20000020 	.word	0x20000020
 8002cb8:	2000001c 	.word	0x2000001c

08002cbc <std>:
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	b510      	push	{r4, lr}
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8002cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cca:	6083      	str	r3, [r0, #8]
 8002ccc:	8181      	strh	r1, [r0, #12]
 8002cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cd0:	81c2      	strh	r2, [r0, #14]
 8002cd2:	6183      	str	r3, [r0, #24]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	305c      	adds	r0, #92	@ 0x5c
 8002cda:	f000 f921 	bl	8002f20 <memset>
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <std+0x58>)
 8002ce0:	6224      	str	r4, [r4, #32]
 8002ce2:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <std+0x5c>)
 8002ce6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <std+0x60>)
 8002cea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <std+0x64>)
 8002cee:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <std+0x68>)
 8002cf2:	429c      	cmp	r4, r3
 8002cf4:	d006      	beq.n	8002d04 <std+0x48>
 8002cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002cfa:	4294      	cmp	r4, r2
 8002cfc:	d002      	beq.n	8002d04 <std+0x48>
 8002cfe:	33d0      	adds	r3, #208	@ 0xd0
 8002d00:	429c      	cmp	r4, r3
 8002d02:	d105      	bne.n	8002d10 <std+0x54>
 8002d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d0c:	f000 b93a 	b.w	8002f84 <__retarget_lock_init_recursive>
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	bf00      	nop
 8002d14:	08003719 	.word	0x08003719
 8002d18:	0800373b 	.word	0x0800373b
 8002d1c:	08003773 	.word	0x08003773
 8002d20:	08003797 	.word	0x08003797
 8002d24:	20004338 	.word	0x20004338

08002d28 <stdio_exit_handler>:
 8002d28:	4a02      	ldr	r2, [pc, #8]	@ (8002d34 <stdio_exit_handler+0xc>)
 8002d2a:	4903      	ldr	r1, [pc, #12]	@ (8002d38 <stdio_exit_handler+0x10>)
 8002d2c:	4803      	ldr	r0, [pc, #12]	@ (8002d3c <stdio_exit_handler+0x14>)
 8002d2e:	f000 b869 	b.w	8002e04 <_fwalk_sglue>
 8002d32:	bf00      	nop
 8002d34:	20000010 	.word	0x20000010
 8002d38:	08002c45 	.word	0x08002c45
 8002d3c:	20000020 	.word	0x20000020

08002d40 <cleanup_stdio>:
 8002d40:	6841      	ldr	r1, [r0, #4]
 8002d42:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <cleanup_stdio+0x34>)
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4299      	cmp	r1, r3
 8002d48:	4604      	mov	r4, r0
 8002d4a:	d001      	beq.n	8002d50 <cleanup_stdio+0x10>
 8002d4c:	f7ff ff7a 	bl	8002c44 <_fflush_r>
 8002d50:	68a1      	ldr	r1, [r4, #8]
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <cleanup_stdio+0x38>)
 8002d54:	4299      	cmp	r1, r3
 8002d56:	d002      	beq.n	8002d5e <cleanup_stdio+0x1e>
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ff73 	bl	8002c44 <_fflush_r>
 8002d5e:	68e1      	ldr	r1, [r4, #12]
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <cleanup_stdio+0x3c>)
 8002d62:	4299      	cmp	r1, r3
 8002d64:	d004      	beq.n	8002d70 <cleanup_stdio+0x30>
 8002d66:	4620      	mov	r0, r4
 8002d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d6c:	f7ff bf6a 	b.w	8002c44 <_fflush_r>
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	bf00      	nop
 8002d74:	20004338 	.word	0x20004338
 8002d78:	200043a0 	.word	0x200043a0
 8002d7c:	20004408 	.word	0x20004408

08002d80 <global_stdio_init.part.0>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <global_stdio_init.part.0+0x30>)
 8002d84:	4c0b      	ldr	r4, [pc, #44]	@ (8002db4 <global_stdio_init.part.0+0x34>)
 8002d86:	4a0c      	ldr	r2, [pc, #48]	@ (8002db8 <global_stdio_init.part.0+0x38>)
 8002d88:	4620      	mov	r0, r4
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f7ff ff94 	bl	8002cbc <std>
 8002d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d98:	2201      	movs	r2, #1
 8002d9a:	2109      	movs	r1, #9
 8002d9c:	f7ff ff8e 	bl	8002cbc <std>
 8002da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002da4:	2202      	movs	r2, #2
 8002da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002daa:	2112      	movs	r1, #18
 8002dac:	f7ff bf86 	b.w	8002cbc <std>
 8002db0:	20004470 	.word	0x20004470
 8002db4:	20004338 	.word	0x20004338
 8002db8:	08002d29 	.word	0x08002d29

08002dbc <__sfp_lock_acquire>:
 8002dbc:	4801      	ldr	r0, [pc, #4]	@ (8002dc4 <__sfp_lock_acquire+0x8>)
 8002dbe:	f000 b8e2 	b.w	8002f86 <__retarget_lock_acquire_recursive>
 8002dc2:	bf00      	nop
 8002dc4:	20004475 	.word	0x20004475

08002dc8 <__sfp_lock_release>:
 8002dc8:	4801      	ldr	r0, [pc, #4]	@ (8002dd0 <__sfp_lock_release+0x8>)
 8002dca:	f000 b8dd 	b.w	8002f88 <__retarget_lock_release_recursive>
 8002dce:	bf00      	nop
 8002dd0:	20004475 	.word	0x20004475

08002dd4 <__sinit>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	f7ff fff0 	bl	8002dbc <__sfp_lock_acquire>
 8002ddc:	6a23      	ldr	r3, [r4, #32]
 8002dde:	b11b      	cbz	r3, 8002de8 <__sinit+0x14>
 8002de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de4:	f7ff bff0 	b.w	8002dc8 <__sfp_lock_release>
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <__sinit+0x28>)
 8002dea:	6223      	str	r3, [r4, #32]
 8002dec:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <__sinit+0x2c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f5      	bne.n	8002de0 <__sinit+0xc>
 8002df4:	f7ff ffc4 	bl	8002d80 <global_stdio_init.part.0>
 8002df8:	e7f2      	b.n	8002de0 <__sinit+0xc>
 8002dfa:	bf00      	nop
 8002dfc:	08002d41 	.word	0x08002d41
 8002e00:	20004470 	.word	0x20004470

08002e04 <_fwalk_sglue>:
 8002e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e08:	4607      	mov	r7, r0
 8002e0a:	4688      	mov	r8, r1
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e14:	f1b9 0901 	subs.w	r9, r9, #1
 8002e18:	d505      	bpl.n	8002e26 <_fwalk_sglue+0x22>
 8002e1a:	6824      	ldr	r4, [r4, #0]
 8002e1c:	2c00      	cmp	r4, #0
 8002e1e:	d1f7      	bne.n	8002e10 <_fwalk_sglue+0xc>
 8002e20:	4630      	mov	r0, r6
 8002e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e26:	89ab      	ldrh	r3, [r5, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d907      	bls.n	8002e3c <_fwalk_sglue+0x38>
 8002e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e30:	3301      	adds	r3, #1
 8002e32:	d003      	beq.n	8002e3c <_fwalk_sglue+0x38>
 8002e34:	4629      	mov	r1, r5
 8002e36:	4638      	mov	r0, r7
 8002e38:	47c0      	blx	r8
 8002e3a:	4306      	orrs	r6, r0
 8002e3c:	3568      	adds	r5, #104	@ 0x68
 8002e3e:	e7e9      	b.n	8002e14 <_fwalk_sglue+0x10>

08002e40 <iprintf>:
 8002e40:	b40f      	push	{r0, r1, r2, r3}
 8002e42:	b507      	push	{r0, r1, r2, lr}
 8002e44:	4906      	ldr	r1, [pc, #24]	@ (8002e60 <iprintf+0x20>)
 8002e46:	ab04      	add	r3, sp, #16
 8002e48:	6808      	ldr	r0, [r1, #0]
 8002e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e4e:	6881      	ldr	r1, [r0, #8]
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	f000 f90b 	bl	800306c <_vfiprintf_r>
 8002e56:	b003      	add	sp, #12
 8002e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e5c:	b004      	add	sp, #16
 8002e5e:	4770      	bx	lr
 8002e60:	2000001c 	.word	0x2000001c

08002e64 <_puts_r>:
 8002e64:	6a03      	ldr	r3, [r0, #32]
 8002e66:	b570      	push	{r4, r5, r6, lr}
 8002e68:	4605      	mov	r5, r0
 8002e6a:	460e      	mov	r6, r1
 8002e6c:	6884      	ldr	r4, [r0, #8]
 8002e6e:	b90b      	cbnz	r3, 8002e74 <_puts_r+0x10>
 8002e70:	f7ff ffb0 	bl	8002dd4 <__sinit>
 8002e74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e76:	07db      	lsls	r3, r3, #31
 8002e78:	d405      	bmi.n	8002e86 <_puts_r+0x22>
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	0598      	lsls	r0, r3, #22
 8002e7e:	d402      	bmi.n	8002e86 <_puts_r+0x22>
 8002e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e82:	f000 f880 	bl	8002f86 <__retarget_lock_acquire_recursive>
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	0719      	lsls	r1, r3, #28
 8002e8a:	d502      	bpl.n	8002e92 <_puts_r+0x2e>
 8002e8c:	6923      	ldr	r3, [r4, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d135      	bne.n	8002efe <_puts_r+0x9a>
 8002e92:	4621      	mov	r1, r4
 8002e94:	4628      	mov	r0, r5
 8002e96:	f000 fcc1 	bl	800381c <__swsetup_r>
 8002e9a:	b380      	cbz	r0, 8002efe <_puts_r+0x9a>
 8002e9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ea2:	07da      	lsls	r2, r3, #31
 8002ea4:	d405      	bmi.n	8002eb2 <_puts_r+0x4e>
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	059b      	lsls	r3, r3, #22
 8002eaa:	d402      	bmi.n	8002eb2 <_puts_r+0x4e>
 8002eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eae:	f000 f86b 	bl	8002f88 <__retarget_lock_release_recursive>
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da04      	bge.n	8002ec4 <_puts_r+0x60>
 8002eba:	69a2      	ldr	r2, [r4, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dc17      	bgt.n	8002ef0 <_puts_r+0x8c>
 8002ec0:	290a      	cmp	r1, #10
 8002ec2:	d015      	beq.n	8002ef0 <_puts_r+0x8c>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	6022      	str	r2, [r4, #0]
 8002eca:	7019      	strb	r1, [r3, #0]
 8002ecc:	68a3      	ldr	r3, [r4, #8]
 8002ece:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	60a3      	str	r3, [r4, #8]
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d1ed      	bne.n	8002eb6 <_puts_r+0x52>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	da11      	bge.n	8002f02 <_puts_r+0x9e>
 8002ede:	4622      	mov	r2, r4
 8002ee0:	210a      	movs	r1, #10
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f000 fc5b 	bl	800379e <__swbuf_r>
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d0d7      	beq.n	8002e9c <_puts_r+0x38>
 8002eec:	250a      	movs	r5, #10
 8002eee:	e7d7      	b.n	8002ea0 <_puts_r+0x3c>
 8002ef0:	4622      	mov	r2, r4
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f000 fc53 	bl	800379e <__swbuf_r>
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d1e7      	bne.n	8002ecc <_puts_r+0x68>
 8002efc:	e7ce      	b.n	8002e9c <_puts_r+0x38>
 8002efe:	3e01      	subs	r6, #1
 8002f00:	e7e4      	b.n	8002ecc <_puts_r+0x68>
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	6022      	str	r2, [r4, #0]
 8002f08:	220a      	movs	r2, #10
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e7ee      	b.n	8002eec <_puts_r+0x88>
	...

08002f10 <puts>:
 8002f10:	4b02      	ldr	r3, [pc, #8]	@ (8002f1c <puts+0xc>)
 8002f12:	4601      	mov	r1, r0
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	f7ff bfa5 	b.w	8002e64 <_puts_r>
 8002f1a:	bf00      	nop
 8002f1c:	2000001c 	.word	0x2000001c

08002f20 <memset>:
 8002f20:	4603      	mov	r3, r0
 8002f22:	4402      	add	r2, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <__errno>:
 8002f30:	4b01      	ldr	r3, [pc, #4]	@ (8002f38 <__errno+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	2000001c 	.word	0x2000001c

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2600      	movs	r6, #0
 8002f40:	4d0c      	ldr	r5, [pc, #48]	@ (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	@ (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1b64      	subs	r4, r4, r5
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a6      	cmp	r6, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f000 fda4 	bl	8003a98 <_init>
 8002f50:	2600      	movs	r6, #0
 8002f52:	4d0a      	ldr	r5, [pc, #40]	@ (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	@ (8002f80 <__libc_init_array+0x44>)
 8002f56:	1b64      	subs	r4, r4, r5
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a6      	cmp	r6, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f64:	4798      	blx	r3
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6e:	4798      	blx	r3
 8002f70:	3601      	adds	r6, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08004384 	.word	0x08004384
 8002f78:	08004384 	.word	0x08004384
 8002f7c:	08004384 	.word	0x08004384
 8002f80:	08004388 	.word	0x08004388

08002f84 <__retarget_lock_init_recursive>:
 8002f84:	4770      	bx	lr

08002f86 <__retarget_lock_acquire_recursive>:
 8002f86:	4770      	bx	lr

08002f88 <__retarget_lock_release_recursive>:
 8002f88:	4770      	bx	lr
	...

08002f8c <_free_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4605      	mov	r5, r0
 8002f90:	2900      	cmp	r1, #0
 8002f92:	d040      	beq.n	8003016 <_free_r+0x8a>
 8002f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f98:	1f0c      	subs	r4, r1, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bfb8      	it	lt
 8002f9e:	18e4      	addlt	r4, r4, r3
 8002fa0:	f000 fbae 	bl	8003700 <__malloc_lock>
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003018 <_free_r+0x8c>)
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	b933      	cbnz	r3, 8002fb8 <_free_r+0x2c>
 8002faa:	6063      	str	r3, [r4, #4]
 8002fac:	6014      	str	r4, [r2, #0]
 8002fae:	4628      	mov	r0, r5
 8002fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fb4:	f000 bbaa 	b.w	800370c <__malloc_unlock>
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	d908      	bls.n	8002fce <_free_r+0x42>
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	1821      	adds	r1, r4, r0
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	bf01      	itttt	eq
 8002fc4:	6819      	ldreq	r1, [r3, #0]
 8002fc6:	685b      	ldreq	r3, [r3, #4]
 8002fc8:	1809      	addeq	r1, r1, r0
 8002fca:	6021      	streq	r1, [r4, #0]
 8002fcc:	e7ed      	b.n	8002faa <_free_r+0x1e>
 8002fce:	461a      	mov	r2, r3
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b10b      	cbz	r3, 8002fd8 <_free_r+0x4c>
 8002fd4:	42a3      	cmp	r3, r4
 8002fd6:	d9fa      	bls.n	8002fce <_free_r+0x42>
 8002fd8:	6811      	ldr	r1, [r2, #0]
 8002fda:	1850      	adds	r0, r2, r1
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d10b      	bne.n	8002ff8 <_free_r+0x6c>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	4401      	add	r1, r0
 8002fe4:	1850      	adds	r0, r2, r1
 8002fe6:	4283      	cmp	r3, r0
 8002fe8:	6011      	str	r1, [r2, #0]
 8002fea:	d1e0      	bne.n	8002fae <_free_r+0x22>
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4408      	add	r0, r1
 8002ff2:	6010      	str	r0, [r2, #0]
 8002ff4:	6053      	str	r3, [r2, #4]
 8002ff6:	e7da      	b.n	8002fae <_free_r+0x22>
 8002ff8:	d902      	bls.n	8003000 <_free_r+0x74>
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	e7d6      	b.n	8002fae <_free_r+0x22>
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	1821      	adds	r1, r4, r0
 8003004:	428b      	cmp	r3, r1
 8003006:	bf01      	itttt	eq
 8003008:	6819      	ldreq	r1, [r3, #0]
 800300a:	685b      	ldreq	r3, [r3, #4]
 800300c:	1809      	addeq	r1, r1, r0
 800300e:	6021      	streq	r1, [r4, #0]
 8003010:	6063      	str	r3, [r4, #4]
 8003012:	6054      	str	r4, [r2, #4]
 8003014:	e7cb      	b.n	8002fae <_free_r+0x22>
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	2000447c 	.word	0x2000447c

0800301c <__sfputc_r>:
 800301c:	6893      	ldr	r3, [r2, #8]
 800301e:	b410      	push	{r4}
 8003020:	3b01      	subs	r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	da07      	bge.n	8003038 <__sfputc_r+0x1c>
 8003028:	6994      	ldr	r4, [r2, #24]
 800302a:	42a3      	cmp	r3, r4
 800302c:	db01      	blt.n	8003032 <__sfputc_r+0x16>
 800302e:	290a      	cmp	r1, #10
 8003030:	d102      	bne.n	8003038 <__sfputc_r+0x1c>
 8003032:	bc10      	pop	{r4}
 8003034:	f000 bbb3 	b.w	800379e <__swbuf_r>
 8003038:	6813      	ldr	r3, [r2, #0]
 800303a:	1c58      	adds	r0, r3, #1
 800303c:	6010      	str	r0, [r2, #0]
 800303e:	7019      	strb	r1, [r3, #0]
 8003040:	4608      	mov	r0, r1
 8003042:	bc10      	pop	{r4}
 8003044:	4770      	bx	lr

08003046 <__sfputs_r>:
 8003046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003048:	4606      	mov	r6, r0
 800304a:	460f      	mov	r7, r1
 800304c:	4614      	mov	r4, r2
 800304e:	18d5      	adds	r5, r2, r3
 8003050:	42ac      	cmp	r4, r5
 8003052:	d101      	bne.n	8003058 <__sfputs_r+0x12>
 8003054:	2000      	movs	r0, #0
 8003056:	e007      	b.n	8003068 <__sfputs_r+0x22>
 8003058:	463a      	mov	r2, r7
 800305a:	4630      	mov	r0, r6
 800305c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003060:	f7ff ffdc 	bl	800301c <__sfputc_r>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d1f3      	bne.n	8003050 <__sfputs_r+0xa>
 8003068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800306c <_vfiprintf_r>:
 800306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003070:	460d      	mov	r5, r1
 8003072:	4614      	mov	r4, r2
 8003074:	4698      	mov	r8, r3
 8003076:	4606      	mov	r6, r0
 8003078:	b09d      	sub	sp, #116	@ 0x74
 800307a:	b118      	cbz	r0, 8003084 <_vfiprintf_r+0x18>
 800307c:	6a03      	ldr	r3, [r0, #32]
 800307e:	b90b      	cbnz	r3, 8003084 <_vfiprintf_r+0x18>
 8003080:	f7ff fea8 	bl	8002dd4 <__sinit>
 8003084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003086:	07d9      	lsls	r1, r3, #31
 8003088:	d405      	bmi.n	8003096 <_vfiprintf_r+0x2a>
 800308a:	89ab      	ldrh	r3, [r5, #12]
 800308c:	059a      	lsls	r2, r3, #22
 800308e:	d402      	bmi.n	8003096 <_vfiprintf_r+0x2a>
 8003090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003092:	f7ff ff78 	bl	8002f86 <__retarget_lock_acquire_recursive>
 8003096:	89ab      	ldrh	r3, [r5, #12]
 8003098:	071b      	lsls	r3, r3, #28
 800309a:	d501      	bpl.n	80030a0 <_vfiprintf_r+0x34>
 800309c:	692b      	ldr	r3, [r5, #16]
 800309e:	b99b      	cbnz	r3, 80030c8 <_vfiprintf_r+0x5c>
 80030a0:	4629      	mov	r1, r5
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 fbba 	bl	800381c <__swsetup_r>
 80030a8:	b170      	cbz	r0, 80030c8 <_vfiprintf_r+0x5c>
 80030aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80030ac:	07dc      	lsls	r4, r3, #31
 80030ae:	d504      	bpl.n	80030ba <_vfiprintf_r+0x4e>
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030b4:	b01d      	add	sp, #116	@ 0x74
 80030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ba:	89ab      	ldrh	r3, [r5, #12]
 80030bc:	0598      	lsls	r0, r3, #22
 80030be:	d4f7      	bmi.n	80030b0 <_vfiprintf_r+0x44>
 80030c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80030c2:	f7ff ff61 	bl	8002f88 <__retarget_lock_release_recursive>
 80030c6:	e7f3      	b.n	80030b0 <_vfiprintf_r+0x44>
 80030c8:	2300      	movs	r3, #0
 80030ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80030cc:	2320      	movs	r3, #32
 80030ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030d2:	2330      	movs	r3, #48	@ 0x30
 80030d4:	f04f 0901 	mov.w	r9, #1
 80030d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80030dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003288 <_vfiprintf_r+0x21c>
 80030e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030e4:	4623      	mov	r3, r4
 80030e6:	469a      	mov	sl, r3
 80030e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030ec:	b10a      	cbz	r2, 80030f2 <_vfiprintf_r+0x86>
 80030ee:	2a25      	cmp	r2, #37	@ 0x25
 80030f0:	d1f9      	bne.n	80030e6 <_vfiprintf_r+0x7a>
 80030f2:	ebba 0b04 	subs.w	fp, sl, r4
 80030f6:	d00b      	beq.n	8003110 <_vfiprintf_r+0xa4>
 80030f8:	465b      	mov	r3, fp
 80030fa:	4622      	mov	r2, r4
 80030fc:	4629      	mov	r1, r5
 80030fe:	4630      	mov	r0, r6
 8003100:	f7ff ffa1 	bl	8003046 <__sfputs_r>
 8003104:	3001      	adds	r0, #1
 8003106:	f000 80a7 	beq.w	8003258 <_vfiprintf_r+0x1ec>
 800310a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800310c:	445a      	add	r2, fp
 800310e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003110:	f89a 3000 	ldrb.w	r3, [sl]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 809f 	beq.w	8003258 <_vfiprintf_r+0x1ec>
 800311a:	2300      	movs	r3, #0
 800311c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003124:	f10a 0a01 	add.w	sl, sl, #1
 8003128:	9304      	str	r3, [sp, #16]
 800312a:	9307      	str	r3, [sp, #28]
 800312c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003130:	931a      	str	r3, [sp, #104]	@ 0x68
 8003132:	4654      	mov	r4, sl
 8003134:	2205      	movs	r2, #5
 8003136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800313a:	4853      	ldr	r0, [pc, #332]	@ (8003288 <_vfiprintf_r+0x21c>)
 800313c:	f000 fc9e 	bl	8003a7c <memchr>
 8003140:	9a04      	ldr	r2, [sp, #16]
 8003142:	b9d8      	cbnz	r0, 800317c <_vfiprintf_r+0x110>
 8003144:	06d1      	lsls	r1, r2, #27
 8003146:	bf44      	itt	mi
 8003148:	2320      	movmi	r3, #32
 800314a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800314e:	0713      	lsls	r3, r2, #28
 8003150:	bf44      	itt	mi
 8003152:	232b      	movmi	r3, #43	@ 0x2b
 8003154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003158:	f89a 3000 	ldrb.w	r3, [sl]
 800315c:	2b2a      	cmp	r3, #42	@ 0x2a
 800315e:	d015      	beq.n	800318c <_vfiprintf_r+0x120>
 8003160:	4654      	mov	r4, sl
 8003162:	2000      	movs	r0, #0
 8003164:	f04f 0c0a 	mov.w	ip, #10
 8003168:	9a07      	ldr	r2, [sp, #28]
 800316a:	4621      	mov	r1, r4
 800316c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003170:	3b30      	subs	r3, #48	@ 0x30
 8003172:	2b09      	cmp	r3, #9
 8003174:	d94b      	bls.n	800320e <_vfiprintf_r+0x1a2>
 8003176:	b1b0      	cbz	r0, 80031a6 <_vfiprintf_r+0x13a>
 8003178:	9207      	str	r2, [sp, #28]
 800317a:	e014      	b.n	80031a6 <_vfiprintf_r+0x13a>
 800317c:	eba0 0308 	sub.w	r3, r0, r8
 8003180:	fa09 f303 	lsl.w	r3, r9, r3
 8003184:	4313      	orrs	r3, r2
 8003186:	46a2      	mov	sl, r4
 8003188:	9304      	str	r3, [sp, #16]
 800318a:	e7d2      	b.n	8003132 <_vfiprintf_r+0xc6>
 800318c:	9b03      	ldr	r3, [sp, #12]
 800318e:	1d19      	adds	r1, r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	9103      	str	r1, [sp, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	bfbb      	ittet	lt
 8003198:	425b      	neglt	r3, r3
 800319a:	f042 0202 	orrlt.w	r2, r2, #2
 800319e:	9307      	strge	r3, [sp, #28]
 80031a0:	9307      	strlt	r3, [sp, #28]
 80031a2:	bfb8      	it	lt
 80031a4:	9204      	strlt	r2, [sp, #16]
 80031a6:	7823      	ldrb	r3, [r4, #0]
 80031a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80031aa:	d10a      	bne.n	80031c2 <_vfiprintf_r+0x156>
 80031ac:	7863      	ldrb	r3, [r4, #1]
 80031ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80031b0:	d132      	bne.n	8003218 <_vfiprintf_r+0x1ac>
 80031b2:	9b03      	ldr	r3, [sp, #12]
 80031b4:	3402      	adds	r4, #2
 80031b6:	1d1a      	adds	r2, r3, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	9203      	str	r2, [sp, #12]
 80031bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031c0:	9305      	str	r3, [sp, #20]
 80031c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800328c <_vfiprintf_r+0x220>
 80031c6:	2203      	movs	r2, #3
 80031c8:	4650      	mov	r0, sl
 80031ca:	7821      	ldrb	r1, [r4, #0]
 80031cc:	f000 fc56 	bl	8003a7c <memchr>
 80031d0:	b138      	cbz	r0, 80031e2 <_vfiprintf_r+0x176>
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	9b04      	ldr	r3, [sp, #16]
 80031d6:	eba0 000a 	sub.w	r0, r0, sl
 80031da:	4082      	lsls	r2, r0
 80031dc:	4313      	orrs	r3, r2
 80031de:	3401      	adds	r4, #1
 80031e0:	9304      	str	r3, [sp, #16]
 80031e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e6:	2206      	movs	r2, #6
 80031e8:	4829      	ldr	r0, [pc, #164]	@ (8003290 <_vfiprintf_r+0x224>)
 80031ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031ee:	f000 fc45 	bl	8003a7c <memchr>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d03f      	beq.n	8003276 <_vfiprintf_r+0x20a>
 80031f6:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <_vfiprintf_r+0x228>)
 80031f8:	bb1b      	cbnz	r3, 8003242 <_vfiprintf_r+0x1d6>
 80031fa:	9b03      	ldr	r3, [sp, #12]
 80031fc:	3307      	adds	r3, #7
 80031fe:	f023 0307 	bic.w	r3, r3, #7
 8003202:	3308      	adds	r3, #8
 8003204:	9303      	str	r3, [sp, #12]
 8003206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003208:	443b      	add	r3, r7
 800320a:	9309      	str	r3, [sp, #36]	@ 0x24
 800320c:	e76a      	b.n	80030e4 <_vfiprintf_r+0x78>
 800320e:	460c      	mov	r4, r1
 8003210:	2001      	movs	r0, #1
 8003212:	fb0c 3202 	mla	r2, ip, r2, r3
 8003216:	e7a8      	b.n	800316a <_vfiprintf_r+0xfe>
 8003218:	2300      	movs	r3, #0
 800321a:	f04f 0c0a 	mov.w	ip, #10
 800321e:	4619      	mov	r1, r3
 8003220:	3401      	adds	r4, #1
 8003222:	9305      	str	r3, [sp, #20]
 8003224:	4620      	mov	r0, r4
 8003226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800322a:	3a30      	subs	r2, #48	@ 0x30
 800322c:	2a09      	cmp	r2, #9
 800322e:	d903      	bls.n	8003238 <_vfiprintf_r+0x1cc>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0c6      	beq.n	80031c2 <_vfiprintf_r+0x156>
 8003234:	9105      	str	r1, [sp, #20]
 8003236:	e7c4      	b.n	80031c2 <_vfiprintf_r+0x156>
 8003238:	4604      	mov	r4, r0
 800323a:	2301      	movs	r3, #1
 800323c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003240:	e7f0      	b.n	8003224 <_vfiprintf_r+0x1b8>
 8003242:	ab03      	add	r3, sp, #12
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	462a      	mov	r2, r5
 8003248:	4630      	mov	r0, r6
 800324a:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <_vfiprintf_r+0x22c>)
 800324c:	a904      	add	r1, sp, #16
 800324e:	f3af 8000 	nop.w
 8003252:	4607      	mov	r7, r0
 8003254:	1c78      	adds	r0, r7, #1
 8003256:	d1d6      	bne.n	8003206 <_vfiprintf_r+0x19a>
 8003258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800325a:	07d9      	lsls	r1, r3, #31
 800325c:	d405      	bmi.n	800326a <_vfiprintf_r+0x1fe>
 800325e:	89ab      	ldrh	r3, [r5, #12]
 8003260:	059a      	lsls	r2, r3, #22
 8003262:	d402      	bmi.n	800326a <_vfiprintf_r+0x1fe>
 8003264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003266:	f7ff fe8f 	bl	8002f88 <__retarget_lock_release_recursive>
 800326a:	89ab      	ldrh	r3, [r5, #12]
 800326c:	065b      	lsls	r3, r3, #25
 800326e:	f53f af1f 	bmi.w	80030b0 <_vfiprintf_r+0x44>
 8003272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003274:	e71e      	b.n	80030b4 <_vfiprintf_r+0x48>
 8003276:	ab03      	add	r3, sp, #12
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	462a      	mov	r2, r5
 800327c:	4630      	mov	r0, r6
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <_vfiprintf_r+0x22c>)
 8003280:	a904      	add	r1, sp, #16
 8003282:	f000 f91f 	bl	80034c4 <_printf_i>
 8003286:	e7e4      	b.n	8003252 <_vfiprintf_r+0x1e6>
 8003288:	08004350 	.word	0x08004350
 800328c:	08004356 	.word	0x08004356
 8003290:	0800435a 	.word	0x0800435a
 8003294:	00000000 	.word	0x00000000
 8003298:	08003047 	.word	0x08003047

0800329c <sbrk_aligned>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4e0f      	ldr	r6, [pc, #60]	@ (80032dc <sbrk_aligned+0x40>)
 80032a0:	460c      	mov	r4, r1
 80032a2:	6831      	ldr	r1, [r6, #0]
 80032a4:	4605      	mov	r5, r0
 80032a6:	b911      	cbnz	r1, 80032ae <sbrk_aligned+0x12>
 80032a8:	f000 fba4 	bl	80039f4 <_sbrk_r>
 80032ac:	6030      	str	r0, [r6, #0]
 80032ae:	4621      	mov	r1, r4
 80032b0:	4628      	mov	r0, r5
 80032b2:	f000 fb9f 	bl	80039f4 <_sbrk_r>
 80032b6:	1c43      	adds	r3, r0, #1
 80032b8:	d103      	bne.n	80032c2 <sbrk_aligned+0x26>
 80032ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80032be:	4620      	mov	r0, r4
 80032c0:	bd70      	pop	{r4, r5, r6, pc}
 80032c2:	1cc4      	adds	r4, r0, #3
 80032c4:	f024 0403 	bic.w	r4, r4, #3
 80032c8:	42a0      	cmp	r0, r4
 80032ca:	d0f8      	beq.n	80032be <sbrk_aligned+0x22>
 80032cc:	1a21      	subs	r1, r4, r0
 80032ce:	4628      	mov	r0, r5
 80032d0:	f000 fb90 	bl	80039f4 <_sbrk_r>
 80032d4:	3001      	adds	r0, #1
 80032d6:	d1f2      	bne.n	80032be <sbrk_aligned+0x22>
 80032d8:	e7ef      	b.n	80032ba <sbrk_aligned+0x1e>
 80032da:	bf00      	nop
 80032dc:	20004478 	.word	0x20004478

080032e0 <_malloc_r>:
 80032e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032e4:	1ccd      	adds	r5, r1, #3
 80032e6:	f025 0503 	bic.w	r5, r5, #3
 80032ea:	3508      	adds	r5, #8
 80032ec:	2d0c      	cmp	r5, #12
 80032ee:	bf38      	it	cc
 80032f0:	250c      	movcc	r5, #12
 80032f2:	2d00      	cmp	r5, #0
 80032f4:	4606      	mov	r6, r0
 80032f6:	db01      	blt.n	80032fc <_malloc_r+0x1c>
 80032f8:	42a9      	cmp	r1, r5
 80032fa:	d904      	bls.n	8003306 <_malloc_r+0x26>
 80032fc:	230c      	movs	r3, #12
 80032fe:	6033      	str	r3, [r6, #0]
 8003300:	2000      	movs	r0, #0
 8003302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033dc <_malloc_r+0xfc>
 800330a:	f000 f9f9 	bl	8003700 <__malloc_lock>
 800330e:	f8d8 3000 	ldr.w	r3, [r8]
 8003312:	461c      	mov	r4, r3
 8003314:	bb44      	cbnz	r4, 8003368 <_malloc_r+0x88>
 8003316:	4629      	mov	r1, r5
 8003318:	4630      	mov	r0, r6
 800331a:	f7ff ffbf 	bl	800329c <sbrk_aligned>
 800331e:	1c43      	adds	r3, r0, #1
 8003320:	4604      	mov	r4, r0
 8003322:	d158      	bne.n	80033d6 <_malloc_r+0xf6>
 8003324:	f8d8 4000 	ldr.w	r4, [r8]
 8003328:	4627      	mov	r7, r4
 800332a:	2f00      	cmp	r7, #0
 800332c:	d143      	bne.n	80033b6 <_malloc_r+0xd6>
 800332e:	2c00      	cmp	r4, #0
 8003330:	d04b      	beq.n	80033ca <_malloc_r+0xea>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	4639      	mov	r1, r7
 8003336:	4630      	mov	r0, r6
 8003338:	eb04 0903 	add.w	r9, r4, r3
 800333c:	f000 fb5a 	bl	80039f4 <_sbrk_r>
 8003340:	4581      	cmp	r9, r0
 8003342:	d142      	bne.n	80033ca <_malloc_r+0xea>
 8003344:	6821      	ldr	r1, [r4, #0]
 8003346:	4630      	mov	r0, r6
 8003348:	1a6d      	subs	r5, r5, r1
 800334a:	4629      	mov	r1, r5
 800334c:	f7ff ffa6 	bl	800329c <sbrk_aligned>
 8003350:	3001      	adds	r0, #1
 8003352:	d03a      	beq.n	80033ca <_malloc_r+0xea>
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	442b      	add	r3, r5
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	f8d8 3000 	ldr.w	r3, [r8]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	bb62      	cbnz	r2, 80033bc <_malloc_r+0xdc>
 8003362:	f8c8 7000 	str.w	r7, [r8]
 8003366:	e00f      	b.n	8003388 <_malloc_r+0xa8>
 8003368:	6822      	ldr	r2, [r4, #0]
 800336a:	1b52      	subs	r2, r2, r5
 800336c:	d420      	bmi.n	80033b0 <_malloc_r+0xd0>
 800336e:	2a0b      	cmp	r2, #11
 8003370:	d917      	bls.n	80033a2 <_malloc_r+0xc2>
 8003372:	1961      	adds	r1, r4, r5
 8003374:	42a3      	cmp	r3, r4
 8003376:	6025      	str	r5, [r4, #0]
 8003378:	bf18      	it	ne
 800337a:	6059      	strne	r1, [r3, #4]
 800337c:	6863      	ldr	r3, [r4, #4]
 800337e:	bf08      	it	eq
 8003380:	f8c8 1000 	streq.w	r1, [r8]
 8003384:	5162      	str	r2, [r4, r5]
 8003386:	604b      	str	r3, [r1, #4]
 8003388:	4630      	mov	r0, r6
 800338a:	f000 f9bf 	bl	800370c <__malloc_unlock>
 800338e:	f104 000b 	add.w	r0, r4, #11
 8003392:	1d23      	adds	r3, r4, #4
 8003394:	f020 0007 	bic.w	r0, r0, #7
 8003398:	1ac2      	subs	r2, r0, r3
 800339a:	bf1c      	itt	ne
 800339c:	1a1b      	subne	r3, r3, r0
 800339e:	50a3      	strne	r3, [r4, r2]
 80033a0:	e7af      	b.n	8003302 <_malloc_r+0x22>
 80033a2:	6862      	ldr	r2, [r4, #4]
 80033a4:	42a3      	cmp	r3, r4
 80033a6:	bf0c      	ite	eq
 80033a8:	f8c8 2000 	streq.w	r2, [r8]
 80033ac:	605a      	strne	r2, [r3, #4]
 80033ae:	e7eb      	b.n	8003388 <_malloc_r+0xa8>
 80033b0:	4623      	mov	r3, r4
 80033b2:	6864      	ldr	r4, [r4, #4]
 80033b4:	e7ae      	b.n	8003314 <_malloc_r+0x34>
 80033b6:	463c      	mov	r4, r7
 80033b8:	687f      	ldr	r7, [r7, #4]
 80033ba:	e7b6      	b.n	800332a <_malloc_r+0x4a>
 80033bc:	461a      	mov	r2, r3
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	d1fb      	bne.n	80033bc <_malloc_r+0xdc>
 80033c4:	2300      	movs	r3, #0
 80033c6:	6053      	str	r3, [r2, #4]
 80033c8:	e7de      	b.n	8003388 <_malloc_r+0xa8>
 80033ca:	230c      	movs	r3, #12
 80033cc:	4630      	mov	r0, r6
 80033ce:	6033      	str	r3, [r6, #0]
 80033d0:	f000 f99c 	bl	800370c <__malloc_unlock>
 80033d4:	e794      	b.n	8003300 <_malloc_r+0x20>
 80033d6:	6005      	str	r5, [r0, #0]
 80033d8:	e7d6      	b.n	8003388 <_malloc_r+0xa8>
 80033da:	bf00      	nop
 80033dc:	2000447c 	.word	0x2000447c

080033e0 <_printf_common>:
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	4616      	mov	r6, r2
 80033e6:	4698      	mov	r8, r3
 80033e8:	688a      	ldr	r2, [r1, #8]
 80033ea:	690b      	ldr	r3, [r1, #16]
 80033ec:	4607      	mov	r7, r0
 80033ee:	4293      	cmp	r3, r2
 80033f0:	bfb8      	it	lt
 80033f2:	4613      	movlt	r3, r2
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033fa:	460c      	mov	r4, r1
 80033fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003400:	b10a      	cbz	r2, 8003406 <_printf_common+0x26>
 8003402:	3301      	adds	r3, #1
 8003404:	6033      	str	r3, [r6, #0]
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	0699      	lsls	r1, r3, #26
 800340a:	bf42      	ittt	mi
 800340c:	6833      	ldrmi	r3, [r6, #0]
 800340e:	3302      	addmi	r3, #2
 8003410:	6033      	strmi	r3, [r6, #0]
 8003412:	6825      	ldr	r5, [r4, #0]
 8003414:	f015 0506 	ands.w	r5, r5, #6
 8003418:	d106      	bne.n	8003428 <_printf_common+0x48>
 800341a:	f104 0a19 	add.w	sl, r4, #25
 800341e:	68e3      	ldr	r3, [r4, #12]
 8003420:	6832      	ldr	r2, [r6, #0]
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	42ab      	cmp	r3, r5
 8003426:	dc2b      	bgt.n	8003480 <_printf_common+0xa0>
 8003428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	3b00      	subs	r3, #0
 8003430:	bf18      	it	ne
 8003432:	2301      	movne	r3, #1
 8003434:	0692      	lsls	r2, r2, #26
 8003436:	d430      	bmi.n	800349a <_printf_common+0xba>
 8003438:	4641      	mov	r1, r8
 800343a:	4638      	mov	r0, r7
 800343c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003440:	47c8      	blx	r9
 8003442:	3001      	adds	r0, #1
 8003444:	d023      	beq.n	800348e <_printf_common+0xae>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	6922      	ldr	r2, [r4, #16]
 800344a:	f003 0306 	and.w	r3, r3, #6
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf14      	ite	ne
 8003452:	2500      	movne	r5, #0
 8003454:	6833      	ldreq	r3, [r6, #0]
 8003456:	f04f 0600 	mov.w	r6, #0
 800345a:	bf08      	it	eq
 800345c:	68e5      	ldreq	r5, [r4, #12]
 800345e:	f104 041a 	add.w	r4, r4, #26
 8003462:	bf08      	it	eq
 8003464:	1aed      	subeq	r5, r5, r3
 8003466:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800346a:	bf08      	it	eq
 800346c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003470:	4293      	cmp	r3, r2
 8003472:	bfc4      	itt	gt
 8003474:	1a9b      	subgt	r3, r3, r2
 8003476:	18ed      	addgt	r5, r5, r3
 8003478:	42b5      	cmp	r5, r6
 800347a:	d11a      	bne.n	80034b2 <_printf_common+0xd2>
 800347c:	2000      	movs	r0, #0
 800347e:	e008      	b.n	8003492 <_printf_common+0xb2>
 8003480:	2301      	movs	r3, #1
 8003482:	4652      	mov	r2, sl
 8003484:	4641      	mov	r1, r8
 8003486:	4638      	mov	r0, r7
 8003488:	47c8      	blx	r9
 800348a:	3001      	adds	r0, #1
 800348c:	d103      	bne.n	8003496 <_printf_common+0xb6>
 800348e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003496:	3501      	adds	r5, #1
 8003498:	e7c1      	b.n	800341e <_printf_common+0x3e>
 800349a:	2030      	movs	r0, #48	@ 0x30
 800349c:	18e1      	adds	r1, r4, r3
 800349e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034a8:	4422      	add	r2, r4
 80034aa:	3302      	adds	r3, #2
 80034ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034b0:	e7c2      	b.n	8003438 <_printf_common+0x58>
 80034b2:	2301      	movs	r3, #1
 80034b4:	4622      	mov	r2, r4
 80034b6:	4641      	mov	r1, r8
 80034b8:	4638      	mov	r0, r7
 80034ba:	47c8      	blx	r9
 80034bc:	3001      	adds	r0, #1
 80034be:	d0e6      	beq.n	800348e <_printf_common+0xae>
 80034c0:	3601      	adds	r6, #1
 80034c2:	e7d9      	b.n	8003478 <_printf_common+0x98>

080034c4 <_printf_i>:
 80034c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c8:	7e0f      	ldrb	r7, [r1, #24]
 80034ca:	4691      	mov	r9, r2
 80034cc:	2f78      	cmp	r7, #120	@ 0x78
 80034ce:	4680      	mov	r8, r0
 80034d0:	460c      	mov	r4, r1
 80034d2:	469a      	mov	sl, r3
 80034d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034da:	d807      	bhi.n	80034ec <_printf_i+0x28>
 80034dc:	2f62      	cmp	r7, #98	@ 0x62
 80034de:	d80a      	bhi.n	80034f6 <_printf_i+0x32>
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	f000 80d1 	beq.w	8003688 <_printf_i+0x1c4>
 80034e6:	2f58      	cmp	r7, #88	@ 0x58
 80034e8:	f000 80b8 	beq.w	800365c <_printf_i+0x198>
 80034ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034f4:	e03a      	b.n	800356c <_printf_i+0xa8>
 80034f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034fa:	2b15      	cmp	r3, #21
 80034fc:	d8f6      	bhi.n	80034ec <_printf_i+0x28>
 80034fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003504 <_printf_i+0x40>)
 8003500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003504:	0800355d 	.word	0x0800355d
 8003508:	08003571 	.word	0x08003571
 800350c:	080034ed 	.word	0x080034ed
 8003510:	080034ed 	.word	0x080034ed
 8003514:	080034ed 	.word	0x080034ed
 8003518:	080034ed 	.word	0x080034ed
 800351c:	08003571 	.word	0x08003571
 8003520:	080034ed 	.word	0x080034ed
 8003524:	080034ed 	.word	0x080034ed
 8003528:	080034ed 	.word	0x080034ed
 800352c:	080034ed 	.word	0x080034ed
 8003530:	0800366f 	.word	0x0800366f
 8003534:	0800359b 	.word	0x0800359b
 8003538:	08003629 	.word	0x08003629
 800353c:	080034ed 	.word	0x080034ed
 8003540:	080034ed 	.word	0x080034ed
 8003544:	08003691 	.word	0x08003691
 8003548:	080034ed 	.word	0x080034ed
 800354c:	0800359b 	.word	0x0800359b
 8003550:	080034ed 	.word	0x080034ed
 8003554:	080034ed 	.word	0x080034ed
 8003558:	08003631 	.word	0x08003631
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6032      	str	r2, [r6, #0]
 8003564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800356c:	2301      	movs	r3, #1
 800356e:	e09c      	b.n	80036aa <_printf_i+0x1e6>
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	1d19      	adds	r1, r3, #4
 8003576:	6031      	str	r1, [r6, #0]
 8003578:	0606      	lsls	r6, r0, #24
 800357a:	d501      	bpl.n	8003580 <_printf_i+0xbc>
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	e003      	b.n	8003588 <_printf_i+0xc4>
 8003580:	0645      	lsls	r5, r0, #25
 8003582:	d5fb      	bpl.n	800357c <_printf_i+0xb8>
 8003584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003588:	2d00      	cmp	r5, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xd0>
 800358c:	232d      	movs	r3, #45	@ 0x2d
 800358e:	426d      	negs	r5, r5
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003594:	230a      	movs	r3, #10
 8003596:	4858      	ldr	r0, [pc, #352]	@ (80036f8 <_printf_i+0x234>)
 8003598:	e011      	b.n	80035be <_printf_i+0xfa>
 800359a:	6821      	ldr	r1, [r4, #0]
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	0608      	lsls	r0, r1, #24
 80035a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80035a4:	d402      	bmi.n	80035ac <_printf_i+0xe8>
 80035a6:	0649      	lsls	r1, r1, #25
 80035a8:	bf48      	it	mi
 80035aa:	b2ad      	uxthmi	r5, r5
 80035ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80035ae:	6033      	str	r3, [r6, #0]
 80035b0:	bf14      	ite	ne
 80035b2:	230a      	movne	r3, #10
 80035b4:	2308      	moveq	r3, #8
 80035b6:	4850      	ldr	r0, [pc, #320]	@ (80036f8 <_printf_i+0x234>)
 80035b8:	2100      	movs	r1, #0
 80035ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035be:	6866      	ldr	r6, [r4, #4]
 80035c0:	2e00      	cmp	r6, #0
 80035c2:	60a6      	str	r6, [r4, #8]
 80035c4:	db05      	blt.n	80035d2 <_printf_i+0x10e>
 80035c6:	6821      	ldr	r1, [r4, #0]
 80035c8:	432e      	orrs	r6, r5
 80035ca:	f021 0104 	bic.w	r1, r1, #4
 80035ce:	6021      	str	r1, [r4, #0]
 80035d0:	d04b      	beq.n	800366a <_printf_i+0x1a6>
 80035d2:	4616      	mov	r6, r2
 80035d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80035d8:	fb03 5711 	mls	r7, r3, r1, r5
 80035dc:	5dc7      	ldrb	r7, [r0, r7]
 80035de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035e2:	462f      	mov	r7, r5
 80035e4:	42bb      	cmp	r3, r7
 80035e6:	460d      	mov	r5, r1
 80035e8:	d9f4      	bls.n	80035d4 <_printf_i+0x110>
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d10b      	bne.n	8003606 <_printf_i+0x142>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	07df      	lsls	r7, r3, #31
 80035f2:	d508      	bpl.n	8003606 <_printf_i+0x142>
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	6861      	ldr	r1, [r4, #4]
 80035f8:	4299      	cmp	r1, r3
 80035fa:	bfde      	ittt	le
 80035fc:	2330      	movle	r3, #48	@ 0x30
 80035fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003602:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003606:	1b92      	subs	r2, r2, r6
 8003608:	6122      	str	r2, [r4, #16]
 800360a:	464b      	mov	r3, r9
 800360c:	4621      	mov	r1, r4
 800360e:	4640      	mov	r0, r8
 8003610:	f8cd a000 	str.w	sl, [sp]
 8003614:	aa03      	add	r2, sp, #12
 8003616:	f7ff fee3 	bl	80033e0 <_printf_common>
 800361a:	3001      	adds	r0, #1
 800361c:	d14a      	bne.n	80036b4 <_printf_i+0x1f0>
 800361e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003622:	b004      	add	sp, #16
 8003624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	2778      	movs	r7, #120	@ 0x78
 8003632:	4832      	ldr	r0, [pc, #200]	@ (80036fc <_printf_i+0x238>)
 8003634:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	6831      	ldr	r1, [r6, #0]
 800363c:	061f      	lsls	r7, r3, #24
 800363e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003642:	d402      	bmi.n	800364a <_printf_i+0x186>
 8003644:	065f      	lsls	r7, r3, #25
 8003646:	bf48      	it	mi
 8003648:	b2ad      	uxthmi	r5, r5
 800364a:	6031      	str	r1, [r6, #0]
 800364c:	07d9      	lsls	r1, r3, #31
 800364e:	bf44      	itt	mi
 8003650:	f043 0320 	orrmi.w	r3, r3, #32
 8003654:	6023      	strmi	r3, [r4, #0]
 8003656:	b11d      	cbz	r5, 8003660 <_printf_i+0x19c>
 8003658:	2310      	movs	r3, #16
 800365a:	e7ad      	b.n	80035b8 <_printf_i+0xf4>
 800365c:	4826      	ldr	r0, [pc, #152]	@ (80036f8 <_printf_i+0x234>)
 800365e:	e7e9      	b.n	8003634 <_printf_i+0x170>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	e7f6      	b.n	8003658 <_printf_i+0x194>
 800366a:	4616      	mov	r6, r2
 800366c:	e7bd      	b.n	80035ea <_printf_i+0x126>
 800366e:	6833      	ldr	r3, [r6, #0]
 8003670:	6825      	ldr	r5, [r4, #0]
 8003672:	1d18      	adds	r0, r3, #4
 8003674:	6961      	ldr	r1, [r4, #20]
 8003676:	6030      	str	r0, [r6, #0]
 8003678:	062e      	lsls	r6, r5, #24
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	d501      	bpl.n	8003682 <_printf_i+0x1be>
 800367e:	6019      	str	r1, [r3, #0]
 8003680:	e002      	b.n	8003688 <_printf_i+0x1c4>
 8003682:	0668      	lsls	r0, r5, #25
 8003684:	d5fb      	bpl.n	800367e <_printf_i+0x1ba>
 8003686:	8019      	strh	r1, [r3, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	4616      	mov	r6, r2
 800368c:	6123      	str	r3, [r4, #16]
 800368e:	e7bc      	b.n	800360a <_printf_i+0x146>
 8003690:	6833      	ldr	r3, [r6, #0]
 8003692:	2100      	movs	r1, #0
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	6032      	str	r2, [r6, #0]
 8003698:	681e      	ldr	r6, [r3, #0]
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f9ed 	bl	8003a7c <memchr>
 80036a2:	b108      	cbz	r0, 80036a8 <_printf_i+0x1e4>
 80036a4:	1b80      	subs	r0, r0, r6
 80036a6:	6060      	str	r0, [r4, #4]
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	6123      	str	r3, [r4, #16]
 80036ac:	2300      	movs	r3, #0
 80036ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036b2:	e7aa      	b.n	800360a <_printf_i+0x146>
 80036b4:	4632      	mov	r2, r6
 80036b6:	4649      	mov	r1, r9
 80036b8:	4640      	mov	r0, r8
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	47d0      	blx	sl
 80036be:	3001      	adds	r0, #1
 80036c0:	d0ad      	beq.n	800361e <_printf_i+0x15a>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	079b      	lsls	r3, r3, #30
 80036c6:	d413      	bmi.n	80036f0 <_printf_i+0x22c>
 80036c8:	68e0      	ldr	r0, [r4, #12]
 80036ca:	9b03      	ldr	r3, [sp, #12]
 80036cc:	4298      	cmp	r0, r3
 80036ce:	bfb8      	it	lt
 80036d0:	4618      	movlt	r0, r3
 80036d2:	e7a6      	b.n	8003622 <_printf_i+0x15e>
 80036d4:	2301      	movs	r3, #1
 80036d6:	4632      	mov	r2, r6
 80036d8:	4649      	mov	r1, r9
 80036da:	4640      	mov	r0, r8
 80036dc:	47d0      	blx	sl
 80036de:	3001      	adds	r0, #1
 80036e0:	d09d      	beq.n	800361e <_printf_i+0x15a>
 80036e2:	3501      	adds	r5, #1
 80036e4:	68e3      	ldr	r3, [r4, #12]
 80036e6:	9903      	ldr	r1, [sp, #12]
 80036e8:	1a5b      	subs	r3, r3, r1
 80036ea:	42ab      	cmp	r3, r5
 80036ec:	dcf2      	bgt.n	80036d4 <_printf_i+0x210>
 80036ee:	e7eb      	b.n	80036c8 <_printf_i+0x204>
 80036f0:	2500      	movs	r5, #0
 80036f2:	f104 0619 	add.w	r6, r4, #25
 80036f6:	e7f5      	b.n	80036e4 <_printf_i+0x220>
 80036f8:	08004361 	.word	0x08004361
 80036fc:	08004372 	.word	0x08004372

08003700 <__malloc_lock>:
 8003700:	4801      	ldr	r0, [pc, #4]	@ (8003708 <__malloc_lock+0x8>)
 8003702:	f7ff bc40 	b.w	8002f86 <__retarget_lock_acquire_recursive>
 8003706:	bf00      	nop
 8003708:	20004474 	.word	0x20004474

0800370c <__malloc_unlock>:
 800370c:	4801      	ldr	r0, [pc, #4]	@ (8003714 <__malloc_unlock+0x8>)
 800370e:	f7ff bc3b 	b.w	8002f88 <__retarget_lock_release_recursive>
 8003712:	bf00      	nop
 8003714:	20004474 	.word	0x20004474

08003718 <__sread>:
 8003718:	b510      	push	{r4, lr}
 800371a:	460c      	mov	r4, r1
 800371c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003720:	f000 f956 	bl	80039d0 <_read_r>
 8003724:	2800      	cmp	r0, #0
 8003726:	bfab      	itete	ge
 8003728:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800372a:	89a3      	ldrhlt	r3, [r4, #12]
 800372c:	181b      	addge	r3, r3, r0
 800372e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003732:	bfac      	ite	ge
 8003734:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003736:	81a3      	strhlt	r3, [r4, #12]
 8003738:	bd10      	pop	{r4, pc}

0800373a <__swrite>:
 800373a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373e:	461f      	mov	r7, r3
 8003740:	898b      	ldrh	r3, [r1, #12]
 8003742:	4605      	mov	r5, r0
 8003744:	05db      	lsls	r3, r3, #23
 8003746:	460c      	mov	r4, r1
 8003748:	4616      	mov	r6, r2
 800374a:	d505      	bpl.n	8003758 <__swrite+0x1e>
 800374c:	2302      	movs	r3, #2
 800374e:	2200      	movs	r2, #0
 8003750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003754:	f000 f92a 	bl	80039ac <_lseek_r>
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	4632      	mov	r2, r6
 800375c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	4628      	mov	r0, r5
 8003764:	463b      	mov	r3, r7
 8003766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800376a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800376e:	f000 b951 	b.w	8003a14 <_write_r>

08003772 <__sseek>:
 8003772:	b510      	push	{r4, lr}
 8003774:	460c      	mov	r4, r1
 8003776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377a:	f000 f917 	bl	80039ac <_lseek_r>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	bf15      	itete	ne
 8003784:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003786:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800378a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800378e:	81a3      	strheq	r3, [r4, #12]
 8003790:	bf18      	it	ne
 8003792:	81a3      	strhne	r3, [r4, #12]
 8003794:	bd10      	pop	{r4, pc}

08003796 <__sclose>:
 8003796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800379a:	f000 b94d 	b.w	8003a38 <_close_r>

0800379e <__swbuf_r>:
 800379e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a0:	460e      	mov	r6, r1
 80037a2:	4614      	mov	r4, r2
 80037a4:	4605      	mov	r5, r0
 80037a6:	b118      	cbz	r0, 80037b0 <__swbuf_r+0x12>
 80037a8:	6a03      	ldr	r3, [r0, #32]
 80037aa:	b90b      	cbnz	r3, 80037b0 <__swbuf_r+0x12>
 80037ac:	f7ff fb12 	bl	8002dd4 <__sinit>
 80037b0:	69a3      	ldr	r3, [r4, #24]
 80037b2:	60a3      	str	r3, [r4, #8]
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	071a      	lsls	r2, r3, #28
 80037b8:	d501      	bpl.n	80037be <__swbuf_r+0x20>
 80037ba:	6923      	ldr	r3, [r4, #16]
 80037bc:	b943      	cbnz	r3, 80037d0 <__swbuf_r+0x32>
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f82b 	bl	800381c <__swsetup_r>
 80037c6:	b118      	cbz	r0, 80037d0 <__swbuf_r+0x32>
 80037c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80037cc:	4638      	mov	r0, r7
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	6922      	ldr	r2, [r4, #16]
 80037d4:	b2f6      	uxtb	r6, r6
 80037d6:	1a98      	subs	r0, r3, r2
 80037d8:	6963      	ldr	r3, [r4, #20]
 80037da:	4637      	mov	r7, r6
 80037dc:	4283      	cmp	r3, r0
 80037de:	dc05      	bgt.n	80037ec <__swbuf_r+0x4e>
 80037e0:	4621      	mov	r1, r4
 80037e2:	4628      	mov	r0, r5
 80037e4:	f7ff fa2e 	bl	8002c44 <_fflush_r>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d1ed      	bne.n	80037c8 <__swbuf_r+0x2a>
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	60a3      	str	r3, [r4, #8]
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	701e      	strb	r6, [r3, #0]
 80037fa:	6962      	ldr	r2, [r4, #20]
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	429a      	cmp	r2, r3
 8003800:	d004      	beq.n	800380c <__swbuf_r+0x6e>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	07db      	lsls	r3, r3, #31
 8003806:	d5e1      	bpl.n	80037cc <__swbuf_r+0x2e>
 8003808:	2e0a      	cmp	r6, #10
 800380a:	d1df      	bne.n	80037cc <__swbuf_r+0x2e>
 800380c:	4621      	mov	r1, r4
 800380e:	4628      	mov	r0, r5
 8003810:	f7ff fa18 	bl	8002c44 <_fflush_r>
 8003814:	2800      	cmp	r0, #0
 8003816:	d0d9      	beq.n	80037cc <__swbuf_r+0x2e>
 8003818:	e7d6      	b.n	80037c8 <__swbuf_r+0x2a>
	...

0800381c <__swsetup_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	4b29      	ldr	r3, [pc, #164]	@ (80038c4 <__swsetup_r+0xa8>)
 8003820:	4605      	mov	r5, r0
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	460c      	mov	r4, r1
 8003826:	b118      	cbz	r0, 8003830 <__swsetup_r+0x14>
 8003828:	6a03      	ldr	r3, [r0, #32]
 800382a:	b90b      	cbnz	r3, 8003830 <__swsetup_r+0x14>
 800382c:	f7ff fad2 	bl	8002dd4 <__sinit>
 8003830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003834:	0719      	lsls	r1, r3, #28
 8003836:	d422      	bmi.n	800387e <__swsetup_r+0x62>
 8003838:	06da      	lsls	r2, r3, #27
 800383a:	d407      	bmi.n	800384c <__swsetup_r+0x30>
 800383c:	2209      	movs	r2, #9
 800383e:	602a      	str	r2, [r5, #0]
 8003840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	e033      	b.n	80038b4 <__swsetup_r+0x98>
 800384c:	0758      	lsls	r0, r3, #29
 800384e:	d512      	bpl.n	8003876 <__swsetup_r+0x5a>
 8003850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003852:	b141      	cbz	r1, 8003866 <__swsetup_r+0x4a>
 8003854:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003858:	4299      	cmp	r1, r3
 800385a:	d002      	beq.n	8003862 <__swsetup_r+0x46>
 800385c:	4628      	mov	r0, r5
 800385e:	f7ff fb95 	bl	8002f8c <_free_r>
 8003862:	2300      	movs	r3, #0
 8003864:	6363      	str	r3, [r4, #52]	@ 0x34
 8003866:	89a3      	ldrh	r3, [r4, #12]
 8003868:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800386c:	81a3      	strh	r3, [r4, #12]
 800386e:	2300      	movs	r3, #0
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	b94b      	cbnz	r3, 8003896 <__swsetup_r+0x7a>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388c:	d003      	beq.n	8003896 <__swsetup_r+0x7a>
 800388e:	4621      	mov	r1, r4
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f83e 	bl	8003912 <__smakebuf_r>
 8003896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800389a:	f013 0201 	ands.w	r2, r3, #1
 800389e:	d00a      	beq.n	80038b6 <__swsetup_r+0x9a>
 80038a0:	2200      	movs	r2, #0
 80038a2:	60a2      	str	r2, [r4, #8]
 80038a4:	6962      	ldr	r2, [r4, #20]
 80038a6:	4252      	negs	r2, r2
 80038a8:	61a2      	str	r2, [r4, #24]
 80038aa:	6922      	ldr	r2, [r4, #16]
 80038ac:	b942      	cbnz	r2, 80038c0 <__swsetup_r+0xa4>
 80038ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038b2:	d1c5      	bne.n	8003840 <__swsetup_r+0x24>
 80038b4:	bd38      	pop	{r3, r4, r5, pc}
 80038b6:	0799      	lsls	r1, r3, #30
 80038b8:	bf58      	it	pl
 80038ba:	6962      	ldrpl	r2, [r4, #20]
 80038bc:	60a2      	str	r2, [r4, #8]
 80038be:	e7f4      	b.n	80038aa <__swsetup_r+0x8e>
 80038c0:	2000      	movs	r0, #0
 80038c2:	e7f7      	b.n	80038b4 <__swsetup_r+0x98>
 80038c4:	2000001c 	.word	0x2000001c

080038c8 <__swhatbuf_r>:
 80038c8:	b570      	push	{r4, r5, r6, lr}
 80038ca:	460c      	mov	r4, r1
 80038cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d0:	4615      	mov	r5, r2
 80038d2:	2900      	cmp	r1, #0
 80038d4:	461e      	mov	r6, r3
 80038d6:	b096      	sub	sp, #88	@ 0x58
 80038d8:	da0c      	bge.n	80038f4 <__swhatbuf_r+0x2c>
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	2100      	movs	r1, #0
 80038de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80038e2:	bf14      	ite	ne
 80038e4:	2340      	movne	r3, #64	@ 0x40
 80038e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80038ea:	2000      	movs	r0, #0
 80038ec:	6031      	str	r1, [r6, #0]
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	b016      	add	sp, #88	@ 0x58
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	466a      	mov	r2, sp
 80038f6:	f000 f8af 	bl	8003a58 <_fstat_r>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	dbed      	blt.n	80038da <__swhatbuf_r+0x12>
 80038fe:	9901      	ldr	r1, [sp, #4]
 8003900:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003904:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003908:	4259      	negs	r1, r3
 800390a:	4159      	adcs	r1, r3
 800390c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003910:	e7eb      	b.n	80038ea <__swhatbuf_r+0x22>

08003912 <__smakebuf_r>:
 8003912:	898b      	ldrh	r3, [r1, #12]
 8003914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003916:	079d      	lsls	r5, r3, #30
 8003918:	4606      	mov	r6, r0
 800391a:	460c      	mov	r4, r1
 800391c:	d507      	bpl.n	800392e <__smakebuf_r+0x1c>
 800391e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003922:	6023      	str	r3, [r4, #0]
 8003924:	6123      	str	r3, [r4, #16]
 8003926:	2301      	movs	r3, #1
 8003928:	6163      	str	r3, [r4, #20]
 800392a:	b003      	add	sp, #12
 800392c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800392e:	466a      	mov	r2, sp
 8003930:	ab01      	add	r3, sp, #4
 8003932:	f7ff ffc9 	bl	80038c8 <__swhatbuf_r>
 8003936:	9f00      	ldr	r7, [sp, #0]
 8003938:	4605      	mov	r5, r0
 800393a:	4639      	mov	r1, r7
 800393c:	4630      	mov	r0, r6
 800393e:	f7ff fccf 	bl	80032e0 <_malloc_r>
 8003942:	b948      	cbnz	r0, 8003958 <__smakebuf_r+0x46>
 8003944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003948:	059a      	lsls	r2, r3, #22
 800394a:	d4ee      	bmi.n	800392a <__smakebuf_r+0x18>
 800394c:	f023 0303 	bic.w	r3, r3, #3
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	e7e2      	b.n	800391e <__smakebuf_r+0xc>
 8003958:	89a3      	ldrh	r3, [r4, #12]
 800395a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800395e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003962:	81a3      	strh	r3, [r4, #12]
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	6020      	str	r0, [r4, #0]
 8003968:	b15b      	cbz	r3, 8003982 <__smakebuf_r+0x70>
 800396a:	4630      	mov	r0, r6
 800396c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003970:	f000 f80c 	bl	800398c <_isatty_r>
 8003974:	b128      	cbz	r0, 8003982 <__smakebuf_r+0x70>
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	f023 0303 	bic.w	r3, r3, #3
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	81a3      	strh	r3, [r4, #12]
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	431d      	orrs	r5, r3
 8003986:	81a5      	strh	r5, [r4, #12]
 8003988:	e7cf      	b.n	800392a <__smakebuf_r+0x18>
	...

0800398c <_isatty_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	2300      	movs	r3, #0
 8003990:	4d05      	ldr	r5, [pc, #20]	@ (80039a8 <_isatty_r+0x1c>)
 8003992:	4604      	mov	r4, r0
 8003994:	4608      	mov	r0, r1
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	f7fe ffe6 	bl	8002968 <_isatty>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_isatty_r+0x1a>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_isatty_r+0x1a>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	20004480 	.word	0x20004480

080039ac <_lseek_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	2200      	movs	r2, #0
 80039b6:	4d05      	ldr	r5, [pc, #20]	@ (80039cc <_lseek_r+0x20>)
 80039b8:	602a      	str	r2, [r5, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	f7fe ffde 	bl	800297c <_lseek>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d102      	bne.n	80039ca <_lseek_r+0x1e>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	b103      	cbz	r3, 80039ca <_lseek_r+0x1e>
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	20004480 	.word	0x20004480

080039d0 <_read_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4604      	mov	r4, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	2200      	movs	r2, #0
 80039da:	4d05      	ldr	r5, [pc, #20]	@ (80039f0 <_read_r+0x20>)
 80039dc:	602a      	str	r2, [r5, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	f7fe ff6f 	bl	80028c2 <_read>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_read_r+0x1e>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_read_r+0x1e>
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	20004480 	.word	0x20004480

080039f4 <_sbrk_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	2300      	movs	r3, #0
 80039f8:	4d05      	ldr	r5, [pc, #20]	@ (8003a10 <_sbrk_r+0x1c>)
 80039fa:	4604      	mov	r4, r0
 80039fc:	4608      	mov	r0, r1
 80039fe:	602b      	str	r3, [r5, #0]
 8003a00:	f7fe ffc8 	bl	8002994 <_sbrk>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d102      	bne.n	8003a0e <_sbrk_r+0x1a>
 8003a08:	682b      	ldr	r3, [r5, #0]
 8003a0a:	b103      	cbz	r3, 8003a0e <_sbrk_r+0x1a>
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
 8003a10:	20004480 	.word	0x20004480

08003a14 <_write_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4604      	mov	r4, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4d05      	ldr	r5, [pc, #20]	@ (8003a34 <_write_r+0x20>)
 8003a20:	602a      	str	r2, [r5, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f7fe ff6a 	bl	80028fc <_write>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_write_r+0x1e>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_write_r+0x1e>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	20004480 	.word	0x20004480

08003a38 <_close_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	4d05      	ldr	r5, [pc, #20]	@ (8003a54 <_close_r+0x1c>)
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4608      	mov	r0, r1
 8003a42:	602b      	str	r3, [r5, #0]
 8003a44:	f7fe ff76 	bl	8002934 <_close>
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	d102      	bne.n	8003a52 <_close_r+0x1a>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	b103      	cbz	r3, 8003a52 <_close_r+0x1a>
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	bd38      	pop	{r3, r4, r5, pc}
 8003a54:	20004480 	.word	0x20004480

08003a58 <_fstat_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4d06      	ldr	r5, [pc, #24]	@ (8003a78 <_fstat_r+0x20>)
 8003a5e:	4604      	mov	r4, r0
 8003a60:	4608      	mov	r0, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	602b      	str	r3, [r5, #0]
 8003a66:	f7fe ff70 	bl	800294a <_fstat>
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	d102      	bne.n	8003a74 <_fstat_r+0x1c>
 8003a6e:	682b      	ldr	r3, [r5, #0]
 8003a70:	b103      	cbz	r3, 8003a74 <_fstat_r+0x1c>
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	bd38      	pop	{r3, r4, r5, pc}
 8003a76:	bf00      	nop
 8003a78:	20004480 	.word	0x20004480

08003a7c <memchr>:
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	b2c9      	uxtb	r1, r1
 8003a82:	4402      	add	r2, r0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	d101      	bne.n	8003a8e <memchr+0x12>
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	e003      	b.n	8003a96 <memchr+0x1a>
 8003a8e:	7804      	ldrb	r4, [r0, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	428c      	cmp	r4, r1
 8003a94:	d1f6      	bne.n	8003a84 <memchr+0x8>
 8003a96:	bd10      	pop	{r4, pc}

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
